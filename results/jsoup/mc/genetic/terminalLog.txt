WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[32m05.11.2021 - 00:07:46.572 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Current absolute path is: /home/lukas/workspace/master-benchmark/projects/jsoup
[m[32m05.11.2021 - 00:07:46.575 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to jar: /home/lukas/workspace/master-benchmark/projects/jsoup/target/jsoup-1.12.2-fat-tests.jar
[m[32m05.11.2021 - 00:07:46.575 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to slicer: /home/lukas/workspace/master-jsr/slicer/Slicer4J
[m[32m05.11.2021 - 00:07:46.575 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out dir: /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic
[m[32m05.11.2021 - 00:07:46.575 [DEBUG] Slicer4JSlicingStrategy.logPaths() - Path to out logging jar: /home/lukas/workspace/master-jsr/slicer/DynamicSlicingCore/DynamicSlicingLoggingClasses/DynamicSlicingLogger.jar
[m[m05.11.2021 - 00:07:47.543 [INFO ] ParsingStrategy.parseTestSuiteFromFilePath() - Parsing test suite from File Path
[m[m05.11.2021 - 00:07:47.543 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path ./src/test/java
[m[m05.11.2021 - 00:07:48.295 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.314 [INFO ] ParsingStrategy.parseTestSuite() - Found 7 test cases
[m[m05.11.2021 - 00:07:48.316 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.QueryParserTest::testOrGetsCorrectPrecedence has 6 assertions: 
 assertTrue(eval instanceof CombiningEvaluator.Or); ref {eval} [16-16],
 assertEquals(3, or.evaluators.size()); ref {or.evaluators, or} [18-18],
 assertTrue(innerEval instanceof CombiningEvaluator.And); ref {innerEval} [20-20],
 assertEquals(2, and.evaluators.size()); ref {and.evaluators, and} [22-22],
 assertTrue(and.evaluators.get(0) instanceof Evaluator.Tag); ref {and.evaluators, and} [23-23],
 assertTrue(and.evaluators.get(1) instanceof StructuralEvaluator.Parent); ref {and.evaluators, and} [24-24]
[m[m05.11.2021 - 00:07:48.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.QueryParserTest::testParsesMultiCorrectly has 6 assertions: 
 assertTrue(eval instanceof CombiningEvaluator.Or); ref {eval} [30-30],
 assertEquals(2, or.evaluators.size()); ref {or.evaluators, or} [32-32],
 assertEquals("ol :ImmediateParent.foo", andLeft.toString()); ref {andLeft} [37-37],
 assertEquals(2, andLeft.evaluators.size()); ref {andLeft, andLeft.evaluators} [38-38],
 assertEquals("li :prevli :ImmediateParentol", andRight.toString()); ref {andRight} [39-39],
 assertEquals(2, andLeft.evaluators.size()); ref {andLeft, andLeft.evaluators} [40-40]
[m[m05.11.2021 - 00:07:48.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.QueryParserTest::exceptionOnUncloseAttribute has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.QueryParserTest::testParsesSingleQuoteInContains has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.317 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.QueryParserTest::exceptOnEmptySelector has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.318 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.QueryParserTest::exceptOnNullSelector has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.318 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.QueryParserTest::okOnSpacesForeAndAft has 1 assertions: 
 // TODO - don't really love that toString() result...
assertEquals("div :parentspan", parse.toString()); ref {parse} [64-64]
[m[m05.11.2021 - 00:07:48.319 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.319 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.346 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m05.11.2021 - 00:07:48.347 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::escape has 10 assertions: 
 assertEquals("Hello &amp;&lt;&gt; &Aring; &aring; &#x3c0; &#x65b0; there &frac34; &copy; &raquo;", escapedAscii); ref {escapedAscii} [19-19],
 assertEquals("Hello &amp;&lt;&gt; &angst; &aring; &pi; &#x65b0; there &frac34; &copy; &raquo;", escapedAsciiFull); ref {escapedAsciiFull} [20-20],
 assertEquals("Hello &amp;&lt;&gt; &#xc5; &#xe5; &#x3c0; &#x65b0; there &#xbe; &#xa9; &#xbb;", escapedAsciiXhtml); ref {escapedAsciiXhtml} [21-21],
 assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfFull); ref {escapedUtfFull} [22-22],
 assertEquals("Hello &amp;&lt;&gt; Å å π 新 there ¾ © »", escapedUtfMin); ref {escapedUtfMin} [23-23],
 // odd that it's defined as aring in base but angst in full
// round trip
assertEquals(text, Entities.unescape(escapedAscii)); ref {escapedAscii, text, Entities} [27-27],
 assertEquals(text, Entities.unescape(escapedAsciiFull)); ref {text, escapedAsciiFull, Entities} [28-28],
 assertEquals(text, Entities.unescape(escapedAsciiXhtml)); ref {text, escapedAsciiXhtml, Entities} [29-29],
 assertEquals(text, Entities.unescape(escapedUtfFull)); ref {escapedUtfFull, text, Entities} [30-30],
 assertEquals(text, Entities.unescape(escapedUtfMin)); ref {escapedUtfMin, text, Entities} [31-31]
[m[m05.11.2021 - 00:07:48.348 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::escapedSupplementary has 3 assertions: 
 assertEquals("&#x1d559;", escapedAscii); ref {escapedAscii} [37-37],
 assertEquals("&hopf;", escapedAsciiFull); ref {escapedAsciiFull} [39-39],
 assertEquals(text, escapedUtf); ref {escapedUtf, text} [41-41]
[m[m05.11.2021 - 00:07:48.348 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::unescapeMultiChars has 3 assertions: 
 assertEquals(un, Entities.unescape(text)); ref {un, text, Entities} [47-47],
 assertEquals("&Gt; &Gg;&#x338; &Gt;&#x20d2; &Gt;&#x338; &Gt; &Gt;", escaped); ref {escaped} [49-49],
 assertEquals(un, Entities.unescape(escaped)); ref {escaped, un, Entities} [50-50]
[m[m05.11.2021 - 00:07:48.349 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::xhtml has 8 assertions: 
 assertEquals(38, xhtml.codepointForName("amp")); ref {xhtml} [55-55],
 assertEquals(62, xhtml.codepointForName("gt")); ref {xhtml} [56-56],
 assertEquals(60, xhtml.codepointForName("lt")); ref {xhtml} [57-57],
 assertEquals(34, xhtml.codepointForName("quot")); ref {xhtml} [58-58],
 assertEquals("amp", xhtml.nameForCodepoint(38)); ref {xhtml} [60-60],
 assertEquals("gt", xhtml.nameForCodepoint(62)); ref {xhtml} [61-61],
 assertEquals("lt", xhtml.nameForCodepoint(60)); ref {xhtml} [62-62],
 assertEquals("quot", xhtml.nameForCodepoint(34)); ref {xhtml} [63-63]
[m[m05.11.2021 - 00:07:48.349 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::getByName has 4 assertions: 
 assertEquals("≫⃒", Entities.getByName("nGt")); ref {Entities} [67-67],
 assertEquals("fj", Entities.getByName("fjlig")); ref {Entities} [68-68],
 assertEquals("≫", Entities.getByName("gg")); ref {Entities} [69-69],
 assertEquals("©", Entities.getByName("copy")); ref {Entities} [70-70]
[m[m05.11.2021 - 00:07:48.350 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::escapeSupplementaryCharacter has 2 assertions: 
 assertEquals("&#x210c1;", escapedAscii); ref {escapedAscii} [76-76],
 assertEquals(text, escapedUtf); ref {escapedUtf, text} [78-78]
[m[m05.11.2021 - 00:07:48.350 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::notMissingMultis has 1 assertions: 
 assertEquals(un, Entities.unescape(text)); ref {un, text, Entities} [84-84]
[m[m05.11.2021 - 00:07:48.350 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::notMissingSupplementals has 1 assertions: 
 assertEquals(un, Entities.unescape(text)); ref {un, text, Entities} [90-90]
[m[m05.11.2021 - 00:07:48.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::unescape has 2 assertions: 
 assertEquals("Hello Æ &<> ® Å &angst π π 新 there &! ¾ © ©", Entities.unescape(text)); ref {text, Entities} [95-95],
 assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown")); ref {Entities} [97-97]
[m[m05.11.2021 - 00:07:48.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::strictUnescape has 3 assertions: 
 assertEquals("Hello &amp= &", Entities.unescape(text, true)); ref {text, Entities} [102-102],
 assertEquals("Hello &= &", Entities.unescape(text)); ref {text, Entities} [103-103],
 assertEquals("Hello &= &", Entities.unescape(text, false)); ref {text, Entities} [104-104]
[m[m05.11.2021 - 00:07:48.351 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::caseSensitive has 2 assertions: 
 assertEquals("&Uuml; &uuml; &amp; &amp;", Entities.escape(unescaped, new OutputSettings().charset("ascii").escapeMode(extended))); ref {unescaped, extended, Entities} [110-111],
 assertEquals("Ü ü & &", Entities.unescape(escaped)); ref {escaped, Entities} [114-114]
[m[m05.11.2021 - 00:07:48.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::quoteReplacements has 1 assertions: 
 assertEquals(unescaped, Entities.unescape(escaped)); ref {escaped, unescaped, Entities} [121-121]
[m[m05.11.2021 - 00:07:48.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::letterDigitEntities has 3 assertions: 
 assertEquals("&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;", p.html()); ref {p} [129-129],
 assertEquals("¹²³¼½¾", p.text()); ref {p} [130-130],
 assertEquals("¹²³¼½¾", p.html()); ref {p} [132-132]
[m[m05.11.2021 - 00:07:48.352 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::noSpuriousDecodes has 1 assertions: 
 assertEquals(string, Entities.unescape(string)); ref {string, Entities} [137-137]
[m[m05.11.2021 - 00:07:48.353 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.EntitiesTest::escapesGtInXmlAttributesButNotInHtml has 2 assertions: 
 assertEquals("<a title=\"<p>One</p>\">One</a>", element.outerHtml()); ref {element} [149-149],
 assertEquals("<a title=\"&lt;p>One&lt;/p>\">One</a>", element.outerHtml()); ref {element} [152-152]
[m[m05.11.2021 - 00:07:48.353 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.353 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.356 [INFO ] ParsingStrategy.parseTestSuite() - Found 10 test cases
[m[m05.11.2021 - 00:07:48.357 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::isCaseSensitive has 1 assertions: 
 assertFalse(p1.equals(p2)); ref {p1, p2} [19-19]
[m[m05.11.2021 - 00:07:48.357 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::canBeInsensitive has 1 assertions: 
 assertSame(script1, script2); ref {script1, script2} [25-25]
[m[m05.11.2021 - 00:07:48.357 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::trims has 1 assertions: 
 assertEquals(p1, p2); ref {p1, p2} [31-31]
[m[m05.11.2021 - 00:07:48.357 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::equality has 2 assertions: 
 assertTrue(p1.equals(p2)); ref {p1, p2} [37-37],
 assertTrue(p1 == p2); ref {p1, p2} [38-38]
[m[m05.11.2021 - 00:07:48.358 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::divSemantics has 2 assertions: 
 assertTrue(div.isBlock()); ref {div} [44-44],
 assertTrue(div.formatAsBlock()); ref {div} [45-45]
[m[m05.11.2021 - 00:07:48.358 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::pSemantics has 2 assertions: 
 assertTrue(p.isBlock()); ref {p} [51-51],
 assertFalse(p.formatAsBlock()); ref {p} [52-52]
[m[m05.11.2021 - 00:07:48.358 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::imgSemantics has 3 assertions: 
 assertTrue(img.isInline()); ref {img} [57-57],
 assertTrue(img.isSelfClosing()); ref {img} [58-58],
 assertFalse(img.isBlock()); ref {img} [59-59]
[m[m05.11.2021 - 00:07:48.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::defaultSemantics has 3 assertions: 
 assertEquals(foo, foo2); ref {foo, foo2} [66-66],
 assertTrue(foo.isInline()); ref {foo} [67-67],
 assertTrue(foo.formatAsBlock()); ref {foo} [68-68]
[m[m05.11.2021 - 00:07:48.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::valueOfChecksNotNull has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.359 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TagTest::valueOfChecksNotEmpty has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.374 [INFO ] ParsingStrategy.parseTestSuite() - Found 23 test cases
[m[m05.11.2021 - 00:07:48.375 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consume has 12 assertions: 
 assertEquals(0, r.pos()); ref {r} [22-22],
 assertEquals('o', r.current()); ref {r} [23-23],
 assertEquals('o', r.consume()); ref {r} [24-24],
 assertEquals(1, r.pos()); ref {r} [25-25],
 assertEquals('n', r.current()); ref {r} [26-26],
 assertEquals(1, r.pos()); ref {r} [27-27],
 assertEquals('n', r.consume()); ref {r} [28-28],
 assertEquals('e', r.consume()); ref {r} [29-29],
 assertTrue(r.isEmpty()); ref {r} [30-30],
 assertEquals(CharacterReader.EOF, r.consume()); ref {r, CharacterReader, CharacterReader.EOF} [31-31],
 assertTrue(r.isEmpty()); ref {r} [32-32],
 assertEquals(CharacterReader.EOF, r.consume()); ref {r, CharacterReader, CharacterReader.EOF} [33-33]
[m[m05.11.2021 - 00:07:48.376 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::unconsume has 18 assertions: 
 assertEquals('o', r.consume()); ref {r} [38-38],
 assertEquals('n', r.current()); ref {r} [39-39],
 assertEquals('o', r.current()); ref {r} [41-41],
 assertEquals('o', r.consume()); ref {r} [43-43],
 assertEquals('n', r.consume()); ref {r} [44-44],
 assertEquals('e', r.consume()); ref {r} [45-45],
 assertTrue(r.isEmpty()); ref {r} [46-46],
 assertFalse(r.isEmpty()); ref {r} [48-48],
 assertEquals('e', r.current()); ref {r} [49-49],
 assertEquals('e', r.consume()); ref {r} [50-50],
 assertTrue(r.isEmpty()); ref {r} [51-51],
 assertEquals(CharacterReader.EOF, r.consume()); ref {r, CharacterReader, CharacterReader.EOF} [53-53],
 assertTrue(r.isEmpty()); ref {r} [55-55],
 assertFalse(r.isEmpty()); ref {r} [57-57],
 assertEquals('e', r.consume()); ref {r} [59-59],
 assertTrue(r.isEmpty()); ref {r} [60-60],
 assertEquals(CharacterReader.EOF, r.consume()); ref {r, CharacterReader, CharacterReader.EOF} [62-62],
 assertTrue(r.isEmpty()); ref {r} [63-63]
[m[m05.11.2021 - 00:07:48.376 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::mark has 8 assertions: 
 assertEquals(1, r.pos()); ref {r} [70-70],
 assertEquals('n', r.consume()); ref {r} [71-71],
 assertEquals('e', r.consume()); ref {r} [72-72],
 assertTrue(r.isEmpty()); ref {r} [73-73],
 assertEquals(1, r.pos()); ref {r} [75-75],
 assertEquals('n', r.consume()); ref {r} [76-76],
 assertFalse(r.isEmpty()); ref {r} [77-77],
 assertEquals(2, r.pos()); ref {r} [78-78]
[m[m05.11.2021 - 00:07:48.377 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consumeToEnd has 2 assertions: 
 assertEquals(in, toEnd); ref {in, toEnd} [85-85],
 assertTrue(r.isEmpty()); ref {r} [86-86]
[m[m05.11.2021 - 00:07:48.377 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::nextIndexOfChar has 6 assertions: 
 assertEquals(-1, r.nextIndexOf('x')); ref {r} [93-93],
 assertEquals(3, r.nextIndexOf('h')); ref {r} [94-94],
 assertEquals("bla", pull); ref {pull} [96-96],
 assertEquals(2, r.nextIndexOf('l')); ref {r} [98-98],
 assertEquals(" blah", r.consumeToEnd()); ref {r} [99-99],
 assertEquals(-1, r.nextIndexOf('x')); ref {r} [100-100]
[m[m05.11.2021 - 00:07:48.377 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::nextIndexOfString has 6 assertions: 
 assertEquals(-1, r.nextIndexOf("Foo")); ref {r} [107-107],
 assertEquals(4, r.nextIndexOf("Two")); ref {r} [108-108],
 assertEquals("One Two ", r.consumeTo("something")); ref {r} [109-109],
 assertEquals(10, r.nextIndexOf("Two")); ref {r} [110-110],
 assertEquals("something Two Three Four", r.consumeToEnd()); ref {r} [111-111],
 assertEquals(-1, r.nextIndexOf("Two")); ref {r} [112-112]
[m[m05.11.2021 - 00:07:48.378 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::nextIndexOfUnmatched has 1 assertions: 
 assertEquals(-1, r.nextIndexOf("]]>")); ref {r} [117-117]
[m[m05.11.2021 - 00:07:48.378 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consumeToChar has 6 assertions: 
 assertEquals("One ", r.consumeTo('T')); ref {r} [122-122],
 // on Two
assertEquals("", r.consumeTo('T')); ref {r} [123-123],
 assertEquals('T', r.consume()); ref {r} [124-124],
 assertEquals("wo ", r.consumeTo('T')); ref {r} [125-125],
 assertEquals('T', r.consume()); ref {r} [126-126],
 // consume to end
assertEquals("hree", r.consumeTo('T')); ref {r} [127-127]
[m[m05.11.2021 - 00:07:48.378 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consumeToString has 5 assertions: 
 assertEquals("One ", r.consumeTo("Two")); ref {r} [132-132],
 assertEquals('T', r.consume()); ref {r} [133-133],
 assertEquals("wo ", r.consumeTo("Two")); ref {r} [134-134],
 assertEquals('T', r.consume()); ref {r} [135-135],
 assertEquals("wo Four", builder.toString()); ref {builder} [144-144]
[m[m05.11.2021 - 00:07:48.378 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::advance has 2 assertions: 
 assertEquals('O', r.consume()); ref {r} [149-149],
 assertEquals('e', r.consume()); ref {r} [151-151]
[m[m05.11.2021 - 00:07:48.379 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consumeToAny has 7 assertions: 
 assertEquals("One ", r.consumeToAny('&', ';')); ref {r} [156-156],
 assertTrue(r.matches('&')); ref {r} [157-157],
 assertTrue(r.matches("&bar;")); ref {r} [158-158],
 assertEquals('&', r.consume()); ref {r} [159-159],
 assertEquals("bar", r.consumeToAny('&', ';')); ref {r} [160-160],
 assertEquals(';', r.consume()); ref {r} [161-161],
 assertEquals(" qux", r.consumeToAny('&', ';')); ref {r} [162-162]
[m[m05.11.2021 - 00:07:48.379 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consumeLetterSequence has 4 assertions: 
 assertEquals("One", r.consumeLetterSequence()); ref {r} [167-167],
 assertEquals(" &", r.consumeTo("bar;")); ref {r} [168-168],
 assertEquals("bar", r.consumeLetterSequence()); ref {r} [169-169],
 assertEquals("; qux", r.consumeToEnd()); ref {r} [170-170]
[m[m05.11.2021 - 00:07:48.379 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consumeLetterThenDigitSequence has 4 assertions: 
 assertEquals("One12", r.consumeLetterThenDigitSequence()); ref {r} [175-175],
 assertEquals(' ', r.consume()); ref {r} [176-176],
 assertEquals("Two", r.consumeLetterThenDigitSequence()); ref {r} [177-177],
 assertEquals(" &bar; qux", r.consumeToEnd()); ref {r} [178-178]
[m[m05.11.2021 - 00:07:48.380 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::matches has 11 assertions: 
 assertTrue(r.matches('O')); ref {r} [183-183],
 assertTrue(r.matches("One Two Three")); ref {r} [184-184],
 assertTrue(r.matches("One")); ref {r} [185-185],
 assertFalse(r.matches("one")); ref {r} [186-186],
 assertEquals('O', r.consume()); ref {r} [187-187],
 assertFalse(r.matches("One")); ref {r} [188-188],
 assertTrue(r.matches("ne Two Three")); ref {r} [189-189],
 assertFalse(r.matches("ne Two Three Four")); ref {r} [190-190],
 assertEquals("ne Two Three", r.consumeToEnd()); ref {r} [191-191],
 assertFalse(r.matches("ne")); ref {r} [192-192],
 assertTrue(r.isEmpty()); ref {r} [193-193]
[m[m05.11.2021 - 00:07:48.381 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::matchesIgnoreCase has 14 assertions: 
 assertTrue(r.matchesIgnoreCase("O")); ref {r} [199-199],
 assertTrue(r.matchesIgnoreCase("o")); ref {r} [200-200],
 assertTrue(r.matches('O')); ref {r} [201-201],
 assertFalse(r.matches('o')); ref {r} [202-202],
 assertTrue(r.matchesIgnoreCase("One Two Three")); ref {r} [203-203],
 assertTrue(r.matchesIgnoreCase("ONE two THREE")); ref {r} [204-204],
 assertTrue(r.matchesIgnoreCase("One")); ref {r} [205-205],
 assertTrue(r.matchesIgnoreCase("one")); ref {r} [206-206],
 assertEquals('O', r.consume()); ref {r} [207-207],
 assertFalse(r.matchesIgnoreCase("One")); ref {r} [208-208],
 assertTrue(r.matchesIgnoreCase("NE Two Three")); ref {r} [209-209],
 assertFalse(r.matchesIgnoreCase("ne Two Three Four")); ref {r} [210-210],
 assertEquals("ne Two Three", r.consumeToEnd()); ref {r} [211-211],
 assertFalse(r.matchesIgnoreCase("ne")); ref {r} [212-212]
[m[m05.11.2021 - 00:07:48.381 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::containsIgnoreCase has 3 assertions: 
 assertTrue(r.containsIgnoreCase("two")); ref {r} [217-217],
 assertTrue(r.containsIgnoreCase("three")); ref {r} [218-218],
 // weird one: does not find one, because it scans for consistent case only
assertFalse(r.containsIgnoreCase("one")); ref {r} [220-220]
[m[m05.11.2021 - 00:07:48.381 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::matchesAny has 5 assertions: 
 assertFalse(r.matchesAny(scan)); ref {r, scan} [226-226],
 assertEquals("One", r.consumeToAny(scan)); ref {r, scan} [227-227],
 assertTrue(r.matchesAny(scan)); ref {r, scan} [228-228],
 assertEquals('\n', r.consume()); ref {r} [229-229],
 assertFalse(r.matchesAny(scan)); ref {r, scan} [230-230]
[m[m05.11.2021 - 00:07:48.382 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::cachesStrings has 9 assertions: 
 assertEquals("Check", one); ref {one} [245-245],
 assertEquals("Check", two); ref {two} [246-246],
 assertEquals("Check", three); ref {three} [247-247],
 assertEquals("CHOKE", four); ref {four} [248-248],
 assertTrue(one == two); ref {one, two} [249-249],
 assertTrue(two == three); ref {two, three} [250-250],
 assertTrue(three != four); ref {four, three} [251-251],
 assertTrue(four != five); ref {four, five} [252-252],
 assertEquals(five, "A string that is longer than 16 chars"); ref {five} [253-253]
[m[m05.11.2021 - 00:07:48.382 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::rangeEquals has 9 assertions: 
 assertTrue(r.rangeEquals(0, 5, "Check")); ref {r} [259-259],
 assertFalse(r.rangeEquals(0, 5, "CHOKE")); ref {r} [260-260],
 assertFalse(r.rangeEquals(0, 5, "Chec")); ref {r} [261-261],
 assertTrue(r.rangeEquals(6, 5, "Check")); ref {r} [263-263],
 assertFalse(r.rangeEquals(6, 5, "Chuck")); ref {r} [264-264],
 assertTrue(r.rangeEquals(12, 5, "Check")); ref {r} [266-266],
 assertFalse(r.rangeEquals(12, 5, "Cheeky")); ref {r} [267-267],
 assertTrue(r.rangeEquals(18, 5, "CHOKE")); ref {r} [269-269],
 assertFalse(r.rangeEquals(18, 5, "CHIKE")); ref {r} [270-270]
[m[m05.11.2021 - 00:07:48.382 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::empty has 3 assertions: 
 assertTrue(r.matchConsume("One")); ref {r} [276-276],
 assertTrue(r.isEmpty()); ref {r} [277-277],
 assertEquals("Two", two); ref {two} [281-281]
[m[m05.11.2021 - 00:07:48.383 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::consumeToNonexistentEndWhenAtAnd has 4 assertions: 
 assertTrue(r.matchConsume("<!")); ref {r} [287-287],
 assertTrue(r.isEmpty()); ref {r} [288-288],
 assertEquals("", after); ref {after} [291-291],
 assertTrue(r.isEmpty()); ref {r} [293-293]
[m[m05.11.2021 - 00:07:48.383 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::notEmptyAtBufferSplitPoint has 16 assertions: 
 assertEquals("How", r.consumeTo(' ')); ref {r} [299-299],
 assertFalse("Should not be empty", r.isEmpty()); ref {r} [300-300],
 assertEquals(' ', r.consume()); ref {r} [302-302],
 assertFalse(r.isEmpty()); ref {r} [303-303],
 assertEquals(4, r.pos()); ref {r} [304-304],
 assertEquals('a', r.consume()); ref {r} [305-305],
 assertEquals(5, r.pos()); ref {r} [306-306],
 assertEquals('b', r.consume()); ref {r} [307-307],
 assertEquals('o', r.consume()); ref {r} [308-308],
 assertEquals('u', r.consume()); ref {r} [309-309],
 assertEquals('t', r.consume()); ref {r} [310-310],
 assertEquals(' ', r.consume()); ref {r} [311-311],
 assertEquals('n', r.consume()); ref {r} [312-312],
 assertEquals('o', r.consume()); ref {r} [313-313],
 assertEquals('w', r.consume()); ref {r} [314-314],
 assertTrue(r.isEmpty()); ref {r} [315-315]
[m[m05.11.2021 - 00:07:48.383 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.CharacterReaderTest::bufferUp has 3 assertions: 
 assertEquals(note, pull); ref {note, pull} [333-333],
 assertEquals('!', r.current()); ref {r} [334-334],
 assertTrue(r.isEmpty()); ref {r} [338-338]
[m[m05.11.2021 - 00:07:48.385 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m05.11.2021 - 00:07:48.386 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTypeTest::constructorValidationOkWithBlankName has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.386 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTypeTest::constructorValidationThrowsExceptionOnNulls has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.386 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTypeTest::constructorValidationOkWithBlankPublicAndSystemIds has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.386 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTypeTest::outerHtmlGeneration has 7 assertions: 
 assertEquals("<!doctype html>", html5.outerHtml()); ref {html5} [32-32],
 assertEquals("<!DOCTYPE html PUBLIC \"-//IETF//DTD HTML//\">", publicDocType.outerHtml()); ref {publicDocType} [35-35],
 assertEquals("<!DOCTYPE html SYSTEM \"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\">", systemDocType.outerHtml()); ref {systemDocType} [38-38],
 assertEquals("<!DOCTYPE notHtml PUBLIC \"--public\" \"--system\">", combo.outerHtml()); ref {combo} [41-41],
 assertEquals("notHtml", combo.name()); ref {combo} [42-42],
 assertEquals("--public", combo.publicId()); ref {combo} [43-43],
 assertEquals("--system", combo.systemId()); ref {combo} [44-44]
[m[m05.11.2021 - 00:07:48.387 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTypeTest::testRoundTrip has 8 assertions: 
 assertEquals("<!doctype html>", htmlOutput(base)); ref {base} [49-49],
 assertEquals(base, xmlOutput(base)); ref {base} [50-50],
 assertEquals(publicDoc, htmlOutput(publicDoc)); ref {publicDoc} [53-53],
 assertEquals(publicDoc, xmlOutput(publicDoc)); ref {publicDoc} [54-54],
 assertEquals(systemDoc, htmlOutput(systemDoc)); ref {systemDoc} [57-57],
 assertEquals(systemDoc, xmlOutput(systemDoc)); ref {systemDoc} [58-58],
 assertEquals(legacyDoc, htmlOutput(legacyDoc)); ref {legacyDoc} [61-61],
 assertEquals(legacyDoc, xmlOutput(legacyDoc)); ref {legacyDoc} [62-62]
[m[m05.11.2021 - 00:07:48.389 [INFO ] ParsingStrategy.parseTestSuite() - Found 6 test cases
[m[m05.11.2021 - 00:07:48.389 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributeTest::html has 2 assertions: 
 assertEquals("key=\"value &amp;\"", attr.html()); ref {attr} [11-11],
 assertEquals(attr.html(), attr.toString()); ref {attr} [12-12]
[m[m05.11.2021 - 00:07:48.389 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributeTest::testWithSupplementaryCharacterInAttributeKeyAndValue has 2 assertions: 
 assertEquals(s + "=\"A" + s + "B\"", attr.html()); ref {s, attr} [18-18],
 assertEquals(attr.html(), attr.toString()); ref {attr} [19-19]
[m[m05.11.2021 - 00:07:48.389 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributeTest::validatesKeysNotEmpty has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.390 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributeTest::validatesKeysNotEmptyViaSet has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.390 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributeTest::booleanAttributesAreEmptyStringValues has 3 assertions: 
 assertEquals("", attributes.get("hidden")); ref {attributes} [34-34],
 assertEquals("hidden", first.getKey()); ref {first} [37-37],
 assertEquals("", first.getValue()); ref {first} [38-38]
[m[m05.11.2021 - 00:07:48.390 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributeTest::settersOnOrphanAttribute has 4 assertions: 
 assertEquals("two", oldVal); ref {oldVal} [45-45],
 assertEquals("three", attr.getKey()); ref {attr} [46-46],
 assertEquals("four", attr.getValue()); ref {attr} [47-47],
 assertEquals(null, attr.parent); ref {attr.parent, attr} [48-48]
[m[m05.11.2021 - 00:07:48.395 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m05.11.2021 - 00:07:48.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testBlank has 5 assertions: 
 assertTrue(one.isBlank()); ref {one} [23-23],
 assertTrue(two.isBlank()); ref {two} [24-24],
 assertTrue(three.isBlank()); ref {three} [25-25],
 assertFalse(four.isBlank()); ref {four} [26-26],
 assertFalse(five.isBlank()); ref {five} [27-27]
[m[m05.11.2021 - 00:07:48.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testTextBean has 6 assertions: 
 assertEquals("two &", span.text()); ref {span} [35-35],
 assertEquals("two &", spanText.text()); ref {spanText} [37-37],
 assertEquals(" three &", tn.text()); ref {tn} [40-40],
 assertEquals("One <span>two &amp;</span> POW!", TextUtil.stripNewlines(p.html())); ref {p, TextUtil} [43-43],
 assertEquals("kablam &", tn.text()); ref {tn} [46-46],
 assertEquals("One <span>two &amp;</span>kablam &amp;", TextUtil.stripNewlines(p.html())); ref {p, TextUtil} [47-47]
[m[m05.11.2021 - 00:07:48.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testSplitText has 4 assertions: 
 assertEquals("Hello ", tn.getWholeText()); ref {tn} [55-55],
 assertEquals("there", tail.getWholeText()); ref {tail} [56-56],
 assertEquals("Hello there!", div.text()); ref {div} [58-58],
 assertTrue(tn.parent() == tail.parent()); ref {tail, tn} [59-59]
[m[m05.11.2021 - 00:07:48.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testSplitAnEmbolden has 1 assertions: 
 // not great that we get \n<b>there there... must correct
assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html())); ref {div, TextUtil} [69-69]
[m[m05.11.2021 - 00:07:48.396 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testWithSupplementaryCharacter has 1 assertions: 
 assertEquals(new String(Character.toChars(135361)), t.outerHtml().trim()); ref {Character, t} [75-75]
[m[m05.11.2021 - 00:07:48.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testLeadNodesHaveNoChildren has 1 assertions: 
 assertEquals(0, nodes.size()); ref {nodes} [83-83]
[m[m05.11.2021 - 00:07:48.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testSpaceNormalise has 11 assertions: 
 assertEquals(whole, tn.getWholeText()); ref {whole, tn} [91-91],
 assertEquals(norm, tn.text()); ref {tn, norm} [92-92],
 assertEquals(norm, tn.outerHtml()); ref {tn, norm} [93-93],
 assertEquals(norm, tn.toString()); ref {tn, norm} [94-94],
 // tn.setParentNode(el); // set any parent
assertEquals(whole, tn.getWholeText()); ref {whole, tn} [99-99],
 assertEquals(norm, tn.text()); ref {tn, norm} [100-100],
 assertEquals(norm, tn.outerHtml()); ref {tn, norm} [101-101],
 assertEquals(norm, tn.toString()); ref {tn, norm} [102-102],
 assertEquals("<p>" + norm + "</p>", el.outerHtml()); ref {el, norm} [104-104],
 assertEquals(norm, el.html()); ref {el, norm} [105-105],
 assertEquals(whole, el.wholeText()); ref {el, whole} [106-106]
[m[m05.11.2021 - 00:07:48.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testClone has 6 assertions: 
 assertNotSame(x, y); ref {x, y} [115-115],
 assertEquals(x.outerHtml(), y.outerHtml()); ref {x, y} [116-116],
 assertNotEquals(x.outerHtml(), y.outerHtml()); ref {x, y} [119-119],
 assertEquals("zzz", x.text()); ref {x} [120-120],
 assertEquals("zzz", x.text()); ref {x} [124-124],
 assertEquals("xxx", y.text()); ref {y} [125-125]
[m[m05.11.2021 - 00:07:48.397 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.TextNodeTest::testCloneAfterAttributesHit has 2 assertions: 
 assertEquals("zzz", x.text()); ref {x} [135-135],
 assertEquals("xxx", y.text()); ref {y} [136-136]
[m[m05.11.2021 - 00:07:48.398 [INFO ] ParsingStrategy.parseTestSuite() - Found 2 test cases
[m[m05.11.2021 - 00:07:48.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.ParserTest::unescapeEntities has 1 assertions: 
 assertEquals("One & Two", s); ref {s} [12-12]
[m[m05.11.2021 - 00:07:48.398 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.ParserTest::unescapeEntitiesHandlesLargeInput has 1 assertions: 
 assertEquals(body, Parser.unescapeEntities(body, false)); ref {body, Parser} [23-23]
[m[m05.11.2021 - 00:07:48.399 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.402 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m05.11.2021 - 00:07:48.402 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::parsesRoughAttributeString has 8 assertions: 
 assertEquals(7, attr.size()); ref {attr} [28-28],
 assertEquals("123", attr.get("id")); ref {attr} [29-29],
 assertEquals("baz = 'bar'", attr.get("class")); ref {attr} [30-30],
 assertEquals("border: 2px", attr.get("style")); ref {attr} [31-31],
 assertEquals("", attr.get("qux")); ref {attr} [32-32],
 assertEquals("", attr.get("zim")); ref {attr} [33-33],
 assertEquals("12", attr.get("foo")); ref {attr} [34-34],
 assertEquals("18", attr.get("mux")); ref {attr} [35-35]
[m[m05.11.2021 - 00:07:48.403 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::handlesNewLinesAndReturns has 3 assertions: 
 assertEquals(2, el.attributes().size()); ref {el} [41-41],
 // currently preserves newlines in quoted attributes. todo confirm if should.
assertEquals("bar\r\nqux", el.attr("foo")); ref {el} [42-42],
 assertEquals("two", el.attr("bar")); ref {el} [43-43]
[m[m05.11.2021 - 00:07:48.403 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::parsesEmptyString has 1 assertions: 
 assertEquals(0, attr.size()); ref {attr} [50-50]
[m[m05.11.2021 - 00:07:48.403 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::canStartWithEq has 3 assertions: 
 assertEquals(1, attr.size()); ref {attr} [57-57],
 assertTrue(attr.hasKey("=empty")); ref {attr} [58-58],
 assertEquals("", attr.get("=empty")); ref {attr} [59-59]
[m[m05.11.2021 - 00:07:48.403 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::strictAttributeUnescapes has 2 assertions: 
 assertEquals("?foo=bar&mid&lt=true", els.first().attr("href")); ref {els} [65-65],
 assertEquals("?foo=bar<qux&lg=1", els.last().attr("href")); ref {els} [66-66]
[m[m05.11.2021 - 00:07:48.403 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::moreAttributeUnescapes has 1 assertions: 
 assertEquals("&wr_id=123&mid-size=true&ok=&wr", els.first().attr("href")); ref {els} [72-72]
[m[m05.11.2021 - 00:07:48.404 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::parsesBooleanAttributes has 8 assertions: 
 assertEquals("123", el.attr("normal")); ref {el} [79-79],
 assertEquals("", el.attr("boolean")); ref {el} [80-80],
 assertEquals("", el.attr("empty")); ref {el} [81-81],
 assertEquals("There should be 3 attribute present", 3, attributes.size()); ref {attributes} [84-84],
 // Assuming the list order always follows the parsed html
assertFalse("'normal' attribute should not be boolean", attributes.get(0) instanceof BooleanAttribute); ref {attributes} [87-87],
 assertTrue("'boolean' attribute should be boolean", attributes.get(1) instanceof BooleanAttribute); ref {attributes} [88-88],
 assertFalse("'empty' attribute should not be boolean", attributes.get(2) instanceof BooleanAttribute); ref {attributes} [89-89],
 assertEquals(html, el.outerHtml()); ref {el, html} [91-91]
[m[m05.11.2021 - 00:07:48.404 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.AttributeParseTest::dropsSlashFromAttributeName has 3 assertions: 
 assertTrue("SelfClosingStartTag ignores last character", !doc.select("img[onerror]").isEmpty()); ref {doc} [97-97],
 assertEquals("<img onerror=\"doMyJob\">", doc.body().html()); ref {doc} [98-98],
 assertEquals("<img onerror=\"doMyJob\" />", doc.html()); ref {doc} [101-101]
[m[m05.11.2021 - 00:07:48.405 [INFO ] ParsingStrategy.parseTestSuite() - Found 3 test cases
[m[m05.11.2021 - 00:07:48.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.ParserSettingsTest::caseSupport has 8 assertions: 
 assertEquals("IMG", bothOn.normalizeTag("IMG")); ref {bothOn} [20-20],
 assertEquals("ID", bothOn.normalizeAttribute("ID")); ref {bothOn} [21-21],
 assertEquals("img", bothOff.normalizeTag("IMG")); ref {bothOff} [23-23],
 assertEquals("id", bothOff.normalizeAttribute("ID")); ref {bothOff} [24-24],
 assertEquals("IMG", tagOn.normalizeTag("IMG")); ref {tagOn} [26-26],
 assertEquals("id", tagOn.normalizeAttribute("ID")); ref {tagOn} [27-27],
 assertEquals("img", attrOn.normalizeTag("IMG")); ref {attrOn} [29-29],
 assertEquals("ID", attrOn.normalizeAttribute("ID")); ref {attrOn} [30-30]
[m[m05.11.2021 - 00:07:48.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.ParserSettingsTest::attributeCaseNormalization has 1 assertions: 
 assertEquals("hidden", normalizedAttribute); ref {normalizedAttribute} [38-38]
[m[m05.11.2021 - 00:07:48.406 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.ParserSettingsTest::attributesCaseNormalization has 1 assertions: 
 assertEquals("item", normalizedAttributes.asList().get(0).getKey()); ref {normalizedAttributes} [48-48]
[m[m05.11.2021 - 00:07:48.411 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m05.11.2021 - 00:07:48.411 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testSmhBizArticle has 3 assertions: 
 assertEquals("The board’s next fear: the female quota", // note that the apos in the source is a literal ’ (8217), not escaped or '
doc.title()); ref {doc} [26-27],
 assertEquals("en", doc.select("html").attr("xml:lang")); ref {doc} [28-28],
 assertEquals(17, articleBody.size()); ref {articleBody} [31-31]
[m[m05.11.2021 - 00:07:48.411 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testNewsHomepage has 6 assertions: 
 assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); ref {doc} [40-40],
 assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); ref {doc} [41-41],
 assertEquals("/entertainment/horoscopes", a.attr("href")); ref {a} [44-44],
 assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); ref {a} [45-45],
 assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); ref {hs} [48-50],
 assertEquals(hs.attr("href"), hs.attr("abs:href")); ref {hs} [51-51]
[m[m05.11.2021 - 00:07:48.412 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testGoogleSearchIpod has 4 assertions: 
 assertEquals("ipod - Google Search", doc.title()); ref {doc} [58-58],
 assertEquals(12, results.size()); ref {results} [60-60],
 assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); ref {results} [61-63],
 assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); ref {results} [64-65]
[m[m05.11.2021 - 00:07:48.412 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testYahooJp has 3 assertions: 
 assertEquals("Yahoo! JAPAN", doc.title()); ref {doc} [72-72],
 assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2", // session put into <base>
a.attr("abs:href")); ref {a} [74-75],
 assertEquals("全国、人気の駅ランキング", a.text()); ref {a} [76-76]
[m[m05.11.2021 - 00:07:48.412 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testBaidu has 6 assertions: 
 assertEquals("百度一下", submit.attr("value")); ref {submit} [86-86],
 assertEquals("su", submit.id()); ref {submit} [90-90],
 assertEquals("http://news.baidu.com", newsLink.absUrl("href")); ref {newsLink} [92-92],
 // check auto-detect from meta
assertEquals("GB2312", doc.outputSettings().charset().displayName()); ref {doc} [95-95],
 assertEquals("<title>百度一下，你就知道      </title>", doc.select("title").outerHtml()); ref {doc} [96-96],
 assertEquals("<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>", doc.select("title").outerHtml()); ref {doc} [99-100]
[m[m05.11.2021 - 00:07:48.412 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testBaiduVariant has 2 assertions: 
 // check auto-detect from meta
assertEquals("GB2312", doc.outputSettings().charset().displayName()); ref {doc} [110-110],
 assertEquals("<title>百度一下，你就知道</title>", doc.select("title").outerHtml()); ref {doc} [111-111]
[m[m05.11.2021 - 00:07:48.412 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testHtml5Charset has 6 assertions: 
 assertEquals("新", doc.text()); ref {doc} [119-119],
 assertEquals("GB2312", doc.outputSettings().charset().displayName()); ref {doc} [120-120],
 assertEquals("UTF-8", doc.outputSettings().charset().displayName()); ref {doc} [125-125],
 assertFalse("新".equals(doc.text())); ref {doc} [126-126],
 assertEquals("UTF-8", doc.outputSettings().charset().displayName()); ref {doc} [131-131],
 assertEquals("新", doc.text()); ref {doc} [132-132]
[m[m05.11.2021 - 00:07:48.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testBrokenHtml5CharsetWithASingleDoubleQuote has 1 assertions: 
 assertEquals("UTF-8", doc.outputSettings().charset().displayName()); ref {doc} [142-142]
[m[m05.11.2021 - 00:07:48.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testNytArticle has 1 assertions: 
 assertEquals("As BP Lays Out Future, It Will Not Include Hayward", headline.text()); ref {headline} [152-152]
[m[m05.11.2021 - 00:07:48.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testYahooArticle has 1 assertions: 
 assertEquals("In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.", p.text()); ref {p} [160-160]
[m[m05.11.2021 - 00:07:48.413 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ParseTest::testLowercaseUtf8Charset has 2 assertions: 
 assertEquals(2, form.children().size()); ref {form} [169-169],
 assertEquals("UTF-8", doc.outputSettings().charset().name()); ref {doc} [170-170]
[m[m05.11.2021 - 00:07:48.452 [INFO ] ParsingStrategy.parseTestSuite() - Found 107 test cases
[m[m05.11.2021 - 00:07:48.453 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::getElementsByTagName has 9 assertions: 
 assertEquals(2, divs.size()); ref {divs} [33-33],
 assertEquals("div1", divs.get(0).id()); ref {divs} [34-34],
 assertEquals("div2", divs.get(1).id()); ref {divs} [35-35],
 assertEquals(2, ps.size()); ref {ps} [38-38],
 assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); ref {ps} [39-39],
 assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); ref {ps} [40-40],
 assertEquals(ps, ps2); ref {ps, ps2} [42-42],
 assertEquals("foo.png", imgs.get(0).attr("src")); ref {imgs} [45-45],
 assertEquals(0, empty.size()); ref {empty} [48-48]
[m[m05.11.2021 - 00:07:48.453 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::getNamespacedElementsByTag has 3 assertions: 
 assertEquals(1, els.size()); ref {els} [54-54],
 assertEquals("1", els.first().id()); ref {els} [55-55],
 assertEquals("abc:def", els.first().tagName()); ref {els} [56-56]
[m[m05.11.2021 - 00:07:48.453 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetElementById has 4 assertions: 
 assertEquals("div1", div.id()); ref {div} [62-62],
 assertNull(doc.getElementById("none")); ref {doc} [63-63],
 // not the span
assertEquals("div", div2.tagName()); ref {div2} [67-67],
 assertEquals("span", span.tagName()); ref {span} [69-69]
[m[m05.11.2021 - 00:07:48.453 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetText has 2 assertions: 
 assertEquals("Hello Another element", doc.text()); ref {doc} [74-74],
 assertEquals("Another element", doc.getElementsByTag("p").get(1).text()); ref {doc} [75-75]
[m[m05.11.2021 - 00:07:48.454 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetChildText has 2 assertions: 
 assertEquals("Hello there now", p.text()); ref {p} [81-81],
 assertEquals("Hello now", p.ownText()); ref {p} [82-82]
[m[m05.11.2021 - 00:07:48.454 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNormalisesText has 1 assertions: 
 assertEquals("Hello There. Here is some text.", text); ref {text} [89-89]
[m[m05.11.2021 - 00:07:48.454 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testKeepsPreText has 1 assertions: 
 assertEquals("Hello there.   What's \n\n  that?", doc.text()); ref {doc} [95-95]
[m[m05.11.2021 - 00:07:48.454 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testKeepsPreTextInCode has 2 assertions: 
 assertEquals("code\n\ncode", doc.text()); ref {doc} [101-101],
 assertEquals("<pre><code>code\n\ncode</code></pre>", doc.body().html()); ref {doc} [102-102]
[m[m05.11.2021 - 00:07:48.454 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testKeepsPreTextAtDepth has 2 assertions: 
 assertEquals("code\n\ncode", doc.text()); ref {doc} [108-108],
 assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", doc.body().html()); ref {doc} [109-109]
[m[m05.11.2021 - 00:07:48.454 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testBrHasSpace has 3 assertions: 
 assertEquals("Hello there", doc.text()); ref {doc} [114-114],
 assertEquals("Hello there", doc.select("p").first().ownText()); ref {doc} [115-115],
 assertEquals("Hello there", doc.text()); ref {doc} [118-118]
[m[m05.11.2021 - 00:07:48.455 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testWholeText has 3 assertions: 
 assertEquals(" Hello\nthere    ", doc.wholeText()); ref {doc} [123-123],
 assertEquals("Hello  \n  there", doc.wholeText()); ref {doc} [126-126],
 assertEquals("Hello  \n  there", doc.wholeText()); ref {doc} [129-129]
[m[m05.11.2021 - 00:07:48.455 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetSiblings has 5 assertions: 
 assertEquals("there", p.text()); ref {p} [135-135],
 assertEquals("Hello", p.previousElementSibling().text()); ref {p} [136-136],
 assertEquals("this", p.nextElementSibling().text()); ref {p} [137-137],
 assertEquals("Hello", p.firstElementSibling().text()); ref {p} [138-138],
 assertEquals("element", p.lastElementSibling().text()); ref {p} [139-139]
[m[m05.11.2021 - 00:07:48.455 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetSiblingsWithDuplicateContent has 7 assertions: 
 assertEquals("there", p.text()); ref {p} [145-145],
 assertEquals("Hello", p.previousElementSibling().text()); ref {p} [146-146],
 assertEquals("this", p.nextElementSibling().text()); ref {p} [147-147],
 assertEquals("this", p.nextElementSibling().nextElementSibling().text()); ref {p} [148-148],
 assertEquals("is", p.nextElementSibling().nextElementSibling().nextElementSibling().text()); ref {p} [149-149],
 assertEquals("Hello", p.firstElementSibling().text()); ref {p} [150-150],
 assertEquals("element", p.lastElementSibling().text()); ref {p} [151-151]
[m[m05.11.2021 - 00:07:48.455 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetParents has 5 assertions: 
 assertEquals(4, parents.size()); ref {parents} [159-159],
 assertEquals("p", parents.get(0).tagName()); ref {parents} [160-160],
 assertEquals("div", parents.get(1).tagName()); ref {parents} [161-161],
 assertEquals("body", parents.get(2).tagName()); ref {parents} [162-162],
 assertEquals("html", parents.get(3).tagName()); ref {parents} [163-163]
[m[m05.11.2021 - 00:07:48.455 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testElementSiblingIndex has 3 assertions: 
 assertTrue(0 == ps.get(0).elementSiblingIndex()); ref {ps} [169-169],
 assertTrue(1 == ps.get(1).elementSiblingIndex()); ref {ps} [170-170],
 assertTrue(2 == ps.get(2).elementSiblingIndex()); ref {ps} [171-171]
[m[m05.11.2021 - 00:07:48.455 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testElementSiblingIndexSameContent has 3 assertions: 
 assertTrue(0 == ps.get(0).elementSiblingIndex()); ref {ps} [177-177],
 assertTrue(1 == ps.get(1).elementSiblingIndex()); ref {ps} [178-178],
 assertTrue(2 == ps.get(2).elementSiblingIndex()); ref {ps} [179-179]
[m[m05.11.2021 - 00:07:48.456 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetElementsWithClass has 7 assertions: 
 assertEquals(2, els.size()); ref {els} [186-186],
 assertEquals("div", els.get(0).tagName()); ref {els} [187-187],
 assertEquals("span", els.get(1).tagName()); ref {els} [188-188],
 assertEquals(2, els2.size()); ref {els2} [191-191],
 assertEquals("div", els2.get(0).tagName()); ref {els2} [192-192],
 assertEquals("b", els2.get(1).tagName()); ref {els2} [193-193],
 assertEquals(0, none.size()); ref {none} [196-196]
[m[m05.11.2021 - 00:07:48.456 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetElementsWithAttribute has 4 assertions: 
 assertEquals(2, els.size()); ref {els} [202-202],
 assertEquals("div", els.get(0).tagName()); ref {els} [203-203],
 assertEquals("b", els.get(1).tagName()); ref {els} [204-204],
 assertEquals(0, none.size()); ref {none} [207-207]
[m[m05.11.2021 - 00:07:48.456 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetElementsWithAttributeDash has 2 assertions: 
 assertEquals(1, meta.size()); ref {meta} [213-213],
 assertEquals("1", meta.first().id()); ref {meta} [214-214]
[m[m05.11.2021 - 00:07:48.456 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetElementsWithAttributeValue has 3 assertions: 
 assertEquals(1, els.size()); ref {els} [220-220],
 assertEquals("div", els.get(0).tagName()); ref {els} [221-221],
 assertEquals(0, none.size()); ref {none} [224-224]
[m[m05.11.2021 - 00:07:48.456 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testClassDomMethods has 9 assertions: 
 assertEquals("mellow yellow", span.className()); ref {span} [231-231],
 assertTrue(span.hasClass("mellow")); ref {span} [232-232],
 assertTrue(span.hasClass("yellow")); ref {span} [233-233],
 assertEquals(2, classes.size()); ref {classes} [235-235],
 assertTrue(classes.contains("mellow")); ref {classes} [236-236],
 assertTrue(classes.contains("yellow")); ref {classes} [237-237],
 assertEquals("", doc.className()); ref {doc} [239-239],
 assertEquals(0, classes.size()); ref {classes} [241-241],
 assertFalse(doc.hasClass("mellow")); ref {doc} [242-242]
[m[m05.11.2021 - 00:07:48.456 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testHasClassDomMethods has 12 assertions: 
 assertTrue(hasClass); ref {hasClass} [252-252],
 assertTrue(hasClass); ref {hasClass} [256-256],
 assertTrue(hasClass); ref {hasClass} [260-260],
 assertTrue(hasClass); ref {hasClass} [264-264],
 assertTrue(hasClass); ref {hasClass} [268-268],
 assertFalse(hasClass); ref {hasClass} [272-272],
 assertFalse(hasClass); ref {hasClass} [276-276],
 assertFalse(hasClass); ref {hasClass} [280-280],
 assertTrue(hasClass); ref {hasClass} [284-284],
 assertTrue(hasClass); ref {hasClass} [288-288],
 assertTrue(hasClass); ref {hasClass} [292-292],
 assertTrue(hasClass); ref {hasClass} [296-296]
[m[m05.11.2021 - 00:07:48.457 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testClassUpdates has 3 assertions: 
 assertEquals("mellow yellow green", div.className()); ref {div} [305-305],
 assertEquals("mellow green", div.className()); ref {div} [308-308],
 assertEquals("mellow red", div.className()); ref {div} [310-310]
[m[m05.11.2021 - 00:07:48.457 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testOuterHtml has 1 assertions: 
 assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\"><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); ref {TextUtil, doc} [315-316]
[m[m05.11.2021 - 00:07:48.457 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testInnerHtml has 1 assertions: 
 assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html()); ref {doc} [321-321]
[m[m05.11.2021 - 00:07:48.457 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testFormatHtml has 1 assertions: 
 assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>Hello <span>jsoup <span>users</span></span></p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html()); ref {doc} [326-326]
[m[m05.11.2021 - 00:07:48.457 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testFormatOutline has 1 assertions: 
 assertEquals("<html>\n <head>\n  <title>Format test</title>\n </head>\n <body>\n  <div>\n   <p>\n    Hello \n    <span>\n     jsoup \n     <span>users</span>\n    </span>\n   </p>\n   <p>Good.</p>\n  </div>\n </body>\n</html>", doc.html()); ref {doc} [332-332]
[m[m05.11.2021 - 00:07:48.457 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testSetIndent has 1 assertions: 
 assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", doc.html()); ref {doc} [338-338]
[m[m05.11.2021 - 00:07:48.458 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNotPretty has 2 assertions: 
 assertEquals("<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>", doc.html()); ref {doc} [344-344],
 assertEquals("   \n<p>Hello\n there\n</p>", div.html()); ref {div} [347-347]
[m[m05.11.2021 - 00:07:48.458 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNotPrettyWithEnDashBody has 1 assertions: 
 assertEquals("<div><span>1:15</span>–<span>2:15</span>&nbsp;p.m.</div>", document.body().html()); ref {document} [355-355]
[m[m05.11.2021 - 00:07:48.458 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testPrettyWithEnDashBody has 1 assertions: 
 assertEquals("<div>\n <span>1:15</span>–<span>2:15</span>&nbsp;p.m.\n</div>", document.body().html()); ref {document} [362-362]
[m[m05.11.2021 - 00:07:48.458 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testPrettyAndOutlineWithEnDashBody has 1 assertions: 
 assertEquals("<div>\n <span>1:15</span>\n –\n <span>2:15</span>\n &nbsp;p.m.\n</div>", document.body().html()); ref {document} [370-370]
[m[m05.11.2021 - 00:07:48.458 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testBasicFormats has 1 assertions: 
 assertEquals("<span>0</span>.\n" + "<div>\n" + " <span>1</span>-<span>2</span>\n" + " <p><span>3</span>-<span>4</span></p>\n" + " <div>\n" + "  5\n" + " </div>\n" + "</div>", doc.body().html()); ref {doc} [376-384]
[m[m05.11.2021 - 00:07:48.458 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testEmptyElementFormatHtml has 1 assertions: 
 assertEquals("<section>\n <div></div>\n</section>", doc.select("section").first().outerHtml()); ref {doc} [390-390]
[m[m05.11.2021 - 00:07:48.458 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNoIndentOnScriptAndStyle has 1 assertions: 
 assertEquals("<script>one\ntwo</script> \n<style>three\nfour</style>", doc.head().html()); ref {doc} [396-396]
[m[m05.11.2021 - 00:07:48.459 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testContainerOutput has 3 assertions: 
 assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml()); ref {doc} [401-401],
 assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml()); ref {doc} [402-402],
 assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div> \n<div>\n Another\n</div>", doc.select("body").first().html()); ref {doc} [403-403]
[m[m05.11.2021 - 00:07:48.459 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testSetText has 4 assertions: 
 // need to sort out node whitespace
assertEquals("Hello there now", doc.text()); ref {doc} [409-409],
 assertEquals("there now", doc.select("p").get(0).text()); ref {doc} [410-410],
 assertEquals("Gone", div.text()); ref {div} [413-413],
 assertEquals(0, doc.select("p").size()); ref {doc} [414-414]
[m[m05.11.2021 - 00:07:48.459 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testAddNewElement has 2 assertions: 
 // manually specifying tag and attributes should maintain case based on parser settings
assertEquals("<html><head></head><body><div id=\"1\"><p>Hello</p><p>there</p><p class=\"second\">now</p></div></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [423-424],
 assertEquals(i, ps.get(i).siblingIndex); ref {ps, ps.get(i).siblingIndex, i} [429-429]
[m[m05.11.2021 - 00:07:48.459 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testAddBooleanAttribute has 6 assertions: 
 assertTrue(div.hasAttr("true")); ref {div} [441-441],
 assertEquals("", div.attr("true")); ref {div} [442-442],
 assertEquals("There should be one attribute", 1, attributes.size()); ref {attributes} [445-445],
 assertTrue("Attribute should be boolean", attributes.get(0) instanceof BooleanAttribute); ref {attributes} [446-446],
 assertFalse(div.hasAttr("false")); ref {div} [448-448],
 assertEquals("<div true></div>", div.outerHtml()); ref {div} [450-450]
[m[m05.11.2021 - 00:07:48.459 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testAppendRowToTable has 1 assertions: 
 assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [458-458]
[m[m05.11.2021 - 00:07:48.459 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testPrependRowToTable has 2 assertions: 
 assertEquals("<table><tbody><tr><td>2</td></tr><tr><td>1</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [466-466],
 assertEquals(i, ps.get(i).siblingIndex); ref {ps, ps.get(i).siblingIndex, i} [471-471]
[m[m05.11.2021 - 00:07:48.460 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testPrependElement has 2 assertions: 
 assertEquals("Before", div.child(0).text()); ref {div} [479-479],
 assertEquals("Hello", div.child(1).text()); ref {div} [480-480]
[m[m05.11.2021 - 00:07:48.460 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testAddNewText has 1 assertions: 
 assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html())); ref {div, TextUtil} [487-487]
[m[m05.11.2021 - 00:07:48.460 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testPrependText has 2 assertions: 
 assertEquals("there & now > Hello", div.text()); ref {div} [494-494],
 assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html())); ref {div, TextUtil} [495-495]
[m[m05.11.2021 - 00:07:48.460 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testThrowsOnAddNullText has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.460 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testThrowsOnPrependNullText has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.460 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testAddNewHtml has 2 assertions: 
 assertEquals("<p>Hello</p><p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); ref {div, TextUtil} [514-514],
 assertEquals(i, ps.get(i).siblingIndex); ref {ps, ps.get(i).siblingIndex, i} [519-519]
[m[m05.11.2021 - 00:07:48.460 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testPrependNewHtml has 2 assertions: 
 assertEquals("<p>there</p><p>now</p><p>Hello</p>", TextUtil.stripNewlines(div.html())); ref {div, TextUtil} [527-527],
 assertEquals(i, ps.get(i).siblingIndex); ref {ps, ps.get(i).siblingIndex, i} [532-532]
[m[m05.11.2021 - 00:07:48.461 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testSetHtml has 1 assertions: 
 assertEquals("<p>there</p><p>now</p>", TextUtil.stripNewlines(div.html())); ref {div, TextUtil} [540-540]
[m[m05.11.2021 - 00:07:48.461 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testSetHtmlTitle has 3 assertions: 
 assertEquals("good", title.html()); ref {title} [548-548],
 assertEquals("&lt;i&gt;bad&lt;/i&gt;", title.html()); ref {title} [550-550],
 assertEquals("<title>&lt;i&gt;bad&lt;/i&gt;</title>", head.html()); ref {head} [554-554]
[m[m05.11.2021 - 00:07:48.461 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testWrap has 3 assertions: 
 assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [561-561],
 assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [564-565],
 assertEquals(ret, p); ref {ret, p} [567-567]
[m[m05.11.2021 - 00:07:48.461 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::before has 2 assertions: 
 assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [574-574],
 assertEquals("<div><div>one</div><div>two</div><p>Hello</p><p>Three</p><!-- four --><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [577-577]
[m[m05.11.2021 - 00:07:48.461 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::after has 2 assertions: 
 assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [584-584],
 assertEquals("<div><p>Hello</p><div>one</div><div>two</div><p>There</p><p>Three</p><!-- four --></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [587-587]
[m[m05.11.2021 - 00:07:48.461 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testWrapWithRemainder has 1 assertions: 
 assertEquals("<div><div class=\"head\"><p>Hello</p><p>There!</p></div></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [594-594]
[m[m05.11.2021 - 00:07:48.462 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testHasText has 3 assertions: 
 assertTrue(div.hasText()); ref {div} [602-602],
 assertTrue(ps.first().hasText()); ref {ps} [603-603],
 assertFalse(ps.last().hasText()); ref {ps} [604-604]
[m[m05.11.2021 - 00:07:48.462 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::dataset has 13 assertions: 
 // size, get, set, add, remove
assertEquals(2, dataset.size()); ref {dataset} [614-614],
 assertEquals("jsoup", dataset.get("name")); ref {dataset} [615-615],
 assertEquals("jar", dataset.get("package")); ref {dataset} [616-616],
 assertEquals(2, dataset.size()); ref {dataset} [622-622],
 assertEquals(4, attributes.size()); ref {attributes} [623-623],
 assertEquals("jsoup updated", attributes.get("data-name")); ref {attributes} [624-624],
 assertEquals("jsoup updated", dataset.get("name")); ref {dataset} [625-625],
 assertEquals("java", attributes.get("data-language")); ref {attributes} [626-626],
 assertEquals("java", dataset.get("language")); ref {dataset} [627-627],
 assertEquals(3, dataset.size()); ref {dataset} [630-630],
 assertEquals("bacon", dataset.get("food")); ref {dataset} [631-631],
 // data- is not a data attribute
assertEquals(null, dataset.get("")); ref {dataset} [634-634],
 assertEquals(0, p.dataset().size()); ref {p} [637-637]
[m[m05.11.2021 - 00:07:48.462 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::parentlessToString has 2 assertions: 
 assertEquals("<img src=\"foo\">", img.toString()); ref {img} [644-644],
 assertEquals("<img src=\"foo\">", img.toString()); ref {img} [647-647]
[m[m05.11.2021 - 00:07:48.462 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testClone has 8 assertions: 
 // should be orphaned
assertNull(clone.parent()); ref {clone} [656-656],
 assertEquals(0, clone.siblingIndex); ref {clone.siblingIndex, clone} [657-657],
 assertEquals(1, p.siblingIndex); ref {p.siblingIndex, p} [658-658],
 assertNotNull(p.parent()); ref {p} [659-659],
 assertEquals("<p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(clone.outerHtml())); ref {TextUtil, clone} [662-662],
 // not modified
assertEquals("<div><p>One</p><p><span>Two</span></p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [663-663],
 assertNotNull(clone.parent()); ref {clone} [666-666],
 assertEquals("<div><p>One</p><p><span>Two</span></p></div><p><span>Two</span><span>Three</span></p>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [667-667]
[m[m05.11.2021 - 00:07:48.462 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testClonesClassnames has 12 assertions: 
 assertEquals(2, classes.size()); ref {classes} [674-674],
 assertTrue(classes.contains("one")); ref {classes} [675-675],
 assertTrue(classes.contains("two")); ref {classes} [676-676],
 assertEquals(2, copyClasses.size()); ref {copyClasses} [680-680],
 assertTrue(copyClasses.contains("one")); ref {copyClasses} [681-681],
 assertTrue(copyClasses.contains("two")); ref {copyClasses} [682-682],
 assertTrue(classes.contains("one")); ref {classes} [686-686],
 assertFalse(classes.contains("three")); ref {classes} [687-687],
 assertFalse(copyClasses.contains("one")); ref {copyClasses} [688-688],
 assertTrue(copyClasses.contains("three")); ref {copyClasses} [689-689],
 assertEquals("", div.html()); ref {div} [691-691],
 assertEquals("", copy.html()); ref {copy} [692-692]
[m[m05.11.2021 - 00:07:48.463 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testShallowClone has 12 assertions: 
 assertEquals(1, d.childNodeSize()); ref {d} [706-706],
 assertEquals(0, d2.childNodeSize()); ref {d2} [707-707],
 assertEquals(1, p.childNodeSize()); ref {p} [709-709],
 assertEquals(0, p2.childNodeSize()); ref {p2} [710-710],
 assertEquals("", p2.text()); ref {p2} [712-712],
 assertEquals("One", t2.text()); ref {t2} [713-713],
 assertEquals("two", p2.className()); ref {p2} [715-715],
 assertEquals("two", p.className()); ref {p} [717-717],
 assertEquals(1, d2.childNodeSize()); ref {d2} [720-720],
 assertEquals("Three", d2.text()); ref {d2} [721-721],
 assertEquals("One", d.text()); ref {d} [722-722],
 assertEquals(base, d2.baseUri()); ref {d2, base} [723-723]
[m[m05.11.2021 - 00:07:48.463 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testTagNameSet has 3 assertions: 
 assertEquals(0, doc.select("i").size()); ref {doc} [729-729],
 assertEquals(1, doc.select("em").size()); ref {doc} [730-730],
 assertEquals("<em>Hello</em>", doc.select("div").first().html()); ref {doc} [731-731]
[m[m05.11.2021 - 00:07:48.463 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testHtmlContainsOuter has 2 assertions: 
 assertTrue(doc.html().contains(doc.select("title").outerHtml())); ref {doc} [737-737],
 assertTrue(doc.html().contains(doc.select("div").outerHtml())); ref {doc} [738-738]
[m[m05.11.2021 - 00:07:48.463 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetTextNodes has 5 assertions: 
 assertEquals(3, textNodes.size()); ref {textNodes} [745-745],
 assertEquals("One ", textNodes.get(0).text()); ref {textNodes} [746-746],
 assertEquals(" Three ", textNodes.get(1).text()); ref {textNodes} [747-747],
 assertEquals(" Four", textNodes.get(2).text()); ref {textNodes} [748-748],
 assertEquals(0, doc.select("br").first().textNodes().size()); ref {doc} [750-750]
[m[m05.11.2021 - 00:07:48.463 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testManipulateTextNodes has 3 assertions: 
 assertEquals("One Two three-more Fo-ur", p.text()); ref {p} [761-761],
 assertEquals("One three-more Fo-ur", p.ownText()); ref {p} [762-762],
 // grew because of split
assertEquals(4, p.textNodes().size()); ref {p} [763-763]
[m[m05.11.2021 - 00:07:48.464 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testGetDataNodes has 5 assertions: 
 assertEquals(1, scriptData.size()); ref {scriptData} [773-773],
 assertEquals("One Two", scriptData.get(0).getWholeData()); ref {scriptData} [774-774],
 assertEquals(1, styleData.size()); ref {styleData} [777-777],
 assertEquals("Three Four", styleData.get(0).getWholeData()); ref {styleData} [778-778],
 assertEquals(0, pData.size()); ref {pData} [781-781]
[m[m05.11.2021 - 00:07:48.464 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::elementIsNotASiblingOfItself has 4 assertions: 
 assertEquals("Two", p2.text()); ref {p2} [788-788],
 assertEquals(2, els.size()); ref {els} [790-790],
 assertEquals("<p>One</p>", els.get(0).outerHtml()); ref {els} [791-791],
 assertEquals("<p>Three</p>", els.get(1).outerHtml()); ref {els} [792-792]
[m[m05.11.2021 - 00:07:48.464 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testChildThrowsIndexOutOfBoundsOnMissing has 2 assertions: 
 assertEquals(2, div.children().size()); ref {div} [799-799],
 assertEquals("One", div.child(0).text()); ref {div} [800-800]
[m[m05.11.2021 - 00:07:48.464 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::moveByAppend has 6 assertions: 
 assertEquals(4, div1.childNodeSize()); ref {div1} [816-816],
 assertEquals(4, children.size()); ref {children} [818-818],
 // children is backed by div1.childNodes, moved, so should be 0 now
assertEquals(0, children.size()); ref {children} [822-822],
 assertEquals(0, div1.childNodeSize()); ref {div1} [823-823],
 assertEquals(4, div2.childNodeSize()); ref {div2} [824-824],
 assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>", doc.body().html()); ref {doc} [825-826]
[m[m05.11.2021 - 00:07:48.464 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::insertChildrenArgumentValidation has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.464 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::insertChildrenAtPosition has 10 assertions: 
 assertEquals(2, div2.childNodeSize()); ref {div2} [861-861],
 // moved two out
assertEquals(2, div1.childNodeSize()); ref {div1} [863-863],
 assertEquals(4, div2.childNodeSize()); ref {div2} [864-864],
 // should be last
assertEquals(3, p1s.get(1).siblingIndex()); ref {p1s} [865-865],
 assertNull(el1.parent()); ref {el1} [875-875],
 assertEquals(div2, el1.parent()); ref {el1, div2} [877-877],
 assertEquals(7, div2.childNodeSize()); ref {div2} [878-878],
 assertEquals(3, el1.siblingIndex()); ref {el1} [879-879],
 assertEquals(4, el2.siblingIndex()); ref {el2} [880-880],
 assertEquals(5, tn1.siblingIndex()); ref {tn1} [881-881]
[m[m05.11.2021 - 00:07:48.465 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::insertChildrenAsCopy has 3 assertions: 
 // not moved -- cloned
assertEquals(4, div1.childNodeSize()); ref {div1} [893-893],
 assertEquals(2, div2.childNodeSize()); ref {div2} [894-894],
 assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [895-896]
[m[m05.11.2021 - 00:07:48.465 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testCssPath has 6 assertions: 
 assertEquals(divA.cssSelector(), "#id1"); ref {divA} [905-905],
 assertEquals(divB.cssSelector(), "html > body > div:nth-child(2)"); ref {divB} [906-906],
 assertEquals(divC.cssSelector(), "html > body > div.c1.c2"); ref {divC} [907-907],
 assertTrue(divA == doc.select(divA.cssSelector()).first()); ref {doc, divA} [909-909],
 assertTrue(divB == doc.select(divB.cssSelector()).first()); ref {doc, divB} [910-910],
 assertTrue(divC == doc.select(divC.cssSelector()).first()); ref {doc, divC} [911-911]
[m[m05.11.2021 - 00:07:48.465 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testClassNames has 11 assertions: 
 assertEquals("c1 c2", div.className()); ref {div} [920-920],
 assertTrue(arr1.length == 2); ref {arr1.length, arr1} [924-924],
 assertEquals("c1", arr1[0]); ref {arr1} [925-925],
 assertEquals("c2", arr1[1]); ref {arr1} [926-926],
 assertTrue(2 == div.classNames().size()); ref {div} [930-930],
 assertEquals("c1 c2", div.className()); ref {div} [931-931],
 assertEquals("c1 c2 c3", div.className()); ref {div} [941-941],
 assertTrue(arr2.length == 3); ref {arr2, arr2.length} [945-945],
 assertEquals("c1", arr2[0]); ref {arr2} [946-946],
 assertEquals("c2", arr2[1]); ref {arr2} [947-947],
 assertEquals("c3", arr2[2]); ref {arr2} [948-948]
[m[m05.11.2021 - 00:07:48.465 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testHashAndEqualsAndValue has 15 assertions: 
 /*
        for (Element el : els) {
            System.out.println(el.hashCode() + " - " + el.outerHtml());
        }

        0 1534787905 - <p class="one">One</p>
        1 1534787905 - <p class="one">One</p>
        2 1539683239 - <p class="one">Two</p>
        3 1535455211 - <p class="two">One</p>
        4 1534787905 - <p class="one">One</p>
        5 1534787905 - <p class="one">One</p>
        6 1539683239 - <p class="one">Two</p>
        7 1535455211 - <p class="two">One</p>
        */
assertEquals(8, els.size()); ref {els} [975-975],
 assertEquals(e0, e0); ref {e0} [985-985],
 assertTrue(e0.hasSameValue(e1)); ref {e0, e1} [986-986],
 assertTrue(e0.hasSameValue(e4)); ref {e0, e4} [987-987],
 assertTrue(e0.hasSameValue(e5)); ref {e5, e0} [988-988],
 assertFalse(e0.equals(e2)); ref {e0, e2} [989-989],
 assertFalse(e0.hasSameValue(e2)); ref {e0, e2} [990-990],
 assertFalse(e0.hasSameValue(e3)); ref {e0, e3} [991-991],
 assertFalse(e0.hasSameValue(e6)); ref {e6, e0} [992-992],
 assertFalse(e0.hasSameValue(e7)); ref {e7, e0} [993-993],
 assertEquals(e0.hashCode(), e0.hashCode()); ref {e0} [995-995],
 assertFalse(e0.hashCode() == (e2.hashCode())); ref {e0, e2} [996-996],
 assertFalse(e0.hashCode() == (e3).hashCode()); ref {e0, e3} [997-997],
 assertFalse(e0.hashCode() == (e6).hashCode()); ref {e6, e0} [998-998],
 assertFalse(e0.hashCode() == (e7).hashCode()); ref {e7, e0} [999-999]
[m[m05.11.2021 - 00:07:48.465 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testRelativeUrls has 5 assertions: 
 assertEquals("http://example.com/bar/one.html", els.get(0).absUrl("href")); ref {els} [1007-1007],
 assertEquals("http://example.com/bar/two.html", els.get(1).absUrl("href")); ref {els} [1008-1008],
 assertEquals("http://example.com/three.html", els.get(2).absUrl("href")); ref {els} [1009-1009],
 assertEquals("http://example2.com/four/", els.get(3).absUrl("href")); ref {els} [1010-1010],
 assertEquals("https://example2.com/five/", els.get(4).absUrl("href")); ref {els} [1011-1011]
[m[m05.11.2021 - 00:07:48.466 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::appendMustCorrectlyMoveChildrenInsideOneParentElement has 1 assertions: 
 assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result); ref {result} [1031-1031]
[m[m05.11.2021 - 00:07:48.466 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testHashcodeIsStableWithContentChanges has 1 assertions: 
 assertTrue(set.contains(root)); ref {set, root} [1043-1043]
[m[m05.11.2021 - 00:07:48.466 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNamespacedElements has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [1052-1052],
 assertEquals("html > body > fb|comments", els.get(0).cssSelector()); ref {els} [1053-1053]
[m[m05.11.2021 - 00:07:48.466 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testChainedRemoveAttributes has 1 assertions: 
 assertEquals("<a>Text</a>", a.outerHtml()); ref {a} [1068-1068]
[m[m05.11.2021 - 00:07:48.466 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testLoopedRemoveAttributes has 1 assertions: 
 assertEquals("<a>Text</a>\n<p>Two</p>", doc.body().html()); ref {doc} [1079-1079]
[m[m05.11.2021 - 00:07:48.466 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testIs has 13 assertions: 
 assertTrue(p.is("p")); ref {p} [1088-1088],
 assertFalse(p.is("div")); ref {p} [1089-1089],
 assertTrue(p.is("p:has(a)")); ref {p} [1090-1090],
 assertTrue(p.is("p:first-child")); ref {p} [1091-1091],
 assertFalse(p.is("p:last-child")); ref {p} [1092-1092],
 assertTrue(p.is("*")); ref {p} [1093-1093],
 assertTrue(p.is("div p")); ref {p} [1094-1094],
 assertTrue(q.is("p")); ref {q} [1097-1097],
 assertTrue(q.is("p ~ p")); ref {q} [1098-1098],
 assertTrue(q.is("p + p")); ref {q} [1099-1099],
 assertTrue(q.is("p:last-child")); ref {q} [1100-1100],
 assertFalse(q.is("p a")); ref {q} [1101-1101],
 assertFalse(q.is("a")); ref {q} [1102-1102]
[m[m05.11.2021 - 00:07:48.467 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::elementByTagName has 1 assertions: 
 assertTrue(a.tagName().equals("P")); ref {a} [1108-1108]
[m[m05.11.2021 - 00:07:48.467 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testChildrenElements has 14 assertions: 
 assertEquals(2, docChildren.size()); ref {docChildren} [1121-1121],
 assertEquals("<p><a>One</a></p>", docChildren.get(0).outerHtml()); ref {docChildren} [1122-1122],
 assertEquals("<p><a>Two</a></p>", docChildren.get(1).outerHtml()); ref {docChildren} [1123-1123],
 assertEquals(3, div.childNodes().size()); ref {div} [1124-1124],
 assertEquals("Three", div.childNodes().get(2).outerHtml()); ref {div} [1125-1125],
 assertEquals(1, p.children().size()); ref {p} [1127-1127],
 assertEquals("One", p.children().text()); ref {p} [1128-1128],
 assertEquals(0, span.children().size()); ref {span} [1130-1130],
 assertEquals(1, span.childNodes().size()); ref {span} [1131-1131],
 assertEquals("Four", span.childNodes().get(0).outerHtml()); ref {span} [1132-1132],
 assertEquals(0, foo.children().size()); ref {foo} [1134-1134],
 assertEquals(0, foo.childNodes().size()); ref {foo} [1135-1135],
 assertEquals(0, img.children().size()); ref {img} [1136-1136],
 assertEquals(0, img.childNodes().size()); ref {img} [1137-1137]
[m[m05.11.2021 - 00:07:48.467 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testShadowElementsAreUpdated has 11 assertions: 
 // the two Ps
assertEquals(2, els.size()); ref {els} [1147-1147],
 // the "Three" textnode
assertEquals(3, nodes.size()); ref {nodes} [1148-1148],
 // first els should not have changed
assertEquals(2, els.size()); ref {els} [1157-1157],
 assertEquals(4, els2.size()); ref {els2} [1158-1158],
 assertEquals("<p><a>One</a></p>\n" + "<p>P3</p>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html()); ref {div} [1160-1163],
 assertEquals("P3", els2.get(1).text()); ref {els2} [1164-1164],
 assertEquals("P4", els2.get(3).text()); ref {els2} [1165-1165],
 assertEquals(5, els3.size()); ref {els3} [1170-1170],
 assertEquals("span", els3.get(2).tagName()); ref {els3} [1171-1171],
 assertEquals("Another", els3.get(2).text()); ref {els3} [1172-1172],
 assertEquals("<p><a>One</a></p>\n" + "<p>P3</p><span>Another</span>\n" + "<p><a>Two</a></p>\n" + "<p>P4</p>Three", div.html()); ref {div} [1174-1177]
[m[m05.11.2021 - 00:07:48.467 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::classNamesAndAttributeNameIsCaseInsensitive has 17 assertions: 
 assertEquals("SomeText AnotherText", p.className()); ref {p} [1184-1184],
 assertTrue(p.classNames().contains("SomeText")); ref {p} [1185-1185],
 assertTrue(p.classNames().contains("AnotherText")); ref {p} [1186-1186],
 assertTrue(p.hasClass("SomeText")); ref {p} [1187-1187],
 assertTrue(p.hasClass("sometext")); ref {p} [1188-1188],
 assertTrue(p.hasClass("AnotherText")); ref {p} [1189-1189],
 assertTrue(p.hasClass("anothertext")); ref {p} [1190-1190],
 assertEquals("One", p1.text()); ref {p1} [1203-1203],
 assertEquals(p1, p2); ref {p1, p2} [1204-1204],
 assertEquals(p1, p3); ref {p1, p3} [1205-1205],
 assertEquals(p1, p4); ref {p1, p4} [1206-1206],
 assertEquals(p1, p5); ref {p1, p5} [1207-1207],
 assertEquals(p1, p6); ref {p1, p6} [1208-1208],
 assertEquals(p1, p7); ref {p1, p7} [1209-1209],
 assertEquals(p1, p8); ref {p1, p8} [1210-1210],
 assertEquals(p1, p9); ref {p1, p9} [1211-1211],
 assertEquals(p1, p10); ref {p1, p10} [1212-1212]
[m[m05.11.2021 - 00:07:48.468 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testAppendTo has 4 assertions: 
 assertEquals(div, appendTo1); ref {div, appendTo1} [1227-1227],
 assertEquals(p, appendTo2); ref {p, appendTo2} [1230-1230],
 assertEquals("<div class=\"a\"></div>\n<div class=\"b\">\n <p>Two</p>\n</div>", parentDoc.body().html()); ref {parentDoc} [1232-1232],
 // got moved out
assertEquals("", childDoc.body().html()); ref {childDoc} [1233-1233]
[m[m05.11.2021 - 00:07:48.468 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNormalizesNbspInText has 6 assertions: 
 // text is normalized
assertEquals("You can't always get what you want.", p.text()); ref {p} [1241-1241],
 // html / whole text keeps &nbsp;
assertEquals("<p>" + escaped + "</p>", p.outerHtml()); ref {escaped, p} [1243-1243],
 assertEquals(withNbsp, p.textNodes().get(0).getWholeText()); ref {p, withNbsp} [1244-1244],
 assertEquals(160, withNbsp.charAt(29)); ref {withNbsp} [1245-1245],
 assertEquals("p", matched.nodeName()); ref {matched} [1248-1248],
 assertTrue(matched.is(":containsOwn(get what you want)")); ref {matched} [1249-1249]
[m[m05.11.2021 - 00:07:48.468 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNormalizesInvisiblesInText has 5 assertions: 
 // text is normalized
assertEquals("Thisisonelongword", p.text()); ref {p} [1259-1259],
 // html / whole text keeps &shy etc;
assertEquals("<p>" + escaped + "</p>", p.outerHtml()); ref {escaped, p} [1260-1260],
 assertEquals(decoded, p.textNodes().get(0).getWholeText()); ref {p, decoded} [1261-1261],
 assertEquals("p", matched.nodeName()); ref {matched} [1264-1264],
 assertTrue(matched.is(":containsOwn(Thisisonelongword)")); ref {matched} [1265-1265]
[m[m05.11.2021 - 00:07:48.468 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testRemoveBeforeIndex has 1 assertions: 
 assertEquals("<body><div><p>XXX</p><p>after1</p><p>after2</p></div></body>", TextUtil.stripNewlines(body.outerHtml())); ref {TextUtil, body} [1283-1283]
[m[m05.11.2021 - 00:07:48.468 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testRemoveAfterIndex has 1 assertions: 
 assertEquals("<body><div><p>before1</p><p>before2</p><p>XXX</p></div></body>", TextUtil.stripNewlines(body.outerHtml())); ref {TextUtil, body} [1300-1300]
[m[m05.11.2021 - 00:07:48.468 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::whiteSpaceClassElement has 1 assertions: 
 assertFalse(hasClass); ref {hasClass} [1311-1311]
[m[m05.11.2021 - 00:07:48.468 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNextElementSiblingAfterClone has 4 assertions: 
 assertEquals(expectedText, originalNextElementSibling.text()); ref {expectedText, originalNextElementSibling} [1328-1328],
 assertEquals(expectedText, originalNextSibling.text()); ref {expectedText, originalNextSibling} [1329-1329],
 assertEquals(cloneExpect, cloneNextElementSibling.text()); ref {cloneExpect, cloneNextElementSibling} [1335-1335],
 assertEquals(cloneExpect, cloneNextSibling.text()); ref {cloneNextSibling, cloneExpect} [1336-1336]
[m[m05.11.2021 - 00:07:48.469 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testRemovingEmptyClassAttributeWhenLastClassRemoved has 1 assertions: 
 assertFalse(doc.body().html().contains("class=\"\"")); ref {doc} [1346-1346]
[m[m05.11.2021 - 00:07:48.469 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::booleanAttributeOutput has 1 assertions: 
 assertEquals("<img src=\"foo\" noshade nohref async autofocus=\"false\">", img.outerHtml()); ref {img} [1354-1354]
[m[m05.11.2021 - 00:07:48.469 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::textHasSpaceAfterBlockTags has 1 assertions: 
 assertEquals("One Two", doc.text()); ref {doc} [1360-1360]
[m[m05.11.2021 - 00:07:48.469 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::textHasSpaceBetweenDivAndCenterTags has 1 assertions: 
 assertEquals("One Two Three Four", doc.text()); ref {doc} [1366-1366]
[m[m05.11.2021 - 00:07:48.469 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testNextElementSiblings has 12 assertions: 
 assertNotNull(elementSiblings); ref {elementSiblings} [1382-1382],
 assertEquals(2, elementSiblings.size()); ref {elementSiblings} [1383-1383],
 assertEquals("b", elementSiblings.get(0).id()); ref {elementSiblings} [1384-1384],
 assertEquals("c", elementSiblings.get(1).id()); ref {elementSiblings} [1385-1385],
 assertNotNull(elementSiblings1); ref {elementSiblings1} [1389-1389],
 assertEquals(1, elementSiblings1.size()); ref {elementSiblings1} [1390-1390],
 assertEquals("c", elementSiblings1.get(0).id()); ref {elementSiblings1} [1391-1391],
 assertEquals(0, elementSiblings2.size()); ref {elementSiblings2} [1395-1395],
 assertNotNull(elementSiblings3); ref {elementSiblings3} [1399-1399],
 assertEquals(1, elementSiblings3.size()); ref {elementSiblings3} [1400-1400],
 assertEquals("div", elementSiblings3.get(0).id()); ref {elementSiblings3} [1401-1401],
 assertEquals(0, elementSiblings4.size()); ref {elementSiblings4} [1405-1405]
[m[m05.11.2021 - 00:07:48.469 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testPreviousElementSiblings has 9 assertions: 
 assertNotNull(elementSiblings); ref {elementSiblings} [1421-1421],
 assertEquals(1, elementSiblings.size()); ref {elementSiblings} [1422-1422],
 assertEquals("a", elementSiblings.get(0).id()); ref {elementSiblings} [1423-1423],
 assertEquals(0, elementSiblings1.size()); ref {elementSiblings1} [1427-1427],
 assertNotNull(elementSiblings2); ref {elementSiblings2} [1431-1431],
 assertEquals(2, elementSiblings2.size()); ref {elementSiblings2} [1432-1432],
 assertEquals("b", elementSiblings2.get(0).id()); ref {elementSiblings2} [1433-1433],
 assertEquals("a", elementSiblings2.get(1).id()); ref {elementSiblings2} [1434-1434],
 assertEquals(0, elementSiblings3.size()); ref {elementSiblings3} [1438-1438]
[m[m05.11.2021 - 00:07:48.470 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testClearAttributes has 3 assertions: 
 assertEquals("<a href=\"http://example.com\">Hello</a>", el.outerHtml()); ref {el} [1444-1444],
 assertSame(el, el2); ref {el, el2} [1446-1446],
 assertEquals("<a>Hello</a>", el2.outerHtml()); ref {el2} [1447-1447]
[m[m05.11.2021 - 00:07:48.470 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testRemoveAttr has 3 assertions: 
 assertEquals("<a href=\"http://example.com\" id=\"1\">Hello</a>", el.outerHtml()); ref {el} [1456-1456],
 assertSame(el, el2); ref {el, el2} [1458-1458],
 assertEquals("<a id=\"1\">Hello</a>", el2.outerHtml()); ref {el2} [1459-1459]
[m[m05.11.2021 - 00:07:48.470 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testRoot has 5 assertions: 
 assertEquals("<a><span>Hello</span></a>", el.outerHtml()); ref {el} [1466-1466],
 assertNotNull(span); ref {span} [1468-1468],
 assertSame(el, el2); ref {el, el2} [1470-1470],
 assertSame(doc, div.root()); ref {div, doc} [1474-1474],
 assertSame(doc, div.ownerDocument()); ref {div, doc} [1475-1475]
[m[m05.11.2021 - 00:07:48.470 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testTraverse has 2 assertions: 
 assertEquals(7, counter.get()); ref {counter} [1497-1497],
 assertEquals(div2, div); ref {div, div2} [1498-1498]
[m[m05.11.2021 - 00:07:48.470 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::voidTestFilterCallReturnsElement has 1 assertions: 
 assertSame(div, div2); ref {div, div2} [1518-1518]
[m[m05.11.2021 - 00:07:48.470 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::doesntDeleteZWJWhenNormalizingText has 5 assertions: 
 assertEquals(12, p.text().length()); ref {p} [1529-1529],
 assertEquals(text, p.text()); ref {p, text} [1530-1530],
 assertEquals(7, d.text().length()); ref {d} [1531-1531],
 assertEquals("One\u200DTwo", d.text()); ref {d} [1532-1532],
 assertTrue(found.hasSameValue(d)); ref {found, d} [1534-1534]
[m[m05.11.2021 - 00:07:48.471 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testFastReparent has 6 assertions: 
 assertEquals(rows, wrapper.childNodes.size()); ref {wrapper.childNodes, wrapper, rows} [1557-1557],
 // all moved out
assertEquals(0, childNodes.size()); ref {childNodes} [1558-1558],
 assertEquals(wrapper, wrapperAcutal); ref {wrapperAcutal, wrapper} [1562-1562],
 assertEquals("El-1", wrapperAcutal.children().get(0).text()); ref {wrapperAcutal} [1563-1563],
 assertEquals("El-" + rows, wrapperAcutal.children().get(rows - 1).text()); ref {wrapperAcutal, rows} [1564-1564],
 assertTrue(runtime <= 1000); ref {runtime} [1565-1565]
[m[m05.11.2021 - 00:07:48.471 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testFastReparentExistingContent has 9 assertions: 
 assertEquals(2, wrapper.childNodes.size()); ref {wrapper.childNodes, wrapper} [1585-1585],
 assertEquals(rows + 2, wrapper.childNodes.size()); ref {wrapper.childNodes, wrapper, rows} [1591-1591],
 // all moved out
assertEquals(0, childNodes.size()); ref {childNodes} [1592-1592],
 assertEquals(wrapper, wrapperAcutal); ref {wrapperAcutal, wrapper} [1596-1596],
 assertEquals("Prior Content", wrapperAcutal.children().get(0).text()); ref {wrapperAcutal} [1597-1597],
 assertEquals("El-1", wrapperAcutal.children().get(1).text()); ref {wrapperAcutal} [1598-1598],
 assertEquals("El-" + rows, wrapperAcutal.children().get(rows).text()); ref {wrapperAcutal, rows} [1600-1600],
 assertEquals("End Content", wrapperAcutal.children().get(rows + 1).text()); ref {wrapperAcutal, rows} [1601-1601],
 assertTrue(runtime <= 1000); ref {runtime} [1603-1603]
[m[m05.11.2021 - 00:07:48.471 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.ElementTest::testReparentSeperateNodes has 4 assertions: 
 assertEquals("<div><p>One</p><p>Two</p></div><p>Three</p><p>Four</p>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [1614-1614],
 assertEquals("<p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [1618-1618],
 assertEquals("<p>Four</p><p>Three</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [1621-1621],
 assertEquals("<p>Four</p><p>Three</p><p>Four</p><div><p>One</p><p>Two</p></div><p>Three</p>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [1625-1625]
[m[m05.11.2021 - 00:07:48.480 [INFO ] ParsingStrategy.parseTestSuite() - Found 34 test cases
[m[m05.11.2021 - 00:07:48.481 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::filter has 3 assertions: 
 assertEquals(2, els.size()); ref {els} [26-26],
 assertEquals("Hello", els.get(0).text()); ref {els} [27-27],
 assertEquals("There", els.get(1).text()); ref {els} [28-28]
[m[m05.11.2021 - 00:07:48.481 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::attributes has 9 assertions: 
 assertEquals(2, withTitle.size()); ref {withTitle} [35-35],
 assertTrue(withTitle.hasAttr("title")); ref {withTitle} [36-36],
 assertFalse(withTitle.hasAttr("class")); ref {withTitle} [37-37],
 assertEquals("foo", withTitle.attr("title")); ref {withTitle} [38-38],
 // existing Elements are not reevaluated
assertEquals(2, withTitle.size()); ref {withTitle} [41-41],
 assertEquals(0, doc.select("p[title]").size()); ref {doc} [42-42],
 assertEquals(4, ps.size()); ref {ps} [45-45],
 assertEquals("classy", ps.last().attr("style")); ref {ps} [46-46],
 assertEquals("bar", ps.last().attr("class")); ref {ps} [47-47]
[m[m05.11.2021 - 00:07:48.481 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::hasAttr has 2 assertions: 
 assertTrue(ps.hasAttr("class")); ref {ps} [53-53],
 assertFalse(ps.hasAttr("style")); ref {ps} [54-54]
[m[m05.11.2021 - 00:07:48.481 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::hasAbsAttr has 3 assertions: 
 assertFalse(one.hasAttr("abs:href")); ref {one} [62-62],
 assertTrue(two.hasAttr("abs:href")); ref {two} [63-63],
 // hits on #2
assertTrue(both.hasAttr("abs:href")); ref {both} [64-64]
[m[m05.11.2021 - 00:07:48.481 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::attr has 1 assertions: 
 assertEquals("foo", classVal); ref {classVal} [70-70]
[m[m05.11.2021 - 00:07:48.481 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::absAttr has 3 assertions: 
 assertEquals("", one.attr("abs:href")); ref {one} [79-79],
 assertEquals("https://jsoup.org", two.attr("abs:href")); ref {two} [80-80],
 assertEquals("https://jsoup.org", both.attr("abs:href")); ref {both} [81-81]
[m[m05.11.2021 - 00:07:48.482 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::classes has 4 assertions: 
 assertTrue(els.hasClass("red")); ref {els} [88-88],
 assertFalse(els.hasClass("blue")); ref {els} [89-89],
 assertEquals("blue", els.get(0).className()); ref {els} [94-94],
 assertEquals("red green blue mellow", els.get(1).className()); ref {els} [95-95]
[m[m05.11.2021 - 00:07:48.482 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::hasClassCaseInsensitive has 6 assertions: 
 assertTrue(one.hasClass("One")); ref {one} [104-104],
 assertTrue(one.hasClass("ONE")); ref {one} [105-105],
 assertTrue(two.hasClass("TWO")); ref {two} [107-107],
 assertTrue(two.hasClass("Two")); ref {two} [108-108],
 assertTrue(thr.hasClass("ThreE")); ref {thr} [110-110],
 assertTrue(thr.hasClass("three")); ref {thr} [111-111]
[m[m05.11.2021 - 00:07:48.482 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::text has 1 assertions: 
 assertEquals("Hello there world", doc.select("div > *").text()); ref {doc} [117-117]
[m[m05.11.2021 - 00:07:48.482 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::hasText has 2 assertions: 
 assertTrue(divs.hasText()); ref {divs} [123-123],
 assertFalse(doc.select("div + div").hasText()); ref {doc} [124-124]
[m[m05.11.2021 - 00:07:48.482 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::html has 1 assertions: 
 assertEquals("<p>Hello</p>\n<p>There</p>", divs.html()); ref {divs} [130-130]
[m[m05.11.2021 - 00:07:48.482 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::outerHtml has 1 assertions: 
 assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml())); ref {TextUtil, divs} [136-136]
[m[m05.11.2021 - 00:07:48.482 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::setHtml has 2 assertions: 
 assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); ref {ps, TextUtil} [144-144],
 assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); ref {ps, TextUtil} [147-147]
[m[m05.11.2021 - 00:07:48.483 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::val has 6 assertions: 
 assertEquals(2, els.size()); ref {els} [153-153],
 assertEquals("one", els.val()); ref {els} [154-154],
 assertEquals("two", els.last().val()); ref {els} [155-155],
 assertEquals("three", els.first().val()); ref {els} [158-158],
 assertEquals("three", els.last().val()); ref {els} [159-159],
 assertEquals("<textarea>three</textarea>", els.last().outerHtml()); ref {els} [160-160]
[m[m05.11.2021 - 00:07:48.483 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::before has 1 assertions: 
 assertEquals("<p>This <span>foo</span><a>is</a> <span>foo</span><a>jsoup</a>.</p>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [166-166]
[m[m05.11.2021 - 00:07:48.483 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::after has 1 assertions: 
 assertEquals("<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [172-172]
[m[m05.11.2021 - 00:07:48.483 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::wrap has 1 assertions: 
 assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html()); ref {doc} [179-179]
[m[m05.11.2021 - 00:07:48.483 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::wrapDiv has 1 assertions: 
 assertEquals("<div><p><b>This</b> is <b>jsoup</b>.</p></div> <div><p>How do you like it?</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [186-187]
[m[m05.11.2021 - 00:07:48.483 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::unwrap has 1 assertions: 
 assertEquals("<div>One <a href=\"/\">Two</a></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [194-194]
[m[m05.11.2021 - 00:07:48.483 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::unwrapP has 1 assertions: 
 assertEquals("<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [201-201]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::unwrapKeepsSpace has 1 assertions: 
 assertEquals("<p>One two three four</p>", doc.body().html()); ref {doc} [208-208]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::empty has 1 assertions: 
 assertEquals("<div><p></p> <p></p></div>", doc.body().html()); ref {doc} [216-216]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::remove has 1 assertions: 
 assertEquals("<div> jsoup </div>", doc.body().html()); ref {doc} [224-224]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::eq has 2 assertions: 
 assertEquals("there", doc.select("p").eq(1).text()); ref {doc} [230-230],
 assertEquals("there", doc.select("p").get(1).text()); ref {doc} [231-231]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::is has 2 assertions: 
 assertTrue(ps.is("[title=foo]")); ref {ps} [238-238],
 assertFalse(ps.is("[title=bar]")); ref {ps} [239-239]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::parents has 4 assertions: 
 assertEquals(3, parents.size()); ref {parents} [246-246],
 assertEquals("div", parents.get(0).tagName()); ref {parents} [247-247],
 assertEquals("body", parents.get(1).tagName()); ref {parents} [248-248],
 assertEquals("html", parents.get(2).tagName()); ref {parents} [249-249]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::not has 4 assertions: 
 assertEquals(1, div1.size()); ref {div1} [256-256],
 assertEquals("1", div1.first().id()); ref {div1} [257-257],
 assertEquals(1, div2.size()); ref {div2} [260-260],
 assertEquals("2", div2.first().id()); ref {div2} [261-261]
[m[m05.11.2021 - 00:07:48.484 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::tagNameSet has 1 assertions: 
 assertEquals("<p>Hello <em>there</em> <em>now</em></p>", doc.body().html()); ref {doc} [268-268]
[m[m05.11.2021 - 00:07:48.485 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::traverse has 1 assertions: 
 assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString()); ref {accum} [285-285]
[m[m05.11.2021 - 00:07:48.485 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::forms has 6 assertions: 
 assertEquals(9, els.size()); ref {els} [291-291],
 assertEquals(2, forms.size()); ref {forms} [294-294],
 assertTrue(forms.get(0) != null); ref {forms} [295-295],
 assertTrue(forms.get(1) != null); ref {forms} [296-296],
 assertEquals("1", forms.get(0).id()); ref {forms} [297-297],
 assertEquals("2", forms.get(1).id()); ref {forms} [298-298]
[m[m05.11.2021 - 00:07:48.485 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::classWithHyphen has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [304-304],
 assertEquals("Check", els.text()); ref {els} [305-305]
[m[m05.11.2021 - 00:07:48.485 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::siblings has 23 assertions: 
 assertEquals(2, els.size()); ref {els} [312-312],
 assertEquals(2, next.size()); ref {next} [315-315],
 assertEquals("5", next.first().text()); ref {next} [316-316],
 assertEquals("11", next.last().text()); ref {next} [317-317],
 assertEquals(0, els.next("p:contains(6)").size()); ref {els} [319-319],
 assertEquals(1, nextF.size()); ref {nextF} [321-321],
 assertEquals("5", nextF.first().text()); ref {nextF} [322-322],
 assertEquals(4, nextA.size()); ref {nextA} [325-325],
 assertEquals("5", nextA.first().text()); ref {nextA} [326-326],
 assertEquals("12", nextA.last().text()); ref {nextA} [327-327],
 assertEquals(1, nextAF.size()); ref {nextAF} [330-330],
 assertEquals("6", nextAF.first().text()); ref {nextAF} [331-331],
 assertEquals(2, prev.size()); ref {prev} [334-334],
 assertEquals("3", prev.first().text()); ref {prev} [335-335],
 assertEquals("9", prev.last().text()); ref {prev} [336-336],
 assertEquals(0, els.prev("p:contains(1)").size()); ref {els} [338-338],
 assertEquals(1, prevF.size()); ref {prevF} [340-340],
 assertEquals("3", prevF.first().text()); ref {prevF} [341-341],
 assertEquals(6, prevA.size()); ref {prevA} [344-344],
 assertEquals("3", prevA.first().text()); ref {prevA} [345-345],
 assertEquals("7", prevA.last().text()); ref {prevA} [346-346],
 assertEquals(1, prevAF.size()); ref {prevAF} [349-349],
 assertEquals("1", prevAF.first().text()); ref {prevAF} [350-350]
[m[m05.11.2021 - 00:07:48.485 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::eachText has 10 assertions: 
 assertEquals(2, divText.size()); ref {divText} [356-356],
 assertEquals("1 2 3 4 5 6", divText.get(0)); ref {divText} [357-357],
 assertEquals("7 8 9 10 11 12", divText.get(1)); ref {divText} [358-358],
 assertEquals(13, ps.size()); ref {ps} [362-362],
 // not 13, as last doesn't have text
assertEquals(12, pText.size()); ref {pText} [363-363],
 assertEquals("1", pText.get(0)); ref {pText} [364-364],
 assertEquals("2", pText.get(1)); ref {pText} [365-365],
 assertEquals("5", pText.get(4)); ref {pText} [366-366],
 assertEquals("7", pText.get(6)); ref {pText} [367-367],
 assertEquals("12", pText.get(11)); ref {pText} [368-368]
[m[m05.11.2021 - 00:07:48.486 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.ElementsTest::eachAttr has 10 assertions: 
 assertEquals(3, hrefAttrs.size()); ref {hrefAttrs} [377-377],
 assertEquals("/foo", hrefAttrs.get(0)); ref {hrefAttrs} [378-378],
 assertEquals("http://example.com/bar", hrefAttrs.get(1)); ref {hrefAttrs} [379-379],
 assertEquals("", hrefAttrs.get(2)); ref {hrefAttrs} [380-380],
 assertEquals(4, doc.select("a").size()); ref {doc} [381-381],
 assertEquals(3, absAttrs.size()); ref {absAttrs} [384-384],
 assertEquals(3, absAttrs.size()); ref {absAttrs} [385-385],
 assertEquals("http://example.com/foo", absAttrs.get(0)); ref {absAttrs} [386-386],
 assertEquals("http://example.com/bar", absAttrs.get(1)); ref {absAttrs} [387-387],
 assertEquals("http://example.com", absAttrs.get(2)); ref {absAttrs} [388-388]
[m[m05.11.2021 - 00:07:48.486 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m05.11.2021 - 00:07:48.486 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlTreeBuilderStateTest::ensureArraysAreSorted has 1 assertions: 
 assertArrayEquals(array, copy); ref {array, copy} [40-40]
[m[m05.11.2021 - 00:07:48.491 [INFO ] ParsingStrategy.parseTestSuite() - Found 24 test cases
[m[m05.11.2021 - 00:07:48.491 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testSimpleXmlParse has 2 assertions: 
 assertEquals("<doc id=\"2\" href=\"/bar\">Foo <br /><link>One</link><link>Two</link></doc>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [39-40],
 assertEquals(doc.getElementById("2").absUrl("href"), "http://foo.com/bar"); ref {doc} [41-41]
[m[m05.11.2021 - 00:07:48.492 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testPopToClose has 1 assertions: 
 assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [50-51]
[m[m05.11.2021 - 00:07:48.492 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testCommentAndDocType has 1 assertions: 
 assertEquals("<!DOCTYPE HTML><!-- a comment -->One <qux />Two", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [59-60]
[m[m05.11.2021 - 00:07:48.492 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testSupplyParserToJsoupClass has 1 assertions: 
 assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [67-68]
[m[m05.11.2021 - 00:07:48.492 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testSupplyParserToConnection has 6 assertions: 
 assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(xmlDoc.html())); ref {xmlDoc, TextUtil} [81-82],
 assertFalse(htmlDoc.equals(xmlDoc)); ref {htmlDoc, xmlDoc} [83-83],
 assertEquals(xmlDoc, autoXmlDoc); ref {autoXmlDoc, xmlDoc} [84-84],
 // html parser normalises
assertEquals(1, htmlDoc.select("head").size()); ref {htmlDoc} [85-85],
 // xml parser does not
assertEquals(0, xmlDoc.select("head").size()); ref {xmlDoc} [86-86],
 // xml parser does not
assertEquals(0, autoXmlDoc.select("head").size()); ref {autoXmlDoc} [87-87]
[m[m05.11.2021 - 00:07:48.492 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testSupplyParserToDataStream has 1 assertions: 
 assertEquals("<doc><val>One<val>Two</val>Three</val></doc>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [95-96]
[m[m05.11.2021 - 00:07:48.492 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testDoesNotForceSelfClosingKnownTags has 2 assertions: 
 assertEquals("<br>one\n<br>", htmlDoc.body().html()); ref {htmlDoc} [103-103],
 assertEquals("<br>one</br>", xmlDoc.html()); ref {xmlDoc} [106-106]
[m[m05.11.2021 - 00:07:48.492 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::handlesXmlDeclarationAsDeclaration has 3 assertions: 
 assertEquals("<?xml encoding=\"UTF-8\"?> <body> One </body> <!-- comment -->", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [112-113],
 assertEquals("#declaration", doc.childNode(0).nodeName()); ref {doc} [114-114],
 assertEquals("#comment", doc.childNode(2).nodeName()); ref {doc} [115-115]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::xmlFragment has 4 assertions: 
 assertEquals(3, nodes.size()); ref {nodes} [121-121],
 assertEquals("http://example.com/foo/", nodes.get(0).absUrl("src")); ref {nodes} [123-123],
 assertEquals("one", nodes.get(0).nodeName()); ref {nodes} [124-124],
 assertEquals("Two", ((TextNode) nodes.get(1)).text()); ref {nodes} [125-125]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::xmlParseDefaultsToHtmlOutputSyntax has 1 assertions: 
 assertEquals(Syntax.xml, doc.outputSettings().syntax()); ref {Syntax.xml, doc, Syntax} [130-130]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testDoesHandleEOFInTag has 1 assertions: 
 assertEquals("<img src=\"asdf\" onerror=\"alert(1)\" x=\"\" />", xmlDoc.html()); ref {xmlDoc} [137-137]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testDetectCharsetEncodingDeclaration has 2 assertions: 
 assertEquals("ISO-8859-1", doc.charset().name()); ref {doc} [145-145],
 assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?> <data>äöåéü</data>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [146-147]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testParseDeclarationAttributes has 5 assertions: 
 assertEquals("1", decl.attr("version")); ref {decl} [155-155],
 assertEquals("UTF-8", decl.attr("encoding")); ref {decl} [156-156],
 assertEquals("else", decl.attr("something")); ref {decl} [157-157],
 assertEquals("version=\"1\" encoding=\"UTF-8\" something=\"else\"", decl.getWholeDeclaration()); ref {decl} [158-158],
 assertEquals("<?xml version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", decl.outerHtml()); ref {decl} [159-159]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::caseSensitiveDeclaration has 1 assertions: 
 assertEquals("<?XML version=\"1\" encoding=\"UTF-8\" something=\"else\"?>", doc.outerHtml()); ref {doc} [166-166]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::testCreatesValidProlog has 1 assertions: 
 assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<html>\n" + " <head></head>\n" + " <body></body>\n" + "</html>", document.outerHtml()); ref {document} [174-178]
[m[m05.11.2021 - 00:07:48.493 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::preservesCaseByDefault has 1 assertions: 
 assertEquals("<CHECK>One</CHECK><TEST ID=\"1\">Check</TEST>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [185-185]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::appendPreservesCaseByDefault has 1 assertions: 
 assertEquals("<One>One<Two ID=\"2\">Two</Two></One>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [194-194]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::canNormalizeCase has 1 assertions: 
 assertEquals("<test id=\"1\">Check</test>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [201-201]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::normalizesDiscordantTags has 1 assertions: 
 assertEquals("<div>\n test\n</div>\n<p></p>", document.html()); ref {document} [207-207]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::roundTripsCdata has 5 assertions: 
 assertEquals("<html>\n <foo><&amp;", div.text()); ref {div} [216-216],
 assertEquals(0, div.children().size()); ref {div} [217-217],
 // no elements, one text node
assertEquals(1, div.childNodeSize()); ref {div} [218-218],
 assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", div.outerHtml()); ref {div} [220-220],
 assertEquals("\n<html>\n <foo><&amp;", cdata.text()); ref {cdata} [223-223]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::cdataPreservesWhiteSpace has 2 assertions: 
 assertEquals(xml, doc.outerHtml()); ref {xml, doc} [229-229],
 assertEquals("//\n\n  foo();\n//", doc.selectFirst("script").text()); ref {doc} [231-231]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::handlesDodgyXmlDecl has 1 assertions: 
 assertEquals("One", doc.select("val").text()); ref {doc} [238-238]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::handlesLTinScript has 1 assertions: 
 // converted from pseudo xmldecl to comment
assertEquals("<script> var a=\"\n <!--?\"; var b=\"?-->\"; </script>", doc.html()); ref {doc} [246-246]
[m[m05.11.2021 - 00:07:48.494 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.XmlTreeBuilderTest::dropsDuplicateAttributes has 1 assertions: 
 assertEquals("<p One=\"One\" ONE=\"Two\" one=\"Three\" two=\"Six\" Two=\"Eight\">Text</p>", doc.selectFirst("p").outerHtml()); ref {doc} [255-255]
[m[m05.11.2021 - 00:07:48.499 [INFO ] ParsingStrategy.parseTestSuite() - Found 23 test cases
[m[m05.11.2021 - 00:07:48.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::throwsExceptionOnParseWithoutExecute has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::throwsExceptionOnBodyWithoutExecute has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::throwsExceptionOnBodyAsBytesWithoutExecute has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::caseInsensitiveHeaders has 12 assertions: 
 assertTrue(res.hasHeader("Accept-Encoding")); ref {res} [51-51],
 assertTrue(res.hasHeader("accept-encoding")); ref {res} [52-52],
 assertTrue(res.hasHeader("accept-Encoding")); ref {res} [53-53],
 assertTrue(res.hasHeader("ACCEPT-ENCODING")); ref {res} [54-54],
 assertEquals("gzip", res.header("accept-Encoding")); ref {res} [56-56],
 assertEquals("gzip", res.header("ACCEPT-ENCODING")); ref {res} [57-57],
 assertEquals("text/html", res.header("Content-Type")); ref {res} [58-58],
 assertEquals("http://example.com", res.header("Referrer")); ref {res} [59-59],
 assertFalse(res.hasHeader("content-type")); ref {res} [62-62],
 assertFalse(res.hasHeader("Accept-Encoding")); ref {res} [65-65],
 assertEquals("deflate", res.header("Accept-Encoding")); ref {res} [68-68],
 assertEquals("deflate", res.header("accept-Encoding")); ref {res} [69-69]
[m[m05.11.2021 - 00:07:48.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::headers has 3 assertions: 
 assertEquals("text/html", con.request().header("content-type")); ref {con} [79-79],
 assertEquals("keep-alive", con.request().header("Connection")); ref {con} [80-80],
 assertEquals("http://example.com", con.request().header("Host")); ref {con} [81-81]
[m[m05.11.2021 - 00:07:48.500 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::sameHeadersCombineWithComma has 1 assertions: 
 assertEquals("no-cache, no-store", res.header("Cache-Control")); ref {res} [92-92]
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::multipleHeaders has 17 assertions: 
 assertTrue(req.hasHeader("Accept")); ref {req} [101-101],
 assertTrue(req.hasHeader("ACCEpt")); ref {req} [102-102],
 assertEquals("Something, Everything", req.header("accept")); ref {req} [103-103],
 assertTrue(req.hasHeader("fOO")); ref {req} [104-104],
 assertEquals("Bar", req.header("foo")); ref {req} [105-105],
 assertEquals(2, accept.size()); ref {accept} [108-108],
 assertEquals("Something", accept.get(0)); ref {accept} [109-109],
 assertEquals("Everything", accept.get(1)); ref {accept} [110-110],
 assertEquals(accept, headers.get("Accept")); ref {headers, accept} [113-113],
 assertEquals("Bar", headers.get("Foo").get(0)); ref {headers} [114-114],
 assertTrue(req.hasHeader("Accept")); ref {req} [116-116],
 assertTrue(req.hasHeaderWithValue("accept", "Something")); ref {req} [117-117],
 assertTrue(req.hasHeaderWithValue("accept", "Everything")); ref {req} [118-118],
 assertFalse(req.hasHeaderWithValue("accept", "Something for nothing")); ref {req} [119-119],
 assertEquals("Bar", headers.get("Foo").get(0)); ref {headers} [123-123],
 assertFalse(req.hasHeader("Accept")); ref {req} [124-124],
 assertTrue(headers.get("Accept") == null); ref {headers} [125-125]
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::ignoresEmptySetCookies has 1 assertions: 
 assertEquals(0, res.cookies().size()); ref {res} [134-134]
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::ignoresEmptyCookieNameAndVals has 5 assertions: 
 assertEquals(4, res.cookies().size()); ref {res} [151-151],
 assertEquals("", res.cookie("one")); ref {res} [152-152],
 assertEquals("", res.cookie("two")); ref {res} [153-153],
 assertEquals("", res.cookie("three")); ref {res} [154-154],
 assertEquals("data", res.cookie("four")); ref {res} [155-155]
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::connectWithUrl has 1 assertions: 
 assertEquals("http://example.com", con.request().url().toExternalForm()); ref {con} [160-160]
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::throwsOnMalformedUrl has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::userAgent has 2 assertions: 
 assertEquals(HttpConnection.DEFAULT_UA, con.request().header("User-Agent")); ref {con, HttpConnection, HttpConnection.DEFAULT_UA} [169-169],
 assertEquals("Mozilla", con.request().header("User-Agent")); ref {con} [171-171]
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::timeout has 2 assertions: 
 assertEquals(30 * 1000, con.request().timeout()); ref {con} [176-176],
 assertEquals(1000, con.request().timeout()); ref {con} [178-178]
[m[m05.11.2021 - 00:07:48.501 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::referrer has 1 assertions: 
 assertEquals("http://foo.com", con.request().header("Referer")); ref {con} [184-184]
[m[m05.11.2021 - 00:07:48.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::method has 2 assertions: 
 assertEquals(Connection.Method.GET, con.request().method()); ref {con, Connection.Method, Connection.Method.GET, Connection} [189-189],
 assertEquals(Connection.Method.POST, con.request().method()); ref {con, Connection.Method, Connection, Connection.Method.POST} [191-191]
[m[m05.11.2021 - 00:07:48.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::throwsOnOddData has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::data has 4 assertions: 
 assertEquals("Name", one.key()); ref {one} [206-206],
 assertEquals("Val", one.value()); ref {one} [207-207],
 assertEquals("Foo", two.key()); ref {two} [208-208],
 assertEquals("bar", two.value()); ref {two} [209-209]
[m[m05.11.2021 - 00:07:48.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::cookie has 1 assertions: 
 assertEquals("Val", con.request().cookie("Name")); ref {con} [215-215]
[m[m05.11.2021 - 00:07:48.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::inputStream has 6 assertions: 
 assertEquals("file", kv.key()); ref {kv} [220-220],
 assertEquals("thumb.jpg", kv.value()); ref {kv} [221-221],
 assertTrue(kv.hasInputStream()); ref {kv} [222-222],
 assertEquals("one", kv.key()); ref {kv} [225-225],
 assertEquals("two", kv.value()); ref {kv} [226-226],
 assertFalse(kv.hasInputStream()); ref {kv} [227-227]
[m[m05.11.2021 - 00:07:48.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::requestBody has 1 assertions: 
 assertEquals("foo", con.request().requestBody()); ref {con} [233-233]
[m[m05.11.2021 - 00:07:48.502 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::encodeUrl has 1 assertions: 
 assertEquals("http://test.com/?q=white%20space", url2.toExternalForm()); ref {url2} [239-239]
[m[m05.11.2021 - 00:07:48.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::noUrlThrowsValidationError has 2 assertions: 
 assertEquals("URL must be specified to connect", e.getMessage()); ref {e} [249-249],
 assertTrue(threw); ref {threw} [251-251]
[m[m05.11.2021 - 00:07:48.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.HttpConnectionTest::handlesHeaderEncodingOnRequest has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.503 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m05.11.2021 - 00:07:48.503 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlTreeBuilderTest::ensureSearchArraysAreSorted has 1 assertions: 
 assertArrayEquals(array, copy); ref {array, copy} [25-25]
[m[m05.11.2021 - 00:07:48.505 [INFO ] ParsingStrategy.parseTestSuite() - Found 5 test cases
[m[m05.11.2021 - 00:07:48.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.TraversorTest::filterVisit has 1 assertions: 
 assertEquals("<div><p><#text></#text></p></div><div><#text></#text></div>", accum.toString()); ref {accum} [31-31]
[m[m05.11.2021 - 00:07:48.505 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.TraversorTest::filterSkipChildren has 1 assertions: 
 assertEquals("<div><p></p></div><div><#text></#text></div>", accum.toString()); ref {accum} [52-52]
[m[m05.11.2021 - 00:07:48.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.TraversorTest::filterSkipEntirely has 1 assertions: 
 assertEquals("<div></div><div><#text></#text></div>", accum.toString()); ref {accum} [75-75]
[m[m05.11.2021 - 00:07:48.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.TraversorTest::filterRemove has 1 assertions: 
 assertEquals("<div></div>\n<div>\n There be \n</div>", doc.select("body").html()); ref {doc} [94-94]
[m[m05.11.2021 - 00:07:48.506 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.TraversorTest::filterStop has 1 assertions: 
 assertEquals("<div><p><#text></#text></p>", accum.toString()); ref {accum} [115-115]
[m[m05.11.2021 - 00:07:48.506 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.506 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.510 [INFO ] ParsingStrategy.parseTestSuite() - Found 16 test cases
[m[m05.11.2021 - 00:07:48.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::ensureSearchArraysAreSorted has 1 assertions: 
 assertArrayEquals(array, copy); ref {array, copy} [34-34]
[m[m05.11.2021 - 00:07:48.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testCharacterReferenceInRcdata has 1 assertions: 
 assertEquals("You&I", els.text()); ref {els} [43-43]
[m[m05.11.2021 - 00:07:48.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testBeforeTagName has 1 assertions: 
 assertEquals("test", els.text()); ref {els} [52-52]
[m[m05.11.2021 - 00:07:48.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testEndTagOpen has 4 assertions: 
 assertEquals("hello world</", els.text()); ref {els} [65-65],
 assertEquals("hello world", els.text()); ref {els} [70-70],
 assertEquals("fake", els.text()); ref {els} [75-75],
 assertEquals("fake", els.text()); ref {els} [80-80]
[m[m05.11.2021 - 00:07:48.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testRcdataLessthanSign has 3 assertions: 
 assertEquals("<fake>", els.text()); ref {els} [92-92],
 assertEquals("", els.text()); ref {els} [97-97],
 assertEquals("hello world</?fake", els.text()); ref {els} [102-102]
[m[m05.11.2021 - 00:07:48.510 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testRCDATAEndTagName has 1 assertions: 
 assertEquals("data", els.text()); ref {els} [111-111]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testCommentEndCoverage has 2 assertions: 
 assertEquals(" <table><tr><td></table> --! --- ", comment.getData()); ref {comment} [122-122],
 assertEquals("Hello", text.getWholeText()); ref {text} [125-125]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testCommentEndBangCoverage has 2 assertions: 
 assertEquals(" <table><tr><td></table> --!-", comment.getData()); ref {comment} [135-135],
 assertEquals("Hello", text.getWholeText()); ref {text} [138-138]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testPublicIdentifiersWithWhitespace has 1 assertions: 
 assertEquals(expectedOutput, doc.childNode(0).outerHtml()); ref {doc, expectedOutput} [156-156]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testSystemIdentifiersWithWhitespace has 1 assertions: 
 assertEquals(expectedOutput, doc.childNode(0).outerHtml()); ref {doc, expectedOutput} [177-177]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testPublicAndSystemIdentifiersWithWhitespace has 1 assertions: 
 assertEquals(expectedOutput, doc.childNode(0).outerHtml()); ref {doc, expectedOutput} [197-197]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::handlesLessInTagThanAsNewTag has 1 assertions: 
 assertEquals("<p></p><p></p><div id=\"one\"><span>Two</span></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [207-207]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testUnconsumeAtBufferBoundary has 1 assertions: 
 assertEquals(CharacterReader.readAheadLimit - 1, errorList.get(0).getPosition()); ref {CharacterReader, errorList, CharacterReader.readAheadLimit} [220-220]
[m[m05.11.2021 - 00:07:48.511 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testOpeningAngleBracketInsteadOfAttribute has 1 assertions: 
 assertEquals(6, errorList.get(0).getPosition()); ref {errorList} [230-230]
[m[m05.11.2021 - 00:07:48.512 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testMalformedSelfClosingTag has 1 assertions: 
 assertEquals(7, errorList.get(0).getPosition()); ref {errorList} [240-240]
[m[m05.11.2021 - 00:07:48.512 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserStateTest::testOpeningAngleBracketInTagName has 1 assertions: 
 assertEquals(5, errorList.get(0).getPosition()); ref {errorList} [250-250]
[m[m05.11.2021 - 00:07:48.519 [INFO ] ParsingStrategy.parseTestSuite() - Found 31 test cases
[m[m05.11.2021 - 00:07:48.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::canConnectToLocalServer has 1 assertions: 
 assertEquals("Hello, World!", p.text()); ref {p} [58-58]
[m[m05.11.2021 - 00:07:48.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::fetchURl has 1 assertions: 
 assertTrue(doc.title().contains("Environment Variables")); ref {doc} [64-64]
[m[m05.11.2021 - 00:07:48.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::fetchURIWithWhitespace has 1 assertions: 
 assertTrue(doc.title().contains("Environment Variables")); ref {doc} [71-71]
[m[m05.11.2021 - 00:07:48.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::exceptOnUnsupportedProtocol has 2 assertions: 
 assertEquals("java.net.MalformedURLException: Only http & https protocols supported", e.toString()); ref {e} [82-82],
 assertTrue(threw); ref {threw} [85-85]
[m[m05.11.2021 - 00:07:48.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::throwsExceptionOn404 has 4 assertions: 
 assertEquals("org.jsoup.HttpStatusException: HTTP error fetching URL. Status=404, URL=" + e.getUrl(), e.toString()); ref {e} [103-103],
 assertTrue(e.getUrl().startsWith(url)); ref {e, url} [104-104],
 assertEquals(404, e.getStatusCode()); ref {e} [105-105],
 assertTrue(threw); ref {threw} [108-108]
[m[m05.11.2021 - 00:07:48.520 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::ignoresExceptionIfSoConfigured has 2 assertions: 
 assertEquals(404, res.statusCode()); ref {res} [119-119],
 assertEquals("Webserver Environment Variables", doc.title()); ref {doc} [120-120]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::doesPost has 6 assertions: 
 assertEquals("POST", ihVal("Method", doc)); ref {doc} [130-130],
 assertEquals("gzip", ihVal("Accept-Encoding", doc)); ref {doc} [131-131],
 assertEquals("auth=token", ihVal("Cookie", doc)); ref {doc} [132-132],
 assertEquals("度一下", ihVal("百", doc)); ref {doc} [133-133],
 assertEquals("Jsoup, Jonathan", ihVal("uname", doc)); ref {doc} [134-134],
 assertEquals("application/x-www-form-urlencoded; charset=UTF-8", ihVal("Content-Type", doc)); ref {doc} [135-135]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::doesPostMultipartWithoutInputstream has 4 assertions: 
 assertTrue(ihVal("Content-Type", doc).contains(MULTIPART_FORM_DATA)); ref {MULTIPART_FORM_DATA, doc} [146-146],
 // should be automatically set
assertTrue(ihVal("Content-Type", doc).contains("boundary")); ref {doc} [148-148],
 assertEquals("Jsoup, Jonathan", ihVal("uname", doc)); ref {doc} [149-149],
 assertEquals("度一下", ihVal("百", doc)); ref {doc} [150-150]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::sendsRequestBodyJsonWithData has 4 assertions: 
 assertEquals("POST", ihVal("Method", doc)); ref {doc} [162-162],
 assertEquals("application/json", ihVal("Content-Type", doc)); ref {doc} [163-163],
 assertEquals("foo=true", ihVal("Query String", doc)); ref {doc} [164-164],
 assertEquals(body, ihVal("Post Data", doc)); ref {doc, body} [165-165]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::sendsRequestBodyJsonWithoutData has 3 assertions: 
 assertEquals("POST", ihVal("Method", doc)); ref {doc} [176-176],
 assertEquals("application/json", ihVal("Content-Type", doc)); ref {doc} [177-177],
 assertEquals(body, ihVal("Post Data", doc)); ref {doc, body} [178-178]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::sendsRequestBody has 3 assertions: 
 assertEquals("POST", ihVal("Method", doc)); ref {doc} [189-189],
 assertEquals("text/plain", ihVal("Content-Type", doc)); ref {doc} [190-190],
 assertEquals(body, ihVal("Post Data", doc)); ref {doc, body} [191-191]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::sendsRequestBodyWithUrlParams has 3 assertions: 
 assertEquals("POST", ihVal("Method", doc)); ref {doc} [203-203],
 assertEquals("uname=Jsoup&uname=Jonathan&%E7%99%BE=%E5%BA%A6%E4%B8%80%E4%B8%8B", ihVal("Query String", doc)); ref {doc} [204-204],
 assertEquals(body, ihVal("Post Data", doc)); ref {doc, body} [205-205]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::doesGet has 4 assertions: 
 assertEquals("what=the&what=about+%26+me%3F", ihVal("Query String", doc)); ref {doc} [216-216],
 assertEquals("the, about & me?", ihVal("what", doc)); ref {doc} [217-217],
 assertEquals("Mozilla", ihVal("User-Agent", doc)); ref {doc} [218-218],
 assertEquals("http://example.com", ihVal("Referer", doc)); ref {doc} [219-219]
[m[m05.11.2021 - 00:07:48.521 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::doesPut has 3 assertions: 
 assertEquals("PUT", ihVal("Method", doc)); ref {doc} [231-231],
 assertEquals("gzip", ihVal("Accept-Encoding", doc)); ref {doc} [232-232],
 assertEquals("auth=token", ihVal("Cookie", doc)); ref {doc} [233-233]
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::postFiles has 11 assertions: 
 assertEquals("4", ihVal("Parts", res)); ref {res} [252-252],
 assertEquals("application/octet-stream", ihVal("Part secondPart ContentType", res)); ref {res} [254-254],
 assertEquals("secondPart", ihVal("Part secondPart Name", res)); ref {res} [255-255],
 assertEquals("google-ipod.html", ihVal("Part secondPart Filename", res)); ref {res} [256-256],
 assertEquals("43963", ihVal("Part secondPart Size", res)); ref {res} [257-257],
 assertEquals("image/jpeg", ihVal("Part firstPart ContentType", res)); ref {res} [259-259],
 assertEquals("firstPart", ihVal("Part firstPart Name", res)); ref {res} [260-260],
 assertEquals("thumb.jpg", ihVal("Part firstPart Filename", res)); ref {res} [261-261],
 assertEquals("1052", ihVal("Part firstPart Size", res)); ref {res} [262-262],
 assertEquals("Jay", ihVal("firstname", res)); ref {res} [264-264],
 assertEquals("Soup", ihVal("surname", res)); ref {res} [265-265]
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::multipleParsesOkAfterBufferUp has 2 assertions: 
 assertTrue(doc.title().contains("Environment")); ref {doc} [283-283],
 assertTrue(doc2.title().contains("Environment")); ref {doc2} [286-286]
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::bodyAfterParseThrowsValidationError has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::bodyAndBytesAvailableBeforeParse has 3 assertions: 
 assertTrue(body.contains("Environment")); ref {body} [298-298],
 assertTrue(bytes.length > 100); ref {bytes, bytes.length} [300-300],
 assertTrue(doc.title().contains("Environment")); ref {doc} [303-303]
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::parseParseThrowsValidates has 1 assertions: 
 assertTrue(doc.title().contains("Environment")); ref {doc} [309-309]
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::multiCookieSet has 3 assertions: 
 assertEquals("asdfg123", cookies.get("token")); ref {cookies} [325-325],
 assertEquals("jhy", cookies.get("uid")); ref {cookies} [326-326],
 assertEquals("token=asdfg123; uid=jhy", ihVal("Cookie", doc)); ref {doc} [330-330]
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::supportsDeflate has 2 assertions: 
 assertEquals("deflate", res.header("Content-Encoding")); ref {res} [336-336],
 assertEquals("Hello, World!", doc.selectFirst("p").text()); ref {doc} [339-339]
[m[m05.11.2021 - 00:07:48.522 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::handlesLargerContentLengthParseRead has 2 assertions: 
 assertEquals("Something", document.title()); ref {document} [352-352],
 assertEquals(0, document.select("p").size()); ref {document} [353-353]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::handlesWrongContentLengthDuringBufferedRead has 1 assertions: 
 assertEquals(0, doc.select("p").size()); ref {doc} [368-368]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::handlesRedirect has 2 assertions: 
 assertEquals("Hello, World!", p.text()); ref {p} [377-377],
 assertEquals(HelloServlet.Url, doc.location()); ref {HelloServlet.Url, HelloServlet, doc} [379-379]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::handlesEmptyRedirect has 2 assertions: 
 assertTrue(e.getMessage().contains("Too many redirects")); ref {e} [388-388],
 assertTrue(threw); ref {threw} [391-391]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::doesNotPostFor302 has 3 assertions: 
 assertEquals(EchoServlet.Url, doc.location()); ref {EchoServlet.Url, EchoServlet, doc} [400-400],
 assertEquals("GET", ihVal("Method", doc)); ref {doc} [401-401],
 // data not sent
assertNull(ihVal("Hello", doc)); ref {doc} [402-402]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::doesPostFor307 has 3 assertions: 
 assertEquals(EchoServlet.Url, doc.location()); ref {EchoServlet.Url, EchoServlet, doc} [412-412],
 assertEquals("POST", ihVal("Method", doc)); ref {doc} [413-413],
 assertEquals("there", ihVal("Hello", doc)); ref {doc} [414-414]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::getUtf8Bom has 2 assertions: 
 assertEquals("UTF-8", con.response().charset()); ref {con} [422-422],
 assertEquals("OK", doc.title()); ref {doc} [423-423]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::testBinaryContentTypeThrowsException has 2 assertions: 
 assertEquals("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", e.getMessage()); ref {e} [437-437],
 assertTrue(threw); ref {threw} [439-439]
[m[m05.11.2021 - 00:07:48.523 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::canFetchBinaryAsBytes has 1 assertions: 
 assertEquals(1052, bytes.length); ref {bytes, bytes.length} [450-450]
[m[m05.11.2021 - 00:07:48.524 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.integration.ConnectTest::handlesUnknownEscapesAcrossBuffer has 3 assertions: 
 assertEquals(14766, text.length()); ref {text} [465-465],
 assertEquals(text, docFromLocalServer.body().text()); ref {text, docFromLocalServer} [466-466],
 assertEquals(text, docFromFileRead.body().text()); ref {docFromFileRead, text} [467-467]
[m[m05.11.2021 - 00:07:48.532 [INFO ] ParsingStrategy.parseTestSuite() - Found 30 test cases
[m[m05.11.2021 - 00:07:48.532 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::setTextPreservesDocumentStructure has 3 assertions: 
 assertEquals("Replaced", doc.text()); ref {doc} [34-34],
 assertEquals("Replaced", doc.body().text()); ref {doc} [35-35],
 assertEquals(1, doc.select("head").size()); ref {doc} [36-36]
[m[m05.11.2021 - 00:07:48.532 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testTitles has 7 assertions: 
 assertEquals("", noTitle.title()); ref {noTitle} [43-43],
 assertEquals("Hello", noTitle.title()); ref {noTitle} [45-45],
 assertEquals("Hello", noTitle.select("title").first().text()); ref {noTitle} [46-46],
 assertEquals("First", withTitle.title()); ref {withTitle} [48-48],
 assertEquals("Hello", withTitle.title()); ref {withTitle} [50-50],
 assertEquals("Hello", withTitle.select("title").first().text()); ref {withTitle} [51-51],
 assertEquals("Hello there now", normaliseTitle.title()); ref {normaliseTitle} [54-54]
[m[m05.11.2021 - 00:07:48.532 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testOutputEncoding has 5 assertions: 
 // default is utf-8
assertEquals("<p title=\"π\">π &amp; &lt; &gt; </p>", doc.body().html()); ref {doc} [60-60],
 assertEquals("UTF-8", doc.outputSettings().charset().name()); ref {doc} [61-61],
 assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode()); ref {Entities.EscapeMode.base, doc, Entities.EscapeMode, Entities} [64-64],
 assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt; </p>", doc.body().html()); ref {doc} [65-65],
 assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt; </p>", doc.body().html()); ref {doc} [68-68]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testXhtmlReferences has 1 assertions: 
 assertEquals("&lt; &gt; &amp; \" ' ×", doc.body().html()); ref {doc} [74-74]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testNormalisesStructure has 1 assertions: 
 assertEquals("<html><head><script>one</script><noscript>&lt;p&gt;two</noscript></head><body><p>three</p><p>four</p></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [79-79]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testClone has 3 assertions: 
 assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html())); ref {TextUtil, clone} [86-86],
 assertEquals("<html><head><title>Hello there</title> </head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html())); ref {TextUtil, clone} [89-89],
 assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [90-90]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testClonesDeclarations has 2 assertions: 
 assertEquals(doc.html(), clone.html()); ref {clone, doc} [97-97],
 assertEquals("<!doctype html><html><head><title>Doctype test</title></head><body></body></html>", TextUtil.stripNewlines(clone.html())); ref {TextUtil, clone} [98-99]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testLocation has 4 assertions: 
 assertEquals("http://www.yahoo.co.jp/index.html", location); ref {location} [107-107],
 assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/", baseUri); ref {baseUri} [108-108],
 assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", location); ref {location} [113-113],
 assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp", baseUri); ref {baseUri} [114-114]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testHtmlAndXmlSyntax has 2 assertions: 
 assertEquals("<!doctype html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async checked src=\"&amp;<>&quot;\">&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html()); ref {doc} [122-128],
 assertEquals("<!DOCTYPE html>\n" + "<html>\n" + " <head></head>\n" + " <body>\n" + "  <img async=\"\" checked=\"checked\" src=\"&amp;<>&quot;\" />&lt;&gt;&amp;\"<foo />bar\n" + " </body>\n" + "</html>", doc.html()); ref {doc} [131-137]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::htmlParseDefaultsToHtmlOutputSyntax has 1 assertions: 
 assertEquals(Syntax.html, doc.outputSettings().syntax()); ref {Syntax.html, doc, Syntax} [142-142]
[m[m05.11.2021 - 00:07:48.533 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testHtmlAppendable has 1 assertions: 
 assertEquals(htmlContent, document.html(new StringWriter()).toString()); ref {document, htmlContent} [152-152]
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testOverflowClone has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::DocumentsWithSameContentAreEqual has 4 assertions: 
 assertFalse(docA.equals(docB)); ref {docB, docA} [173-173],
 assertTrue(docA.equals(docA)); ref {docA} [174-174],
 assertEquals(docA.hashCode(), docA.hashCode()); ref {docA} [175-175],
 assertFalse(docA.hashCode() == docC.hashCode()); ref {docC, docA} [176-176]
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::DocumentsWithSameContentAreVerifiable has 2 assertions: 
 assertTrue(docA.hasSameValue(docB)); ref {docB, docA} [184-184],
 assertFalse(docA.hasSameValue(docC)); ref {docC, docA} [185-185]
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateUtf8 has 4 assertions: 
 assertEquals(htmlCharsetUTF8, doc.toString()); ref {htmlCharsetUTF8, doc} [200-200],
 assertEquals(charsetUtf8, doc.charset().name()); ref {charsetUtf8, doc} [203-203],
 assertEquals(charsetUtf8, selectedElement.attr("charset")); ref {charsetUtf8, selectedElement} [204-204],
 assertEquals(doc.charset(), doc.outputSettings().charset()); ref {doc} [205-205]
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateIso8859 has 4 assertions: 
 assertEquals(htmlCharsetISO, doc.toString()); ref {doc, htmlCharsetISO} [220-220],
 assertEquals(charsetIso8859, doc.charset().name()); ref {doc, charsetIso8859} [223-223],
 assertEquals(charsetIso8859, selectedElement.attr("charset")); ref {selectedElement, charsetIso8859} [224-224],
 assertEquals(doc.charset(), doc.outputSettings().charset()); ref {doc} [225-225]
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateNoCharset has 2 assertions: 
 assertEquals(charsetUtf8, docNoCharset.select("meta[charset]").first().attr("charset")); ref {charsetUtf8, docNoCharset} [234-234],
 assertEquals(htmlCharsetUTF8, docNoCharset.toString()); ref {htmlCharsetUTF8, docNoCharset} [242-242]
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateDisabled has 2 assertions: 
 assertEquals(htmlNoCharset, docDisabled.toString()); ref {docDisabled, htmlNoCharset} [253-253],
 assertNull(docDisabled.select("meta[charset]").first()); ref {docDisabled} [254-254]
[m[m05.11.2021 - 00:07:48.534 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateDisabledNoChanges has 5 assertions: 
 assertEquals(htmlCharset, doc.toString()); ref {htmlCharset, doc} [268-268],
 assertNotNull(selectedElement); ref {selectedElement} [271-271],
 assertEquals("dontTouch", selectedElement.attr("charset")); ref {selectedElement} [272-272],
 assertNotNull(selectedElement); ref {selectedElement} [275-275],
 assertEquals("dontTouch", selectedElement.attr("content")); ref {selectedElement} [276-276]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateEnabledAfterCharsetChange has 2 assertions: 
 assertEquals(charsetUtf8, selectedElement.attr("charset")); ref {charsetUtf8, selectedElement} [285-285],
 assertTrue(doc.select("meta[name=charset]").isEmpty()); ref {doc} [286-286]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateCleanup has 1 assertions: 
 assertEquals(htmlCharsetUTF8, doc.toString()); ref {htmlCharsetUTF8, doc} [302-302]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlUtf8 has 4 assertions: 
 assertEquals(xmlCharsetUTF8, doc.toString()); ref {xmlCharsetUTF8, doc} [315-315],
 assertEquals(charsetUtf8, doc.charset().name()); ref {charsetUtf8, doc} [318-318],
 assertEquals(charsetUtf8, selectedNode.attr("encoding")); ref {charsetUtf8, selectedNode} [319-319],
 assertEquals(doc.charset(), doc.outputSettings().charset()); ref {doc} [320-320]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlIso8859 has 4 assertions: 
 assertEquals(xmlCharsetISO, doc.toString()); ref {doc, xmlCharsetISO} [333-333],
 assertEquals(charsetIso8859, doc.charset().name()); ref {doc, charsetIso8859} [336-336],
 assertEquals(charsetIso8859, selectedNode.attr("encoding")); ref {selectedNode, charsetIso8859} [337-337],
 assertEquals(doc.charset(), doc.outputSettings().charset()); ref {doc} [338-338]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlNoCharset has 2 assertions: 
 assertEquals(xmlCharsetUTF8, doc.toString()); ref {xmlCharsetUTF8, doc} [351-351],
 assertEquals(charsetUtf8, selectedNode.attr("encoding")); ref {charsetUtf8, selectedNode} [354-354]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlDisabled has 1 assertions: 
 assertEquals(xmlNoCharset, doc.toString()); ref {xmlNoCharset, doc} [364-364]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdateXmlDisabledNoChanges has 3 assertions: 
 assertEquals(xmlCharset, doc.toString()); ref {xmlCharset, doc} [375-375],
 assertEquals("dontTouch", selectedNode.attr("encoding")); ref {selectedNode} [378-378],
 assertEquals("dontTouch", selectedNode.attr("version")); ref {selectedNode} [379-379]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testMetaCharsetUpdatedDisabledPerDefault has 1 assertions: 
 assertFalse(doc.updateMetaCharsetElement()); ref {doc} [385-385]
[m[m05.11.2021 - 00:07:48.535 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testShiftJisRoundtrip has 2 assertions: 
 assertFalse("Should not have contained a '?'.", output.contains("?")); ref {output} [429-429],
 assertTrue("Should have contained a '&#xa0;' or a '&nbsp;'.", output.contains("&#xa0;") || output.contains("&nbsp;")); ref {output} [430-431]
[m[m05.11.2021 - 00:07:48.536 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::parseAndHtmlOnDifferentThreads has 4 assertions: 
 assertEquals(html, p.outerHtml()); ref {p, html} [441-441],
 assertEquals(html, out[0]); ref {html, out} [453-453],
 assertEquals(StandardCharsets.US_ASCII, doc.outputSettings().charset()); ref {StandardCharsets.US_ASCII, StandardCharsets, doc} [454-454],
 assertEquals(asci, p.outerHtml()); ref {p, asci} [455-455]
[m[m05.11.2021 - 00:07:48.536 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.DocumentTest::testDocumentTypeGet has 2 assertions: 
 assertNotNull(documentType); ref {documentType} [462-462],
 assertEquals("html", documentType.name()); ref {documentType} [463-463]
[m[m05.11.2021 - 00:07:48.536 [INFO ] ParsingStrategy.parseTestSuite() - Found 1 test case
[m[m05.11.2021 - 00:07:48.536 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.ParserIT::testIssue1251 has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.540 [INFO ] ParsingStrategy.parseTestSuite() - Found 12 test cases
[m[m05.11.2021 - 00:07:48.540 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::bufferUpInAttributeVal has 2 assertions: 
 assertTrue("Handles for quote " + quote, src.contains("X")); ref {quote, src} [46-46],
 assertTrue(src.contains(tail)); ref {src, tail} [47-47]
[m[m05.11.2021 - 00:07:48.540 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::handleSuperLargeTagNames has 4 assertions: 
 assertEquals(1, els.size()); ref {els} [63-63],
 assertNotNull(el); ref {el} [65-65],
 assertEquals("One", el.text()); ref {el} [66-66],
 assertEquals(tag, el.tagName()); ref {el, tag} [67-67]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::handleSuperLargeAttributeName has 5 assertions: 
 assertEquals(1, els.size()); ref {els} [80-80],
 assertNotNull(el); ref {el} [82-82],
 assertEquals("One", el.text()); ref {el} [83-83],
 assertEquals(attrName.toLowerCase(), attribute.getKey()); ref {attribute, attrName} [85-85],
 assertEquals("foo", attribute.getValue()); ref {attribute} [86-86]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::handleLargeText has 3 assertions: 
 assertEquals(1, els.size()); ref {els} [99-99],
 assertNotNull(el); ref {el} [102-102],
 assertEquals(text, el.text()); ref {el, text} [103-103]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::handleLargeComment has 3 assertions: 
 assertEquals(1, els.size()); ref {els} [116-116],
 assertNotNull(el); ref {el} [119-119],
 assertEquals(" " + comment + " ", child.getData()); ref {comment, child} [121-121]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::handleLargeCdata has 4 assertions: 
 assertEquals(1, els.size()); ref {els} [134-134],
 assertNotNull(el); ref {el} [137-137],
 assertEquals(cdata, el.text()); ref {el, cdata} [139-139],
 assertEquals(cdata, child.getWholeText()); ref {cdata, child} [140-140]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::handleLargeTitle has 5 assertions: 
 assertEquals(1, els.size()); ref {els} [153-153],
 assertNotNull(el); ref {el} [156-156],
 assertEquals(title, el.text()); ref {el, title} [158-158],
 assertEquals(title, child.getWholeText()); ref {title, child} [159-159],
 assertEquals(title, doc.title()); ref {doc, title} [160-160]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::cp1252Entities has 3 assertions: 
 assertEquals("\u20ac", Jsoup.parse("&#0128;").text()); ref {Jsoup} [164-164],
 assertEquals("\u201a", Jsoup.parse("&#0130;").text()); ref {Jsoup} [165-165],
 assertEquals("\u20ac", Jsoup.parse("&#x80;").text()); ref {Jsoup} [166-166]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::cp1252EntitiesProduceError has 2 assertions: 
 assertEquals("\u20ac", parser.parseInput("<html><body>&#0128;</body></html>", "").text()); ref {parser} [172-172],
 assertEquals(1, parser.getErrors().size()); ref {parser} [173-173]
[m[m05.11.2021 - 00:07:48.541 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::cp1252SubstitutionTable has 2 assertions: 
 assertEquals(1, s.length()); ref {s} [179-179],
 assertEquals("At: " + i, s.charAt(0), Tokeniser.win1252Extensions[i]); ref {s, Tokeniser.win1252Extensions, i, Tokeniser} [184-184]
[m[m05.11.2021 - 00:07:48.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::canParseVeryLongBogusComment has 2 assertions: 
 assertTrue("Expected comment node", commentNode instanceof Comment); ref {commentNode} [200-200],
 assertEquals(expectedCommentData, ((Comment) commentNode).getData()); ref {expectedCommentData, commentNode} [201-201]
[m[m05.11.2021 - 00:07:48.542 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokeniserTest::canParseCdataEndingAtEdgeOfBuffer has 2 assertions: 
 assertTrue("Expected CDATA node", cdataNode instanceof CDataNode); ref {cdataNode} [217-217],
 assertEquals(cdataContents, ((CDataNode) cdataNode).text()); ref {cdataContents, cdataNode} [218-218]
[m[m05.11.2021 - 00:07:48.542 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.542 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.545 [INFO ] ParsingStrategy.parseTestSuite() - Found 15 test cases
[m[m05.11.2021 - 00:07:48.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::testCharset has 6 assertions: 
 assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 ")); ref {DataUtil} [24-24],
 assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8")); ref {DataUtil} [25-25],
 assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1")); ref {DataUtil} [26-26],
 assertEquals(null, DataUtil.getCharsetFromContentType("text/html")); ref {DataUtil} [27-27],
 assertEquals(null, DataUtil.getCharsetFromContentType(null)); ref {DataUtil} [28-28],
 assertEquals(null, DataUtil.getCharsetFromContentType("text/html;charset=Unknown")); ref {DataUtil} [29-29]
[m[m05.11.2021 - 00:07:48.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::testQuotedCharset has 5 assertions: 
 assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\"")); ref {DataUtil} [33-33],
 assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\"")); ref {DataUtil} [34-34],
 assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\"")); ref {DataUtil} [35-35],
 assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\"")); ref {DataUtil} [36-36],
 assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'")); ref {DataUtil} [37-37]
[m[m05.11.2021 - 00:07:48.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::discardsSpuriousByteOrderMark has 1 assertions: 
 assertEquals("One", doc.head().text()); ref {doc} [56-56]
[m[m05.11.2021 - 00:07:48.545 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::discardsSpuriousByteOrderMarkWhenNoCharsetSet has 2 assertions: 
 assertEquals("One", doc.head().text()); ref {doc} [62-62],
 assertEquals("UTF-8", doc.outputSettings().charset().displayName()); ref {doc} [63-63]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::shouldNotThrowExceptionOnEmptyCharset has 2 assertions: 
 assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=")); ref {DataUtil} [68-68],
 assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=;")); ref {DataUtil} [69-69]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags has 1 assertions: 
 assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1, charset=1251")); ref {DataUtil} [74-74]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::shouldCorrectCharsetForDuplicateCharsetString has 1 assertions: 
 assertEquals("iso-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=charset=iso-8859-1")); ref {DataUtil} [79-79]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::shouldReturnNullForIllegalCharsetNames has 1 assertions: 
 assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=$HJKDF§$/(")); ref {DataUtil} [84-84]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::generatesMimeBoundaries has 3 assertions: 
 assertEquals(DataUtil.boundaryLength, m1.length()); ref {DataUtil, m1, DataUtil.boundaryLength} [92-92],
 assertEquals(DataUtil.boundaryLength, m2.length()); ref {DataUtil, m2, DataUtil.boundaryLength} [93-93],
 assertNotSame(m1, m2); ref {m1, m2} [94-94]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::wrongMetaCharsetFallback has 1 assertions: 
 assertEquals(expected, doc.toString()); ref {expected, doc} [110-110]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::secondMetaElementWithContentTypeContainsCharsetParameter has 1 assertions: 
 assertEquals("한국어", doc.body().text()); ref {doc} [122-122]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::firstMetaElementWithCharsetShouldBeUsedForDecoding has 1 assertions: 
 assertEquals("Übergrößenträger", doc.body().text()); ref {doc} [134-134]
[m[m05.11.2021 - 00:07:48.546 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::supportsBOMinFiles has 8 assertions: 
 assertTrue(doc.title().contains("UTF-16BE")); ref {doc} [142-142],
 assertTrue(doc.text().contains("가각갂갃간갅")); ref {doc} [143-143],
 assertTrue(doc.title().contains("UTF-16LE")); ref {doc} [147-147],
 assertTrue(doc.text().contains("가각갂갃간갅")); ref {doc} [148-148],
 assertTrue(doc.title().contains("UTF-32BE")); ref {doc} [152-152],
 assertTrue(doc.text().contains("가각갂갃간갅")); ref {doc} [153-153],
 assertTrue(doc.title().contains("UTF-32LE")); ref {doc} [157-157],
 assertTrue(doc.text().contains("가각갂갃간갅")); ref {doc} [158-158]
[m[m05.11.2021 - 00:07:48.547 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::supportsUTF8BOM has 1 assertions: 
 assertEquals("OK", doc.head().select("title").text()); ref {doc} [165-165]
[m[m05.11.2021 - 00:07:48.547 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.helper.DataUtilTest::supportsXmlCharsetDeclaration has 1 assertions: 
 assertEquals("Hellö Wörld!", doc.body().text()); ref {doc} [178-178]
[m[m05.11.2021 - 00:07:48.547 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.564 [INFO ] ParsingStrategy.parseTestSuite() - Found 76 test cases
[m[m05.11.2021 - 00:07:48.564 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByTag has 5 assertions: 
 assertEquals(3, els.size()); ref {els} [25-25],
 assertEquals("1", els.get(0).id()); ref {els} [26-26],
 assertEquals("2", els.get(1).id()); ref {els} [27-27],
 assertEquals("3", els.get(2).id()); ref {els} [28-28],
 assertEquals(0, none.size()); ref {none} [31-31]
[m[m05.11.2021 - 00:07:48.565 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testById has 4 assertions: 
 assertEquals(2, els.size()); ref {els} [36-36],
 assertEquals("Hello", els.get(0).text()); ref {els} [37-37],
 assertEquals("Foo two!", els.get(1).text()); ref {els} [38-38],
 assertEquals(0, none.size()); ref {none} [41-41]
[m[m05.11.2021 - 00:07:48.565 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByClass has 5 assertions: 
 assertEquals(2, els.size()); ref {els} [46-46],
 assertEquals("0", els.get(0).id()); ref {els} [47-47],
 assertEquals("1", els.get(1).id()); ref {els} [48-48],
 assertEquals(0, none.size()); ref {none} [51-51],
 assertEquals(1, els2.size()); ref {els2} [54-54]
[m[m05.11.2021 - 00:07:48.565 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByClassCaseInsensitive has 3 assertions: 
 assertEquals(elsFromAttr.size(), elsFromClass.size()); ref {elsFromClass, elsFromAttr} [62-62],
 assertEquals(3, elsFromClass.size()); ref {elsFromClass} [63-63],
 assertEquals("Two", elsFromClass.get(1).text()); ref {elsFromClass} [64-64]
[m[m05.11.2021 - 00:07:48.565 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByAttribute has 17 assertions: 
 assertEquals(4, withTitle.size()); ref {withTitle} [73-73],
 assertEquals(1, foo.size()); ref {foo} [76-76],
 assertEquals(1, foo2.size()); ref {foo2} [79-79],
 assertEquals(1, foo3.size()); ref {foo3} [82-82],
 assertEquals(1, dataName.size()); ref {dataName} [85-85],
 assertEquals("with spaces", dataName.first().attr("data-name")); ref {dataName} [86-86],
 assertEquals(5, not.size()); ref {not} [89-89],
 assertEquals("Foo", not.first().attr("title")); ref {not} [90-90],
 assertEquals(2, starts.size()); ref {starts} [93-93],
 assertEquals("Bar", starts.first().attr("title")); ref {starts} [94-94],
 assertEquals("Balim", starts.last().attr("title")); ref {starts} [95-95],
 assertEquals(2, ends.size()); ref {ends} [98-98],
 assertEquals("Balim", ends.first().attr("title")); ref {ends} [99-99],
 assertEquals("SLIM", ends.last().attr("title")); ref {ends} [100-100],
 assertEquals(2, contains.size()); ref {contains} [103-103],
 assertEquals("Balim", contains.first().attr("title")); ref {contains} [104-104],
 assertEquals("SLIM", contains.last().attr("title")); ref {contains} [105-105]
[m[m05.11.2021 - 00:07:48.565 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testNamespacedTag has 10 assertions: 
 assertEquals(2, byTag.size()); ref {byTag} [111-111],
 assertEquals("1", byTag.first().id()); ref {byTag} [112-112],
 assertEquals("2", byTag.last().id()); ref {byTag} [113-113],
 assertEquals(1, byAttr.size()); ref {byAttr} [116-116],
 assertEquals("2", byAttr.last().id()); ref {byAttr} [117-117],
 assertEquals(1, byTagAttr.size()); ref {byTagAttr} [120-120],
 assertEquals("2", byTagAttr.last().id()); ref {byTagAttr} [121-121],
 assertEquals(2, byContains.size()); ref {byContains} [124-124],
 assertEquals("1", byContains.first().id()); ref {byContains} [125-125],
 assertEquals("2", byContains.last().id()); ref {byContains} [126-126]
[m[m05.11.2021 - 00:07:48.565 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testWildcardNamespacedTag has 10 assertions: 
 assertEquals(2, byTag.size()); ref {byTag} [132-132],
 assertEquals("1", byTag.first().id()); ref {byTag} [133-133],
 assertEquals("2", byTag.last().id()); ref {byTag} [134-134],
 assertEquals(1, byAttr.size()); ref {byAttr} [137-137],
 assertEquals("2", byAttr.last().id()); ref {byAttr} [138-138],
 assertEquals(1, byTagAttr.size()); ref {byTagAttr} [141-141],
 assertEquals("2", byTagAttr.last().id()); ref {byTagAttr} [142-142],
 assertEquals(2, byContains.size()); ref {byContains} [145-145],
 assertEquals("1", byContains.first().id()); ref {byContains} [146-146],
 assertEquals("2", byContains.last().id()); ref {byContains} [147-147]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testWildcardNamespacedXmlTag has 10 assertions: 
 assertEquals(2, byTag.size()); ref {byTag} [157-157],
 assertEquals("1", byTag.first().id()); ref {byTag} [158-158],
 assertEquals("2", byTag.last().id()); ref {byTag} [159-159],
 assertEquals(1, byAttr.size()); ref {byAttr} [162-162],
 assertEquals("2", byAttr.last().id()); ref {byAttr} [163-163],
 assertEquals(1, byTagAttr.size()); ref {byTagAttr} [166-166],
 assertEquals("2", byTagAttr.last().id()); ref {byTagAttr} [167-167],
 assertEquals(2, byContains.size()); ref {byContains} [170-170],
 assertEquals("1", byContains.first().id()); ref {byContains} [171-171],
 assertEquals("2", byContains.last().id()); ref {byContains} [172-172]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testWildCardNamespacedCaseVariations has 6 assertions: 
 assertEquals(els1, els2); ref {els2, els1} [182-182],
 assertEquals(els3, els4); ref {els4, els3} [183-183],
 assertEquals("One", els1.text()); ref {els1} [184-184],
 assertEquals(1, els1.size()); ref {els1} [185-185],
 assertEquals("Two", els3.text()); ref {els3} [186-186],
 assertEquals(1, els2.size()); ref {els2} [187-187]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByAttributeStarting has 6 assertions: 
 assertEquals(2, withData.size()); ref {withData} [193-193],
 assertEquals("1", withData.first().id()); ref {withData} [194-194],
 assertEquals("2", withData.last().id()); ref {withData} [195-195],
 assertEquals(1, withData.size()); ref {withData} [198-198],
 assertEquals("2", withData.first().id()); ref {withData} [199-199],
 assertEquals(1, doc.select("[^attrib]").size()); ref {doc} [201-201]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByAttributeRegex has 4 assertions: 
 assertEquals(3, imgs.size()); ref {imgs} [207-207],
 assertEquals("1", imgs.get(0).id()); ref {imgs} [208-208],
 assertEquals("2", imgs.get(1).id()); ref {imgs} [209-209],
 assertEquals("3", imgs.get(2).id()); ref {imgs} [210-210]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByAttributeRegexCharacterClass has 3 assertions: 
 assertEquals(2, imgs.size()); ref {imgs} [216-216],
 assertEquals("1", imgs.get(0).id()); ref {imgs} [217-217],
 assertEquals("4", imgs.get(1).id()); ref {imgs} [218-218]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testByAttributeRegexCombined has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [224-224],
 assertEquals("Hello", els.text()); ref {els} [225-225]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testCombinedWithContains has 3 assertions: 
 assertEquals(1, els.size()); ref {els} [231-231],
 assertEquals("Two +", els.text()); ref {els} [232-232],
 assertEquals("p", els.first().tagName()); ref {els} [233-233]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testAllElements has 3 assertions: 
 assertEquals(8, allDoc.size()); ref {allDoc} [241-241],
 assertEquals(3, allUnderDiv.size()); ref {allUnderDiv} [242-242],
 assertEquals("p", allUnderDiv.first().tagName()); ref {allUnderDiv} [243-243]
[m[m05.11.2021 - 00:07:48.566 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testAllWithClass has 1 assertions: 
 assertEquals(2, ps.size()); ref {ps} [250-250]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testGroupOr has 10 assertions: 
 assertEquals(5, els.size()); ref {els} [258-258],
 assertEquals("div", els.get(0).tagName()); ref {els} [259-259],
 assertEquals("foo", els.get(0).attr("title")); ref {els} [260-260],
 assertEquals("div", els.get(1).tagName()); ref {els} [261-261],
 assertEquals("bar", els.get(1).attr("title")); ref {els} [262-262],
 assertEquals("div", els.get(2).tagName()); ref {els} [263-263],
 // missing attributes come back as empty string
assertEquals(0, els.get(2).attr("title").length()); ref {els} [264-264],
 assertFalse(els.get(2).hasAttr("title")); ref {els} [265-265],
 assertEquals("p", els.get(3).tagName()); ref {els} [266-266],
 assertEquals("span", els.get(4).tagName()); ref {els} [267-267]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testGroupOrAttribute has 4 assertions: 
 assertEquals(3, els.size()); ref {els} [274-274],
 assertEquals("1", els.get(0).id()); ref {els} [275-275],
 assertEquals("2", els.get(1).id()); ref {els} [276-276],
 assertEquals("foo", els.get(2).attr("title")); ref {els} [277-277]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::descendant has 7 assertions: 
 assertEquals(2, els.size()); ref {els} [286-286],
 assertEquals("Hello", els.get(0).text()); ref {els} [287-287],
 assertEquals("There", els.get(1).text()); ref {els} [288-288],
 assertEquals(1, p.size()); ref {p} [291-291],
 assertEquals("Hello", p.get(0).text()); ref {p} [292-292],
 assertEquals(0, empty.size()); ref {empty} [295-295],
 assertEquals(0, aboveRoot.size()); ref {aboveRoot} [298-298]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::and has 8 assertions: 
 assertEquals(1, div.size()); ref {div} [306-306],
 assertEquals("div", div.first().tagName()); ref {div} [307-307],
 assertEquals(1, p.size()); ref {p} [310-310],
 assertEquals("p", p.first().tagName()); ref {p} [311-311],
 assertEquals(1, div2.size()); ref {div2} [314-314],
 assertEquals("div", div2.first().tagName()); ref {div2} [315-315],
 assertEquals(1, p2.size()); ref {p2} [318-318],
 assertEquals("p", p2.first().tagName()); ref {p2} [319-319]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::deeperDescendant has 4 assertions: 
 assertEquals(1, els.size()); ref {els} [328-328],
 assertEquals("Hello", els.first().text()); ref {els} [329-329],
 assertEquals("span", els.first().tagName()); ref {els} [330-330],
 assertEquals(0, aboveRoot.size()); ref {aboveRoot} [333-333]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::parentChildElement has 5 assertions: 
 assertEquals(2, divs.size()); ref {divs} [341-341],
 // 2 is child of 1
assertEquals("2", divs.get(0).id()); ref {divs} [342-342],
 // 3 is child of 2
assertEquals("3", divs.get(1).id()); ref {divs} [343-343],
 assertEquals(1, div2.size()); ref {div2} [346-346],
 assertEquals("2", div2.get(0).id()); ref {div2} [347-347]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::parentWithClassChild has 5 assertions: 
 assertEquals(3, allAs.size()); ref {allAs} [355-355],
 assertEquals("a", allAs.first().tagName()); ref {allAs} [356-356],
 assertEquals(2, fooAs.size()); ref {fooAs} [359-359],
 assertEquals("a", fooAs.first().tagName()); ref {fooAs} [360-360],
 assertEquals(1, barAs.size()); ref {barAs} [363-363]
[m[m05.11.2021 - 00:07:48.567 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::parentChildStar has 4 assertions: 
 assertEquals(3, divChilds.size()); ref {divChilds} [370-370],
 assertEquals("p", divChilds.get(0).tagName()); ref {divChilds} [371-371],
 assertEquals("p", divChilds.get(1).tagName()); ref {divChilds} [372-372],
 assertEquals("span", divChilds.get(2).tagName()); ref {divChilds} [373-373]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::multiChildDescent has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [380-380],
 assertEquals("a", els.first().tagName()); ref {els} [381-381]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::caseInsensitive has 4 assertions: 
 assertEquals(2, doc.select("DiV").size()); ref {doc} [388-388],
 assertEquals(1, doc.select("DiV[TiTLE]").size()); ref {doc} [389-389],
 assertEquals(1, doc.select("DiV[TiTLE=BAR]").size()); ref {doc} [390-390],
 assertEquals(0, doc.select("DiV[TiTLE=BARBARELLA]").size()); ref {doc} [391-391]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::adjacentSiblings has 3 assertions: 
 assertEquals(2, sibs.size()); ref {sibs} [398-398],
 assertEquals("Two", sibs.get(0).text()); ref {sibs} [399-399],
 assertEquals("Three", sibs.get(1).text()); ref {sibs} [400-400]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::adjacentSiblingsWithId has 2 assertions: 
 assertEquals(1, sibs.size()); ref {sibs} [407-407],
 assertEquals("Two", sibs.get(0).text()); ref {sibs} [408-408]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::notAdjacent has 1 assertions: 
 assertEquals(0, sibs.size()); ref {sibs} [415-415]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::mixCombinator has 3 assertions: 
 assertEquals(2, sibs.size()); ref {sibs} [423-423],
 assertEquals("Two", sibs.get(0).text()); ref {sibs} [424-424],
 assertEquals("Three", sibs.get(1).text()); ref {sibs} [425-425]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::mixCombinatorGroup has 4 assertions: 
 assertEquals(3, els.size()); ref {els} [433-433],
 assertEquals("ol", els.get(0).tagName()); ref {els} [434-434],
 assertEquals("Two", els.get(1).text()); ref {els} [435-435],
 assertEquals("Three", els.get(2).text()); ref {els} [436-436]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::generalSiblings has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [443-443],
 assertEquals("Three", els.first().text()); ref {els} [444-444]
[m[m05.11.2021 - 00:07:48.568 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testCharactersInIdAndClass has 4 assertions: 
 assertEquals("One", el1.text()); ref {el1} [454-454],
 assertEquals("Two", el2.text()); ref {el2} [456-456],
 assertEquals("One", el3.text()); ref {el3} [459-459],
 assertEquals("Two", el4.text()); ref {el4} [461-461]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testSupportsLeadingCombinator has 3 assertions: 
 assertEquals(2, spans.size()); ref {spans} [471-471],
 assertEquals("One", spans.first().text()); ref {spans} [472-472],
 assertEquals("2", div.id()); ref {div} [478-478]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPseudoLessThan has 4 assertions: 
 assertEquals(3, ps.size()); ref {ps} [484-484],
 assertEquals("One", ps.get(0).text()); ref {ps} [485-485],
 assertEquals("Two", ps.get(1).text()); ref {ps} [486-486],
 assertEquals("Four", ps.get(2).text()); ref {ps} [487-487]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPseudoGreaterThan has 3 assertions: 
 assertEquals(2, ps.size()); ref {ps} [493-493],
 assertEquals("Two", ps.get(0).text()); ref {ps} [494-494],
 assertEquals("Three", ps.get(1).text()); ref {ps} [495-495]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPseudoEquals has 6 assertions: 
 assertEquals(2, ps.size()); ref {ps} [501-501],
 assertEquals("One", ps.get(0).text()); ref {ps} [502-502],
 assertEquals("Four", ps.get(1).text()); ref {ps} [503-503],
 assertEquals(1, ps2.size()); ref {ps2} [506-506],
 assertEquals("One", ps2.get(0).text()); ref {ps2} [507-507],
 assertEquals("p", ps2.get(0).tagName()); ref {ps2} [508-508]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPseudoBetween has 2 assertions: 
 assertEquals(1, ps.size()); ref {ps} [514-514],
 assertEquals("Two", ps.get(0).text()); ref {ps} [515-515]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPseudoCombined has 2 assertions: 
 assertEquals(1, ps.size()); ref {ps} [521-521],
 assertEquals("Two", ps.get(0).text()); ref {ps} [522-522]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPseudoHas has 16 assertions: 
 assertEquals(2, divs1.size()); ref {divs1} [529-529],
 assertEquals("0", divs1.get(0).id()); ref {divs1} [530-530],
 assertEquals("1", divs1.get(1).id()); ref {divs1} [531-531],
 assertEquals(1, divs2.size()); ref {divs2} [534-534],
 assertEquals("1", divs2.get(0).id()); ref {divs2} [535-535],
 assertEquals(3, divs3.size()); ref {divs3} [538-538],
 assertEquals("0", divs3.get(0).id()); ref {divs3} [539-539],
 assertEquals("1", divs3.get(1).id()); ref {divs3} [540-540],
 assertEquals("2", divs3.get(2).id()); ref {divs3} [541-541],
 // body, div, dib
assertEquals(3, els1.size()); ref {els1} [544-544],
 assertEquals("body", els1.first().tagName()); ref {els1} [545-545],
 assertEquals("0", els1.get(1).id()); ref {els1} [546-546],
 assertEquals("2", els1.get(2).id()); ref {els1} [547-547],
 // p, div
assertEquals(2, els2.size()); ref {els2} [550-550],
 assertEquals("p", els2.first().tagName()); ref {els2} [551-551],
 assertEquals("1", els2.get(1).id()); ref {els2} [552-552]
[m[m05.11.2021 - 00:07:48.569 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testNestedHas has 8 assertions: 
 assertEquals(1, divs.size()); ref {divs} [558-558],
 assertEquals("One", divs.first().text()); ref {divs} [559-559],
 assertEquals(1, divs.size()); ref {divs} [563-563],
 assertEquals("div", divs.first().tagName()); ref {divs} [564-564],
 assertEquals("Two", divs.first().text()); ref {divs} [565-565],
 assertEquals(1, divs.size()); ref {divs} [569-569],
 assertEquals("div", divs.first().tagName()); ref {divs} [570-570],
 assertEquals("Two", divs.first().text()); ref {divs} [571-571]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPseudoContains has 10 assertions: 
 assertEquals(3, ps1.size()); ref {ps1} [578-578],
 assertEquals(2, ps2.size()); ref {ps2} [581-581],
 assertEquals("The Rain.", ps2.first().html()); ref {ps2} [582-582],
 assertEquals("The <i>RAIN</i>.", ps2.last().html()); ref {ps2} [583-583],
 assertEquals(1, ps3.size()); ref {ps3} [586-586],
 assertEquals("light", ps3.first().className()); ref {ps3} [587-587],
 assertEquals(1, ps4.size()); ref {ps4} [590-590],
 assertEquals("light", ps3.first().className()); ref {ps3} [591-591],
 // html, body, div,...
assertEquals(8, ps5.size()); ref {ps5} [594-594],
 assertEquals(8, ps6.size()); ref {ps6} [597-597]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testPsuedoContainsWithParentheses has 4 assertions: 
 assertEquals(1, ps1.size()); ref {ps1} [604-604],
 assertEquals("1", ps1.first().id()); ref {ps1} [605-605],
 assertEquals(1, ps2.size()); ref {ps2} [608-608],
 assertEquals("2", ps2.first().id()); ref {ps2} [609-609]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::containsOwn has 4 assertions: 
 assertEquals(1, ps.size()); ref {ps} [615-615],
 assertEquals("1", ps.first().id()); ref {ps} [616-616],
 assertEquals(0, doc.select("p:containsOwn(there)").size()); ref {doc} [618-618],
 assertEquals(1, doc2.select("p:containsOwn(igor)").size()); ref {doc2} [621-621]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testMatches has 11 assertions: 
 assertEquals(0, p1.size()); ref {p1} [629-629],
 assertEquals(1, p2.size()); ref {p2} [632-632],
 assertEquals("1", p2.first().id()); ref {p2} [633-633],
 assertEquals(1, p4.size()); ref {p4} [636-636],
 assertEquals("4", p4.first().id()); ref {p4} [637-637],
 assertEquals(1, p5.size()); ref {p5} [640-640],
 assertEquals("2", p5.first().id()); ref {p5} [641-641],
 assertEquals(1, p6.size()); ref {p6} [644-644],
 assertEquals("3", p6.first().id()); ref {p6} [645-645],
 assertEquals(1, p7.size()); ref {p7} [648-648],
 assertEquals("1", p7.first().id()); ref {p7} [649-649]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::matchesOwn has 3 assertions: 
 assertEquals(1, p1.size()); ref {p1} [656-656],
 assertEquals("1", p1.first().id()); ref {p1} [657-657],
 assertEquals(0, doc.select("p:matchesOwn(there)").size()); ref {doc} [659-659]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::testRelaxedTags has 4 assertions: 
 assertEquals(1, el1.size()); ref {el1} [666-666],
 assertEquals("1", el1.first().id()); ref {el1} [667-667],
 assertEquals(1, el2.size()); ref {el2} [670-670],
 assertEquals("2", el2.first().id()); ref {el2} [671-671]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::notParas has 6 assertions: 
 assertEquals(2, el1.size()); ref {el1} [678-678],
 assertEquals("Two", el1.first().text()); ref {el1} [679-679],
 assertEquals("Three", el1.last().text()); ref {el1} [680-680],
 assertEquals(2, el2.size()); ref {el2} [683-683],
 assertEquals("One", el2.first().text()); ref {el2} [684-684],
 assertEquals("Two", el2.last().text()); ref {el2} [685-685]
[m[m05.11.2021 - 00:07:48.570 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::notAll has 3 assertions: 
 assertEquals(2, el1.size()); ref {el1} [692-692],
 assertEquals("body", el1.first().tagName()); ref {el1} [693-693],
 assertEquals("span", el1.last().tagName()); ref {el1} [694-694]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::notClass has 2 assertions: 
 assertEquals(1, el1.size()); ref {el1} [701-701],
 assertEquals("1", el1.first().id()); ref {el1} [702-702]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::handlesCommasInSelector has 5 assertions: 
 assertEquals(1, ps.size()); ref {ps} [709-709],
 assertEquals(2, containers.size()); ref {containers} [712-712],
 assertEquals("div", containers.get(0).tagName()); ref {containers} [713-713],
 assertEquals("li", containers.get(1).tagName()); ref {containers} [714-714],
 assertEquals("123", containers.get(1).text()); ref {containers} [715-715]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::selectSupplementaryCharacter has 2 assertions: 
 assertEquals("div", doc.select("div[k" + s + "]").first().tagName()); ref {s, doc} [721-721],
 assertEquals("div", doc.select("div:containsOwn(" + s + ")").first().tagName()); ref {s, doc} [722-722]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::selectClassWithSpace has 7 assertions: 
 assertEquals(2, found.size()); ref {found} [733-733],
 assertEquals("class without space", found.get(0).text()); ref {found} [734-734],
 assertEquals("class with space", found.get(1).text()); ref {found} [735-735],
 assertEquals(2, found.size()); ref {found} [738-738],
 assertEquals("class without space", found.get(0).text()); ref {found} [739-739],
 assertEquals("class with space", found.get(1).text()); ref {found} [740-740],
 assertEquals(0, found.size()); ref {found} [743-743]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::selectSameElements has 2 assertions: 
 assertEquals(2, els.size()); ref {els} [751-751],
 assertEquals(2, subSelect.size()); ref {subSelect} [754-754]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::attributeWithBrackets has 4 assertions: 
 assertEquals("One", doc.select("div[data='End]']").first().text()); ref {doc} [760-760],
 assertEquals("Two", doc.select("div[data='[Another)]]']").first().text()); ref {doc} [761-761],
 assertEquals("One", doc.select("div[data=\"End]\"]").first().text()); ref {doc} [762-762],
 assertEquals("Two", doc.select("div[data=\"[Another)]]\"]").first().text()); ref {doc} [763-763]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::containsData has 11 assertions: 
 // body and script
assertEquals(2, dataEls1.size()); ref {dataEls1} [777-777],
 assertEquals(1, dataEls2.size()); ref {dataEls2} [778-778],
 assertEquals(dataEls1.last(), dataEls2.first()); ref {dataEls1, dataEls2} [779-779],
 assertEquals("<script>FUNCTION</script>", dataEls2.outerHtml()); ref {dataEls2} [780-780],
 assertEquals(1, dataEls3.size()); ref {dataEls3} [781-781],
 assertEquals("span", dataEls3.first().tagName()); ref {dataEls3} [782-782],
 assertEquals(3, dataEls4.size()); ref {dataEls4} [783-783],
 assertEquals("body", dataEls4.first().tagName()); ref {dataEls4} [784-784],
 assertEquals("script", dataEls4.get(1).tagName()); ref {dataEls4} [785-785],
 assertEquals("span", dataEls4.get(2).tagName()); ref {dataEls4} [786-786],
 assertEquals(1, dataEls5.size()); ref {dataEls5} [787-787]
[m[m05.11.2021 - 00:07:48.571 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::containsWithQuote has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [794-794],
 assertEquals("One'One", els.text()); ref {els} [795-795]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::selectFirst has 1 assertions: 
 assertEquals("One", doc.selectFirst("p").text()); ref {doc} [801-801]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::selectFirstWithAnd has 1 assertions: 
 assertEquals("Two", doc.selectFirst("p.foo").text()); ref {doc} [807-807]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::selectFirstWithOr has 1 assertions: 
 assertEquals("One", doc.selectFirst("p, div").text()); ref {doc} [813-813]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::matchText has 4 assertions: 
 assertEquals("One", one.first().text()); ref {one} [822-822],
 assertEquals("Two", two.first().text()); ref {two} [825-825],
 assertEquals(origHtml, doc.html()); ref {doc, origHtml} [827-827],
 assertEquals("Two", doc.select("p:matchText + br + *").text()); ref {doc} [829-829]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::splitOnBr has 4 assertions: 
 assertEquals(3, els.size()); ref {els} [837-837],
 assertEquals("One", els.get(0).text()); ref {els} [838-838],
 assertEquals("Two", els.get(1).text()); ref {els} [839-839],
 assertEquals("Three", els.get(2).toString()); ref {els} [840-840]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::matchTextAttributes has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [847-847],
 assertEquals("Four", els.text()); ref {els} [848-848]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::findBetweenSpan has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [855-855],
 assertEquals("Two", els.text()); ref {els} [856-856]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::startsWithBeginsWithSpace has 1 assertions: 
 assertEquals(1, els.size()); ref {els} [863-863]
[m[m05.11.2021 - 00:07:48.572 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::endsWithEndsWithSpaces has 1 assertions: 
 assertEquals(1, els.size()); ref {els} [870-870]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::html_mixed_case_simple_name has 1 assertions: 
 assertEquals(0, doc.select("mixedCase").size()); ref {doc} [882-882]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::html_mixed_case_wildcard_name has 1 assertions: 
 assertEquals(1, doc.select("*|mixedCase").size()); ref {doc} [888-888]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::html_lowercase_simple_name has 1 assertions: 
 assertEquals(0, doc.select("lowercase").size()); ref {doc} [894-894]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::html_lowercase_wildcard_name has 1 assertions: 
 assertEquals(1, doc.select("*|lowercase").size()); ref {doc} [900-900]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::xml_mixed_case_simple_name has 1 assertions: 
 assertEquals(0, doc.select("mixedCase").size()); ref {doc} [906-906]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::xml_mixed_case_wildcard_name has 1 assertions: 
 assertEquals(1, doc.select("*|mixedCase").size()); ref {doc} [912-912]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::xml_lowercase_simple_name has 1 assertions: 
 assertEquals(0, doc.select("lowercase").size()); ref {doc} [918-918]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::xml_lowercase_wildcard_name has 1 assertions: 
 assertEquals(1, doc.select("*|lowercase").size()); ref {doc} [924-924]
[m[m05.11.2021 - 00:07:48.573 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::trimSelector has 2 assertions: 
 assertEquals(1, els.size()); ref {els} [932-932],
 assertEquals("Hello", els.first().text()); ref {els} [933-933]
[m[m05.11.2021 - 00:07:48.574 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.SelectorTest::xmlWildcardNamespaceTest has 3 assertions: 
 assertEquals(2, select.size()); ref {select} [941-941],
 assertEquals("1111", select.get(0).text()); ref {select} [942-942],
 assertEquals("2222", select.get(1).text()); ref {select} [943-943]
[m[m05.11.2021 - 00:07:48.600 [INFO ] ParsingStrategy.parseTestSuite() - Found 138 test cases
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesSimpleDocument has 3 assertions: 
 assertEquals("p", p.tagName()); ref {p} [42-42],
 assertEquals("foo.png", img.attr("src")); ref {img} [44-44],
 assertEquals("img", img.tagName()); ref {img} [45-45]
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesRoughAttributes has 2 assertions: 
 assertEquals("p", p.tagName()); ref {p} [54-54],
 assertEquals("foo > bar", p.attr("class")); ref {p} [55-55]
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::dropsDuplicateAttributes has 3 assertions: 
 // normalized names due to lower casing
assertEquals("<p one=\"One\" two=\"two\">Text</p>", p.outerHtml()); ref {p} [64-64],
 assertEquals(1, parser.getErrors().size()); ref {parser} [66-66],
 assertEquals("Duplicate attribute", parser.getErrors().get(0).getErrorMessage()); ref {parser} [67-67]
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::retainsAttributesOfDifferentCaseIfSensitive has 1 assertions: 
 assertEquals("<p One=\"One\" one=\"Three\" two=\"Four\" Two=\"Six\">Text</p>", doc.selectFirst("p").outerHtml()); ref {doc} [74-74]
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesQuiteRoughAttributes has 2 assertions: 
 // NOTE: per spec this should be the test case. but impacts too many ppl
// assertEquals("<p =a>One<a <p>Something</a></p>\n<a <p>Else</a>", doc.body().html());
assertEquals("<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [85-85],
 assertEquals("<p .....></p>", doc.body().html()); ref {doc} [88-88]
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesComments has 2 assertions: 
 assertEquals(" <table><tr><td></table> ", comment.getData()); ref {comment} [97-97],
 assertEquals("Hello", text.getWholeText()); ref {text} [100-100]
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesUnterminatedComments has 3 assertions: 
 assertEquals("Hello", p.text()); ref {p} [107-107],
 assertEquals("Hello", text.getWholeText()); ref {text} [109-109],
 assertEquals(" <tr><td>", comment.getData()); ref {comment} [111-111]
[m[m05.11.2021 - 00:07:48.601 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::dropsUnterminatedTag has 3 assertions: 
 assertEquals(0, doc.getElementsByTag("p").size()); ref {doc} [118-118],
 assertEquals("", doc.text()); ref {doc} [119-119],
 assertEquals("", doc.text()); ref {doc} [123-123]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::dropsUnterminatedAttribute has 1 assertions: 
 assertEquals("", doc.text()); ref {doc} [130-130]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesUnterminatedTextarea has 2 assertions: 
 assertEquals("one", t.text()); ref {t} [137-137],
 assertEquals("two", doc.select("p").get(1).text()); ref {doc} [138-138]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesUnterminatedOption has 3 assertions: 
 assertEquals(2, options.size()); ref {options} [145-145],
 assertEquals("One", options.first().text()); ref {options} [146-146],
 assertEquals("TwoThree", options.last().text()); ref {options} [147-147]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testSelectWithOption has 1 assertions: 
 assertEquals(0, parser.getErrors().size()); ref {parser} [154-154]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testSpaceAfterTag has 1 assertions: 
 assertEquals("<div> <a name=\"top\"></a><p id=\"1\">Hello</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [159-159]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::createsDocumentStructure has 9 assertions: 
 // root node: contains html node
assertEquals(1, doc.children().size()); ref {doc} [168-168],
 // html node: head and body
assertEquals(2, doc.child(0).children().size()); ref {doc} [169-169],
 assertEquals(3, head.children().size()); ref {head} [170-170],
 assertEquals(1, body.children().size()); ref {body} [171-171],
 assertEquals("keywords", head.getElementsByTag("meta").get(0).attr("name")); ref {head} [173-173],
 assertEquals(0, body.getElementsByTag("meta").size()); ref {body} [174-174],
 assertEquals("jsoup", doc.title()); ref {doc} [175-175],
 assertEquals("Hello world", body.text()); ref {body} [176-176],
 assertEquals("Hello world", body.children().get(0).text()); ref {body} [177-177]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::createsStructureFromBodySnippet has 1 assertions: 
 assertEquals("foo bar baz", doc.text()); ref {doc} [185-185]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesEscapedData has 2 assertions: 
 assertEquals("Surf & Turf", div.attr("title")); ref {div} [193-193],
 assertEquals("Reef & Beef", div.text()); ref {div} [194-194]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesDataOnlyTags has 4 assertions: 
 assertEquals("font-family: bold", tels.get(0).data()); ref {tels} [200-200],
 assertEquals("", tels.get(0).text()); ref {tels} [201-201],
 assertEquals("Hello There", doc.text()); ref {doc} [205-205],
 assertEquals("obj.insert('<a rel=\"none\" />');\ni++;", doc.data()); ref {doc} [206-206]
[m[m05.11.2021 - 00:07:48.602 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesTextAfterData has 1 assertions: 
 assertEquals("<html><head></head><body>pre <script>inner</script> aft</body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [212-212]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesTextArea has 2 assertions: 
 assertEquals("Hello", els.text()); ref {els} [218-218],
 assertEquals("Hello", els.val()); ref {els} [219-219]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::preservesSpaceInTextArea has 4 assertions: 
 assertEquals(expect, el.text()); ref {expect, el} [227-227],
 assertEquals(expect, el.val()); ref {expect, el} [228-228],
 assertEquals(expect, el.html()); ref {expect, el} [229-229],
 // but preserved in round-trip html
assertEquals("<textarea>\n\t" + expect + "\n</textarea>", el.outerHtml()); ref {expect, el} [230-230]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::preservesSpaceInScript has 3 assertions: 
 assertEquals(expect, el.data()); ref {expect, el} [238-238],
 assertEquals("One\n\tTwo\n\tThree", el.html()); ref {el} [239-239],
 assertEquals("<script>" + expect + "</script>", el.outerHtml()); ref {expect, el} [240-240]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::doesNotCreateImplicitLists has 8 assertions: 
 assertEquals(0, ol.size()); ref {ol} [248-248],
 assertEquals(2, lis.size()); ref {lis} [250-250],
 assertEquals("body", lis.first().parent().tagName()); ref {lis} [251-251],
 assertEquals(0, doc2.select("ul").size()); ref {doc2} [257-257],
 assertEquals(1, doc2.select("ol").size()); ref {doc2} [258-258],
 assertEquals(2, doc2.select("ol li").size()); ref {doc2} [259-259],
 assertEquals(2, doc2.select("ol li p").size()); ref {doc2} [260-260],
 // one p in first li
assertEquals(1, doc2.select("ol li").get(0).children().size()); ref {doc2} [261-261]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::discardsNakedTds has 1 assertions: 
 assertEquals("Hello<p>There</p><p>now</p>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [268-268]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesNestedImplicitTable has 1 assertions: 
 assertEquals("<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [274-274]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesWhatWgExpensesTableExample has 1 assertions: 
 assertEquals("<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [280-280]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesTbodyTable has 1 assertions: 
 assertEquals("<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [285-285]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesImplicitCaptionClose has 1 assertions: 
 assertEquals("<table><caption>A caption</caption><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [290-290]
[m[m05.11.2021 - 00:07:48.603 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::noTableDirectInTable has 1 assertions: 
 assertEquals("<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [295-296]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::ignoresDupeEndTrTag has 1 assertions: 
 assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [301-302]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesBaseTags has 8 assertions: 
 // gets set once, so doc and descendants have first only
assertEquals("http://foo/2/", doc.baseUri()); ref {doc} [309-309],
 assertEquals(3, anchors.size()); ref {anchors} [312-312],
 assertEquals("http://foo/2/", anchors.get(0).baseUri()); ref {anchors} [314-314],
 assertEquals("http://foo/2/", anchors.get(1).baseUri()); ref {anchors} [315-315],
 assertEquals("http://foo/2/", anchors.get(2).baseUri()); ref {anchors} [316-316],
 assertEquals("http://foo/2/1", anchors.get(0).absUrl("href")); ref {anchors} [318-318],
 assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); ref {anchors} [319-319],
 assertEquals("http://foo/4", anchors.get(2).absUrl("href")); ref {anchors} [320-320]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesProtocolRelativeUrl has 1 assertions: 
 assertEquals("https://example.net/img.jpg", el.absUrl("src")); ref {el} [328-328]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesCdata has 3 assertions: 
 assertEquals("<html>\n <foo><&amp;", div.text()); ref {div} [336-336],
 assertEquals(0, div.children().size()); ref {div} [337-337],
 // no elements, one text node
assertEquals(1, div.childNodeSize()); ref {div} [338-338]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::roundTripsCdata has 5 assertions: 
 assertEquals("<html>\n <foo><&amp;", div.text()); ref {div} [345-345],
 assertEquals(0, div.children().size()); ref {div} [346-346],
 // no elements, one text node
assertEquals(1, div.childNodeSize()); ref {div} [347-347],
 assertEquals("<div id=\"1\"><![CDATA[\n<html>\n <foo><&amp;]]>\n</div>", div.outerHtml()); ref {div} [349-349],
 assertEquals("\n<html>\n <foo><&amp;", cdata.text()); ref {cdata} [352-352]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesCdataAcrossBuffer has 1 assertions: 
 assertEquals(cdata, node.text()); ref {node, cdata} [366-366]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesCdataInScript has 4 assertions: 
 // won't be parsed as cdata because in script data section
assertEquals("", script.text()); ref {script} [375-375],
 assertEquals(data, script.data()); ref {data, script} [376-376],
 assertEquals(html, script.outerHtml()); ref {html, script} [377-377],
 assertEquals(data, dataNode.getWholeData()); ref {data, dataNode} [380-380]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedCdataAtEOF has 1 assertions: 
 assertEquals(1, doc.body().childNodeSize()); ref {doc} [388-388]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handleCDataInText has 5 assertions: 
 assertEquals("One ", ((TextNode) nodes.get(0)).getWholeText()); ref {nodes} [397-397],
 assertEquals("Two <&", ((TextNode) nodes.get(1)).getWholeText()); ref {nodes} [398-398],
 assertEquals("Two <&", ((CDataNode) nodes.get(1)).getWholeText()); ref {nodes} [399-399],
 assertEquals(" Three", ((TextNode) nodes.get(2)).getWholeText()); ref {nodes} [400-400],
 assertEquals(h, p.outerHtml()); ref {p, h} [402-402]
[m[m05.11.2021 - 00:07:48.604 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::cdataNodesAreTextNodes has 3 assertions: 
 assertEquals("One ", nodes.get(0).text()); ref {nodes} [411-411],
 assertEquals(" Two <& ", nodes.get(1).text()); ref {nodes} [412-412],
 assertEquals(" Three", nodes.get(2).text()); ref {nodes} [413-413]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesInvalidStartTags has 1 assertions: 
 assertEquals("Hello < There <&>", doc.select("div").first().text()); ref {doc} [419-419]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnknownTags has 4 assertions: 
 assertEquals(2, foos.size()); ref {foos} [426-426],
 assertEquals("bar", foos.first().attr("title")); ref {foos} [427-427],
 assertEquals("qux", foos.last().attr("title")); ref {foos} [428-428],
 assertEquals("there", foos.last().text()); ref {foos} [429-429]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnknownInlineTags has 1 assertions: 
 assertEquals(h, TextUtil.stripNewlines(out)); ref {TextUtil, h, out} [436-436]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::parsesBodyFragment has 2 assertions: 
 assertEquals("<body><!-- comment --><p><a href=\"foo\">One</a></p></body>", TextUtil.stripNewlines(doc.body().outerHtml())); ref {TextUtil, doc} [442-442],
 assertEquals("http://example.com/foo", doc.select("a").first().absUrl("href")); ref {doc} [443-443]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnknownNamespaceTags has 1 assertions: 
 assertEquals("<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [450-450]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesKnownEmptyBlocks has 1 assertions: 
 assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [457-457]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesKnownEmptyNoFrames has 1 assertions: 
 assertEquals("<html><head><noframes></noframes><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [463-463]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesKnownEmptyStyle has 1 assertions: 
 assertEquals("<html><head><style></style><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [469-469]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesKnownEmptyTitle has 1 assertions: 
 assertEquals("<html><head><title></title><meta name=\"foo\"></head><body>One</body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [475-475]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesKnownEmptyIframe has 1 assertions: 
 assertEquals("<html><head></head><body><p>One</p><iframe id=\"1\"></iframe><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [481-481]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesSolidusAtAttributeEnd has 1 assertions: 
 assertEquals("<a href=\"/\">link</a>", doc.body().html()); ref {doc} [488-488]
[m[m05.11.2021 - 00:07:48.605 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesMultiClosingBody has 2 assertions: 
 assertEquals(3, doc.select("p").size()); ref {doc} [494-494],
 assertEquals(3, doc.body().children().size()); ref {doc} [495-495]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedDefinitionLists has 4 assertions: 
 // no auto dl
assertEquals(0, doc.select("dl").size()); ref {doc} [502-502],
 assertEquals(4, doc.select("dt, dd").size()); ref {doc} [503-503],
 assertEquals(2, dts.size()); ref {dts} [505-505],
 assertEquals("Zug", dts.get(1).nextElementSibling().text()); ref {dts} [506-506]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesBlocksInDefinitions has 3 assertions: 
 assertEquals("dt", doc.select("#1").first().parent().tagName()); ref {doc} [513-513],
 assertEquals("dd", doc.select("#2").first().parent().tagName()); ref {doc} [514-514],
 assertEquals("<dl><dt><div id=\"1\">Term</div></dt><dd><div id=\"2\">Def</div></dd></dl>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [515-515]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesFrames has 1 assertions: 
 assertEquals("<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\"><frame src=\"foo\"></frameset></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [521-522]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::ignoresContentAfterFrameset has 1 assertions: 
 assertEquals("<html><head><title>One</title></head><frameset><frame><frame></frameset></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [529-529]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesJavadocFont has 3 assertions: 
 assertEquals("Deprecated", a.text()); ref {a} [537-537],
 assertEquals("font", a.child(0).tagName()); ref {a} [538-538],
 assertEquals("b", a.child(0).child(0).tagName()); ref {a} [539-539]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesBaseWithoutHref has 2 assertions: 
 assertEquals("/foo", a.attr("href")); ref {a} [546-546],
 assertEquals("http://example.com/foo", a.attr("abs:href")); ref {a} [547-547]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::normalisesDocument has 1 assertions: 
 assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [553-554]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::normalisesEmptyDocument has 1 assertions: 
 assertEquals("<html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [559-559]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::normalisesHeadlessBody has 1 assertions: 
 assertEquals("<html><head></head><body><span class=\"foo\">bar</span></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [564-565]
[m[m05.11.2021 - 00:07:48.606 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::normalisedBodyAfterContent has 1 assertions: 
 assertEquals("<html><head></head><body class=\"name\"><font face=\"Arial\"><div>One</div></font></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [570-571]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::findsCharsetInMalformedMeta has 1 assertions: 
 assertEquals("gb2312", doc.select("meta").attr("charset")); ref {doc} [578-578]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testHgroup has 1 assertions: 
 assertEquals("<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [584-584]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testRelaxedTags has 1 assertions: 
 assertEquals("<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [589-589]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testHeaderContents has 1 assertions: 
 assertEquals("<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [596-596]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testSpanContents has 1 assertions: 
 assertEquals("<span>Hello <div>there</div> <span>now</span></span>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [602-602]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testNoImagesInNoScriptInHead has 1 assertions: 
 assertEquals("<html><head><noscript>&lt;img src=\"foo\"&gt;</noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [608-608]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testAFlowContents has 1 assertions: 
 assertEquals("<a>Hello <div>there</div> <span>now</span></a>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [614-614]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testFontFlowContents has 1 assertions: 
 assertEquals("<font>Hello <div>there</div> <span>now</span></font>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [620-620]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesMisnestedTagsBI has 1 assertions: 
 assertEquals("<p>1<b>2<i>3</i></b><i>4</i>5</p>", doc.body().html()); ref {doc} [627-627]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesMisnestedTagsBP has 1 assertions: 
 assertEquals("<b>1</b>\n<p><b>2</b>3</p>", doc.body().html()); ref {doc} [635-635]
[m[m05.11.2021 - 00:07:48.607 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesMisnestedAInDivs has 1 assertions: 
 assertEquals(StringUtil.normaliseWhitespace(w), StringUtil.normaliseWhitespace(doc.body().html())); ref {w, doc, StringUtil} [643-645]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnexpectedMarkupInTables has 1 assertions: 
 assertEquals("<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [653-653]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedFormattingElements has 1 assertions: 
 assertEquals(want, doc.html()); ref {want, doc} [675-675]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedAnchors has 1 assertions: 
 assertEquals(want, doc.body().html()); ref {want, doc} [682-682]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::reconstructFormattingElements has 1 assertions: 
 assertEquals("<p><b class=\"one\">One <i>Two <b>Three</b></i></b></p>\n<p><b class=\"one\"><i><b>Hello</b></i></b></p>", doc.body().html()); ref {doc} [689-689]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::reconstructFormattingElementsInTable has 1 assertions: 
 assertEquals(want, doc.body().html()); ref {want, doc} [705-705]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::commentBeforeHtml has 1 assertions: 
 assertEquals("<!-- comment --><!-- comment 2 --><html><head></head><body><p>One</p></body></html>", TextUtil.stripNewlines(doc.html())); ref {TextUtil, doc} [711-711]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::emptyTdTag has 1 assertions: 
 assertEquals("<td>One</td>\n<td id=\"2\"></td>", doc.select("tr").first().html()); ref {doc} [717-717]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesSolidusInA has 2 assertions: 
 assertEquals("link text", a.text()); ref {a} [725-725],
 assertEquals("/lib/14160711/", a.attr("href")); ref {a} [726-726]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesSpanInTbody has 2 assertions: 
 // the span gets closed
assertEquals(doc.select("span").first().children().size(), 0); ref {doc} [733-733],
 // only one table
assertEquals(doc.select("table").size(), 1); ref {doc} [734-734]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedTitleAtEof has 7 assertions: 
 assertEquals("Data", Jsoup.parse("<title>Data").title()); ref {Jsoup} [738-738],
 assertEquals("Data<", Jsoup.parse("<title>Data<").title()); ref {Jsoup} [739-739],
 assertEquals("Data</", Jsoup.parse("<title>Data</").title()); ref {Jsoup} [740-740],
 assertEquals("Data</t", Jsoup.parse("<title>Data</t").title()); ref {Jsoup} [741-741],
 assertEquals("Data</ti", Jsoup.parse("<title>Data</ti").title()); ref {Jsoup} [742-742],
 assertEquals("Data", Jsoup.parse("<title>Data</title>").title()); ref {Jsoup} [743-743],
 assertEquals("Data", Jsoup.parse("<title>Data</title >").title()); ref {Jsoup} [744-744]
[m[m05.11.2021 - 00:07:48.608 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedTitle has 4 assertions: 
 assertEquals("One <b>Two <b>Three", one.title()); ref {one} [749-749],
 assertEquals("Test", one.select("p").first().text()); ref {one} [750-750],
 assertEquals("One", two.title()); ref {two} [753-753],
 assertEquals("<b>Two <p>Test</p></b>", two.body().html()); ref {two} [754-754]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedScriptAtEof has 13 assertions: 
 assertEquals("Data", Jsoup.parse("<script>Data").select("script").first().data()); ref {Jsoup} [758-758],
 assertEquals("Data<", Jsoup.parse("<script>Data<").select("script").first().data()); ref {Jsoup} [759-759],
 assertEquals("Data</sc", Jsoup.parse("<script>Data</sc").select("script").first().data()); ref {Jsoup} [760-760],
 assertEquals("Data</-sc", Jsoup.parse("<script>Data</-sc").select("script").first().data()); ref {Jsoup} [761-761],
 assertEquals("Data</sc-", Jsoup.parse("<script>Data</sc-").select("script").first().data()); ref {Jsoup} [762-762],
 assertEquals("Data</sc--", Jsoup.parse("<script>Data</sc--").select("script").first().data()); ref {Jsoup} [763-763],
 assertEquals("Data", Jsoup.parse("<script>Data</script>").select("script").first().data()); ref {Jsoup} [764-764],
 assertEquals("Data</script", Jsoup.parse("<script>Data</script").select("script").first().data()); ref {Jsoup} [765-765],
 assertEquals("Data", Jsoup.parse("<script>Data</script ").select("script").first().data()); ref {Jsoup} [766-766],
 assertEquals("Data", Jsoup.parse("<script>Data</script n").select("script").first().data()); ref {Jsoup} [767-767],
 assertEquals("Data", Jsoup.parse("<script>Data</script n=").select("script").first().data()); ref {Jsoup} [768-768],
 assertEquals("Data", Jsoup.parse("<script>Data</script n=\"").select("script").first().data()); ref {Jsoup} [769-769],
 assertEquals("Data", Jsoup.parse("<script>Data</script n=\"p").select("script").first().data()); ref {Jsoup} [770-770]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesUnclosedRawtextAtEof has 7 assertions: 
 assertEquals("Data", Jsoup.parse("<style>Data").select("style").first().data()); ref {Jsoup} [774-774],
 assertEquals("Data</st", Jsoup.parse("<style>Data</st").select("style").first().data()); ref {Jsoup} [775-775],
 assertEquals("Data", Jsoup.parse("<style>Data</style>").select("style").first().data()); ref {Jsoup} [776-776],
 assertEquals("Data</style", Jsoup.parse("<style>Data</style").select("style").first().data()); ref {Jsoup} [777-777],
 assertEquals("Data</-style", Jsoup.parse("<style>Data</-style").select("style").first().data()); ref {Jsoup} [778-778],
 assertEquals("Data</style-", Jsoup.parse("<style>Data</style-").select("style").first().data()); ref {Jsoup} [779-779],
 assertEquals("Data</style--", Jsoup.parse("<style>Data</style--").select("style").first().data()); ref {Jsoup} [780-780]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::noImplicitFormForTextAreas has 1 assertions: 
 assertEquals("<textarea>One</textarea>", doc.body().html()); ref {doc} [786-786]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesEscapedScript has 1 assertions: 
 assertEquals("<!-- one <script>Blah</script> -->", doc.select("script").first().data()); ref {doc} [791-791]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handles0CharacterAsText has 1 assertions: 
 assertEquals("0\n<p>0</p>", doc.body().html()); ref {doc} [796-796]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesNullInData has 1 assertions: 
 // replaced in attr, NOT replaced in data
assertEquals("<p id=\"\uFFFD\">Blah \u0000</p>", doc.body().html()); ref {doc} [801-801]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesNullInComments has 1 assertions: 
 assertEquals("<!-- \uFFFD \uFFFD -->", doc.body().html()); ref {doc} [806-806]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesNewlinesAndWhitespaceInTag has 1 assertions: 
 assertEquals("<a href=\"one\" id=\"two\"></a>", doc.body().html()); ref {doc} [811-811]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesWhitespaceInoDocType has 1 assertions: 
 assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">", doc.childNode(0).outerHtml()); ref {doc} [819-819]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::tracksErrorsWhenRequested has 6 assertions: 
 assertEquals(5, errors.size()); ref {errors} [828-828],
 assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString()); ref {errors} [829-829],
 assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString()); ref {errors} [830-830],
 assertEquals("36: Invalid character reference: invalid named reference 'arrgh'", errors.get(2).toString()); ref {errors} [831-831],
 assertEquals("50: Tag cannot be self closing; not a void tag", errors.get(3).toString()); ref {errors} [832-832],
 assertEquals("61: Unexpectedly reached end of file (EOF) in input state [TagName]", errors.get(4).toString()); ref {errors} [833-833]
[m[m05.11.2021 - 00:07:48.609 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::tracksLimitedErrorsWhenRequested has 4 assertions: 
 assertEquals(3, errors.size()); ref {errors} [842-842],
 assertEquals("20: Attributes incorrectly present on end tag", errors.get(0).toString()); ref {errors} [843-843],
 assertEquals("35: Unexpected token [Doctype] when in state [InBody]", errors.get(1).toString()); ref {errors} [844-844],
 assertEquals("36: Invalid character reference: invalid named reference 'arrgh'", errors.get(2).toString()); ref {errors} [845-845]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::noErrorsByDefault has 1 assertions: 
 assertEquals(0, errors.size()); ref {errors} [854-854]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesCommentsInTable has 1 assertions: 
 assertEquals("<html><head></head><body><table><tbody><tr><td>text</td><!-- Comment --></tr></tbody></table></body></html>", TextUtil.stripNewlines(node.outerHtml())); ref {node, TextUtil} [860-860]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesQuotesInCommentsInScripts has 1 assertions: 
 assertEquals("<script>\n" + "  <!--\n" + "    document.write('</scr' + 'ipt>');\n" + "  // -->\n" + "</script>", node.body().html()); ref {node} [870-874]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handleNullContextInParseFragment has 3 assertions: 
 // returns <html> node (not document) -- no context means doc gets created
assertEquals(1, nodes.size()); ref {nodes} [880-880],
 assertEquals("html", nodes.get(0).nodeName()); ref {nodes} [881-881],
 assertEquals("<html> <head></head> <body> <ol> <li>One</li> </ol> <p>Two</p> </body> </html>", StringUtil.normaliseWhitespace(nodes.get(0).outerHtml())); ref {nodes, StringUtil} [882-882]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::doesNotFindShortestMatchingEntity has 1 assertions: 
 assertEquals(StringUtil.normaliseWhitespace("One &amp;clubsuite; ♣"), doc.body().html()); ref {doc, StringUtil} [890-890]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::relaxedBaseEntityMatchAndStrictExtendedMatch has 1 assertions: 
 assertEquals("&amp; \" &reg; &amp;icy &amp;hopf &icy; &hopf;", doc.body().html()); ref {doc} [898-898]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesXmlDeclarationAsBogusComment has 1 assertions: 
 assertEquals("<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [904-904]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesTagsInTextarea has 1 assertions: 
 assertEquals("<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>", doc.body().html()); ref {doc} [910-910]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::createsFormElements has 4 assertions: 
 assertTrue("Is form element", el instanceof FormElement); ref {el} [919-919],
 assertEquals(2, controls.size()); ref {controls} [922-922],
 assertEquals("1", controls.get(0).id()); ref {controls} [923-923],
 assertEquals("2", controls.get(1).id()); ref {controls} [924-924]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::associatedFormControlsWithDisjointForms has 5 assertions: 
 assertTrue("Is form element", el instanceof FormElement); ref {el} [933-933],
 assertEquals(2, controls.size()); ref {controls} [936-936],
 assertEquals("1", controls.get(0).id()); ref {controls} [937-937],
 assertEquals("2", controls.get(1).id()); ref {controls} [938-938],
 assertEquals("<table><tbody><tr><form></form><input type=\"hidden\" id=\"1\"><td><input type=\"text\" id=\"2\"></td></tr><tr></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [940-940]
[m[m05.11.2021 - 00:07:48.610 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesInputInTable has 2 assertions: 
 assertEquals(1, doc.select("table input").size()); ref {doc} [951-951],
 assertEquals(2, doc.select("input").size()); ref {doc} [952-952]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::convertsImageToImg has 1 assertions: 
 assertEquals("<img>\n<svg>\n <image />\n</svg>", doc.body().html()); ref {doc} [959-959]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesInvalidDoctypes has 3 assertions: 
 assertEquals("<!doctype> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [965-967],
 assertEquals("<!doctype> <html> <head></head> <body> <p>Foo</p> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [970-972],
 assertEquals("<!doctype �> <html> <head></head> <body></body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [975-977]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesManyChildren has 2 assertions: 
 // Assert
assertEquals(50000, doc.body().childNodeSize()); ref {doc} [992-992],
 assertTrue(System.currentTimeMillis() - start < 1000); ref {start, System} [993-993]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesDeepStack has 3 assertions: 
 // Assert
assertEquals(2, doc.body().childNodeSize()); ref {doc} [1014-1014],
 assertEquals(25000, doc.select("dd").size()); ref {doc} [1015-1015],
 assertTrue(System.currentTimeMillis() - start < 2000); ref {start, System} [1016-1016]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testInvalidTableContents has 3 assertions: 
 assertTrue("Comment not found", endOfEmail > -1); ref {endOfEmail} [1027-1027],
 assertTrue("Search text not found", guarantee > -1); ref {guarantee} [1028-1028],
 assertTrue("Search text did not come after comment", guarantee > endOfEmail); ref {guarantee, endOfEmail} [1029-1029]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testNormalisesIsIndex has 1 assertions: 
 assertEquals("<form action=\"/submit\"> <hr><label>This is a searchable index. Enter search keywords: <input name=\"isindex\"></label> <hr> </form>", StringUtil.normaliseWhitespace(doc.body().html())); ref {doc, StringUtil} [1035-1036]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testReinsertionModeForThCelss has 1 assertions: 
 assertEquals(1, doc.body().children().size()); ref {doc} [1042-1042]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testUsingSingleQuotesInQueries has 1 assertions: 
 assertEquals("hello", main.text()); ref {main} [1049-1049]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testSupportsNonAsciiTags has 2 assertions: 
 assertEquals("Yes", els.text()); ref {els} [1056-1056],
 assertEquals("Correct", els.text()); ref {els} [1058-1058]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testSupportsPartiallyNonAsciiTags has 1 assertions: 
 assertEquals("Check", els.text()); ref {els} [1065-1065]
[m[m05.11.2021 - 00:07:48.611 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testFragment has 1 assertions: 
 assertEquals("<script type=\"text/javascript\">console.log('foo');</script> \n" + "<div id=\"somecontent\">\n" + " some content\n" + "</div> \n" + "<script type=\"text/javascript\">console.log('bar');</script>", body.body().html()); ref {body} [1076-1080]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testHtmlLowerCase has 2 assertions: 
 assertEquals("<!doctype html> <html> <head></head> <body> <div id=\"1\"> One </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [1086-1086],
 assertEquals("<tag>One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml())); ref {div, TextUtil} [1090-1090]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::canPreserveTagCase has 2 assertions: 
 assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN id=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [1097-1097],
 assertEquals("<TaG id=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml())); ref {div, TextUtil} [1101-1101]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::canPreserveAttributeCase has 2 assertions: 
 assertEquals("<html> <head></head> <body> <div id=\"1\"> <span ID=\"2\"></span> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [1108-1108],
 assertEquals("<tag ID=\"one\">One</tag>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml())); ref {div, TextUtil} [1112-1112]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::canPreserveBothCase has 2 assertions: 
 assertEquals("<html> <head></head> <body> <div id=\"1\"> <SPAN ID=\"2\"></SPAN> </div> </body> </html>", StringUtil.normaliseWhitespace(doc.outerHtml())); ref {doc, StringUtil} [1119-1119],
 assertEquals("<TaG ID=\"one\">One</TaG>", TextUtil.stripNewlines(div.nextElementSibling().outerHtml())); ref {div, TextUtil} [1123-1123]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesControlCodeInAttributeName has 1 assertions: 
 assertEquals("<p><a>One</a><a></a><a foo=\"bar\">Two</a></p>", doc.body().html()); ref {doc} [1128-1128]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::caseSensitiveParseTree has 1 assertions: 
 assertEquals("<r> <X> A </X> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html())); ref {doc, StringUtil} [1136-1136]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::caseInsensitiveParseTree has 1 assertions: 
 assertEquals("<r> <x> A </x> <y> B </y> </r>", StringUtil.normaliseWhitespace(doc.body().html())); ref {doc, StringUtil} [1143-1143]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::preservedCaseLinksCantNest has 1 assertions: 
 assertEquals("<A> ONE </A><A> Two </A>", StringUtil.normaliseWhitespace(doc.body().html())); ref {doc, StringUtil} [1151-1151]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::normalizesDiscordantTags has 1 assertions: 
 assertEquals("<div>\n test\n</div>\n<p></p>", document.body().html()); ref {document} [1156-1156]
[m[m05.11.2021 - 00:07:48.612 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::selfClosingVoidIsNotAnError has 3 assertions: 
 assertEquals(0, parser.getErrors().size()); ref {parser} [1163-1163],
 assertTrue(Jsoup.isValid(html, Whitelist.basic())); ref {Jsoup, Whitelist, html} [1165-1165],
 assertEquals("<p>test<br>test<br></p>", clean); ref {clean} [1167-1167]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::selfClosingOnNonvoidIsError has 4 assertions: 
 assertEquals(1, parser.getErrors().size()); ref {parser} [1174-1174],
 assertEquals("18: Tag cannot be self closing; not a void tag", parser.getErrors().get(0).toString()); ref {parser} [1175-1175],
 assertFalse(Jsoup.isValid(html, Whitelist.relaxed())); ref {Jsoup, Whitelist, html} [1177-1177],
 assertEquals("<p>test</p> <div></div> <div> Two </div>", StringUtil.normaliseWhitespace(clean)); ref {StringUtil, clean} [1179-1179]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testTemplateInsideTable has 1 assertions: 
 assertTrue(template.childNodes().size() > 1); ref {template} [1189-1189]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testHandlesDeepSpans has 2 assertions: 
 assertEquals(200, doc.select("span").size()); ref {doc} [1202-1202],
 assertEquals(1, doc.select("p").size()); ref {doc} [1203-1203]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::commentAtEnd has 1 assertions: 
 assertTrue(doc.childNode(0) instanceof Comment); ref {doc} [1208-1208]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::preSkipsFirstNewline has 2 assertions: 
 assertEquals("One\nTwo", pre.text()); ref {pre} [1214-1214],
 assertEquals("\nOne\nTwo\n", pre.wholeText()); ref {pre} [1215-1215]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::handlesXmlDeclAndCommentsBeforeDoctype has 2 assertions: 
 assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--> <!-- so --><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>", StringUtil.normaliseWhitespace(doc.html())); ref {doc, StringUtil} [1222-1223],
 assertEquals("A Certain Kind of Test", doc.head().select("title").text()); ref {doc} [1225-1225]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::fallbackToUtfIfCantEncode has 3 assertions: 
 assertEquals("UTF-8", doc.charset().name()); ref {doc} [1234-1234],
 assertEquals("One", doc.text()); ref {doc} [1235-1235],
 assertEquals("<html><head><meta charset=\"UTF-8\"></head><body>One</body></html>", TextUtil.stripNewlines(html)); ref {TextUtil, html} [1238-1238]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::characterReaderBuffer has 3 assertions: 
 assertEquals(2, links.size()); ref {links} [1248-1248],
 // passes
assertEquals(expectedHref, links.get(0).attr("href")); ref {links, expectedHref} [1249-1249],
 // fails, "but was:<...ath?param_one=value&[]_two-value>"
assertEquals(expectedHref, links.get(1).attr("href")); ref {links, expectedHref} [1250-1250]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::selfClosingTextAreaDoesntLeaveDroppings has 3 assertions: 
 assertFalse(doc.body().html().contains("&lt;")); ref {doc} [1257-1257],
 assertFalse(doc.body().html().contains("&gt;")); ref {doc} [1258-1258],
 assertEquals("<div><div><textarea></textarea></div></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [1259-1259]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testNoSpuriousSpace has 2 assertions: 
 assertEquals("Just<a>One</a><a>Two</a>", doc.body().html()); ref {doc} [1265-1265],
 assertEquals("JustOneTwo", doc.body().text()); ref {doc} [1266-1266]
[m[m05.11.2021 - 00:07:48.613 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testH20 has 2 assertions: 
 assertEquals("H<sub>2</sub>O", clean); ref {clean} [1274-1274],
 assertEquals("H2O", doc.text()); ref {doc} [1277-1277]
[m[m05.11.2021 - 00:07:48.614 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testUNewlines has 2 assertions: 
 assertEquals("t<u>es</u>t <b>on</b> <i>f</i><u>ir</u>e", clean); ref {clean} [1285-1285],
 assertEquals("test on fire", doc.text()); ref {doc} [1288-1288]
[m[m05.11.2021 - 00:07:48.614 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.HtmlParserTest::testFarsi has 1 assertions: 
 assertEquals(text, doc.text()); ref {doc, text} [1295-1295]
[m[m05.11.2021 - 00:07:48.616 [INFO ] ParsingStrategy.parseTestSuite() - Found 8 test cases
[m[m05.11.2021 - 00:07:48.616 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::html has 14 assertions: 
 assertEquals(3, a.size()); ref {a} [26-26],
 assertTrue(a.hasKey("Tot")); ref {a} [27-27],
 assertTrue(a.hasKey("Hello")); ref {a} [28-28],
 assertTrue(a.hasKey("data-name")); ref {a} [29-29],
 assertFalse(a.hasKey("tot")); ref {a} [30-30],
 assertTrue(a.hasKeyIgnoreCase("tot")); ref {a} [31-31],
 assertEquals("There", a.getIgnoreCase("hEllo")); ref {a} [32-32],
 assertEquals(1, dataset.size()); ref {dataset} [35-35],
 assertEquals("Jsoup", dataset.get("name")); ref {dataset} [36-36],
 assertEquals("", a.get("tot")); ref {a} [37-37],
 assertEquals("a&p", a.get("Tot")); ref {a} [38-38],
 assertEquals("a&p", a.getIgnoreCase("tot")); ref {a} [39-39],
 assertEquals(" Tot=\"a&amp;p\" Hello=\"There\" data-name=\"Jsoup\"", a.html()); ref {a} [41-41],
 assertEquals(a.html(), a.toString()); ref {a} [42-42]
[m[m05.11.2021 - 00:07:48.616 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::testIteratorRemovable has 8 assertions: 
 assertTrue(a.hasKey("Tot")); ref {a} [51-51],
 assertEquals("Tot", attr.getKey()); ref {attr} [55-55],
 assertEquals(2, a.size()); ref {a} [57-57],
 assertEquals("Hello", attr.getKey()); ref {attr} [59-59],
 assertEquals("There", attr.getValue()); ref {attr} [60-60],
 // make sure that's flowing to the underlying attributes object
assertEquals(2, a.size()); ref {a} [63-63],
 assertEquals("There", a.get("Hello")); ref {a} [64-64],
 assertFalse(a.hasKey("Tot")); ref {a} [65-65]
[m[m05.11.2021 - 00:07:48.616 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::testIteratorUpdateable has 5 assertions: 
 assertFalse(a.hasKey("Foo")); ref {a} [74-74],
 assertEquals("a&p", a.get("Foo")); ref {a} [82-82],
 assertEquals("Qux", a.get("Bar")); ref {a} [83-83],
 assertFalse(a.hasKey("Tot")); ref {a} [84-84],
 assertFalse(a.hasKey("Hello")); ref {a} [85-85]
[m[m05.11.2021 - 00:07:48.616 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::testIteratorHasNext has 2 assertions: 
 assertEquals(String.valueOf(seen), attribute.getValue()); ref {String, attribute, seen} [97-97],
 assertEquals(3, seen); ref {seen} [99-99]
[m[m05.11.2021 - 00:07:48.616 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::testIterator has 4 assertions: 
 assertTrue(iterator.hasNext()); ref {iterator} [113-113],
 assertEquals(datas[i][0], attribute.getKey()); ref {datas, i, attribute} [116-116],
 assertEquals(datas[i][1], attribute.getValue()); ref {datas, i, attribute} [117-117],
 assertEquals(datas.length, i); ref {datas, i, datas.length} [120-120]
[m[m05.11.2021 - 00:07:48.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::testIteratorEmpty has 1 assertions: 
 assertFalse(iterator.hasNext()); ref {iterator} [128-128]
[m[m05.11.2021 - 00:07:48.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::removeCaseSensitive has 4 assertions: 
 assertEquals(5, a.size()); ref {a} [140-140],
 assertEquals(3, a.size()); ref {a} [143-143],
 assertTrue(a.hasKey("tot")); ref {a} [144-144],
 assertFalse(a.hasKey("Tot")); ref {a} [145-145]
[m[m05.11.2021 - 00:07:48.617 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.AttributesTest::testSetKeyConsistency has 2 assertions: 
 assertFalse("Attribute 'a' not correctly removed", a.hasKey("a")); ref {a} [155-155],
 assertTrue("Attribute 'b' not present after renaming", a.hasKey("b")); ref {a} [156-156]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::chompBalanced has 3 assertions: 
 assertEquals(":contains", pre); ref {pre} [18-18],
 assertEquals("one (two) three", guts); ref {guts} [19-19],
 assertEquals(" four", remainder); ref {remainder} [20-20]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::chompEscapedBalanced has 4 assertions: 
 assertEquals(":contains", pre); ref {pre} [29-29],
 assertEquals("one (two) \\( \\) \\) three", guts); ref {guts} [30-30],
 assertEquals("one (two) ( ) ) three", TokenQueue.unescape(guts)); ref {TokenQueue, guts} [31-31],
 assertEquals(" four", remainder); ref {remainder} [32-32]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::chompBalancedMatchesAsMuchAsPossible has 1 assertions: 
 assertEquals("something(or another)", match); ref {match} [39-39]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::unescape has 1 assertions: 
 assertEquals("one ( ) \\", TokenQueue.unescape("one \\( \\) \\\\")); ref {TokenQueue} [43-43]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::chompToIgnoreCase has 2 assertions: 
 assertEquals("<textarea>one < two ", data); ref {data} [50-50],
 assertEquals("<textarea> one two < three </oops>", data); ref {data} [54-54]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::addFirst has 1 assertions: 
 assertEquals("Three Two", tq.remainder()); ref {tq} [61-61]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::consumeToIgnoreSecondCallTest has 2 assertions: 
 assertEquals("<textarea>one < two ", data); ref {data} [69-69],
 assertEquals(" third ", data); ref {data} [72-72]
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::testNestedQuotes has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.618 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.parser.TokenQueueTest::chompBalancedThrowIllegalArgumentException has 2 assertions: 
 org.junit.Assert.fail("should have thrown IllegalArgumentException"); ref {org, org.junit, org.junit.Assert} [92-92],
 assertEquals("Did not find balanced marker at \'something(or another)) else\'", expected.getMessage()); ref {expected} [94-94]
[m[m05.11.2021 - 00:07:48.620 [INFO ] ParsingStrategy.parseTestSuite() - Found 11 test cases
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::hasAssociatedControls has 1 assertions: 
 assertEquals(8, form.elements().size()); ref {form} [24-24]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::createsFormData has 7 assertions: 
 assertEquals(6, data.size()); ref {data} [39-39],
 assertEquals("one=two", data.get(0).toString()); ref {data} [40-40],
 assertEquals("three=four", data.get(1).toString()); ref {data} [41-41],
 assertEquals("three=five", data.get(2).toString()); ref {data} [42-42],
 assertEquals("six=seven", data.get(3).toString()); ref {data} [43-43],
 // set
assertEquals("seven=on", data.get(4).toString()); ref {data} [44-44],
 // default
assertEquals("eight=on", data.get(5).toString()); ref {data} [45-45]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::formDataUsesFirstAttribute has 1 assertions: 
 assertEquals("test=foo", form.formData().get(0).toString()); ref {form} [55-55]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::createsSubmitableConnection has 4 assertions: 
 assertEquals(Connection.Method.GET, con.request().method()); ref {con, Connection.Method, Connection.Method.GET, Connection} [66-66],
 assertEquals("http://example.com/search", con.request().url().toExternalForm()); ref {con} [67-67],
 assertEquals("q=jsoup", dataList.get(0).toString()); ref {dataList} [69-69],
 assertEquals(Connection.Method.POST, con2.request().method()); ref {Connection.Method, Connection, Connection.Method.POST, con2} [73-73]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::actionWithNoValue has 1 assertions: 
 assertEquals("http://example.com/", con.request().url().toExternalForm()); ref {con} [82-82]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::actionWithNoBaseUri has 2 assertions: 
 assertEquals("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", e.getMessage()); ref {e} [96-97],
 assertTrue(threw); ref {threw} [99-99]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::formsAddedAfterParseAreFormElements has 2 assertions: 
 assertTrue(formEl instanceof FormElement); ref {formEl} [106-106],
 assertEquals(1, form.elements().size()); ref {form} [109-109]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::controlsAddedAfterParseAreLinkedWithForms has 3 assertions: 
 assertTrue(formEl instanceof FormElement); ref {formEl} [119-119],
 assertEquals(1, form.elements().size()); ref {form} [121-121],
 assertEquals("foo=bar", data.get(0).toString()); ref {data} [124-124]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::usesOnForCheckboxValueIfNoValueSet has 2 assertions: 
 assertEquals("on", data.get(0).value()); ref {data} [131-131],
 assertEquals("foo", data.get(0).key()); ref {data} [132-132]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::adoptedFormsRetainInputs has 4 assertions: 
 assertEquals(3, data.size()); ref {data} [151-151],
 assertEquals("user", data.get(0).key()); ref {data} [152-152],
 assertEquals("pass", data.get(1).key()); ref {data} [153-153],
 assertEquals("login", data.get(2).key()); ref {data} [154-154]
[m[m05.11.2021 - 00:07:48.621 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.FormElementTest::removeFormElement has 4 assertions: 
 assertEquals(2, data.size()); ref {data} [173-173],
 assertEquals("user", data.get(0).key()); ref {data} [174-174],
 assertEquals("login", data.get(1).key()); ref {data} [175-175],
 assertEquals(null, doc.selectFirst("input[name=pass]")); ref {doc} [176-176]
[m[m05.11.2021 - 00:07:48.625 [INFO ] ParsingStrategy.parseTestSuite() - Found 35 test cases
[m[m05.11.2021 - 00:07:48.625 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::simpleBehaviourTest has 1 assertions: 
 assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [25-25]
[m[m05.11.2021 - 00:07:48.625 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::simpleBehaviourTest2 has 1 assertions: 
 assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [32-32]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::basicBehaviourTest has 1 assertions: 
 assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [39-40]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::basicWithImagesTest has 1 assertions: 
 assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\"></p><p><img></p>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [46-46]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testRelaxed has 1 assertions: 
 assertEquals("<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [52-52]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testRemoveTags has 1 assertions: 
 assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [59-59]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testRemoveAttributes has 1 assertions: 
 assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [66-66]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testRemoveEnforcedAttributes has 1 assertions: 
 assertEquals("<p><a href=\"http://nice.com\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [73-74]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testRemoveProtocols has 1 assertions: 
 assertEquals("<p>Contact me <a rel=\"nofollow\">here</a></p>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [81-82]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::whitelistedProtocolShouldBeRetained has 1 assertions: 
 assertEquals("<a href=\"SOMETHING://x\"></a>", TextUtil.stripNewlines(cleanHtml)); ref {cleanHtml, TextUtil} [93-93]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testDropComments has 1 assertions: 
 assertEquals("<p>Hello</p>", cleanHtml); ref {cleanHtml} [99-99]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testDropXmlProc has 1 assertions: 
 assertEquals("<p>Hello</p>", cleanHtml); ref {cleanHtml} [105-105]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testDropScript has 1 assertions: 
 assertEquals("", cleanHtml); ref {cleanHtml} [111-111]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testDropImageScript has 1 assertions: 
 assertEquals("<img>", cleanHtml); ref {cleanHtml} [117-117]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testCleanJavascriptHref has 1 assertions: 
 assertEquals("<a>XSS</a>", cleanHtml); ref {cleanHtml} [123-123]
[m[m05.11.2021 - 00:07:48.626 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testCleanAnchorProtocol has 4 assertions: 
 assertEquals("<a>Valid anchor</a>", cleanHtml); ref {cleanHtml} [132-132],
 assertEquals("<a>Invalid anchor</a>", cleanHtml); ref {cleanHtml} [135-135],
 assertEquals(validAnchor, cleanHtml); ref {cleanHtml, validAnchor} [141-141],
 assertEquals("<a>Invalid anchor</a>", cleanHtml); ref {cleanHtml} [145-145]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testDropsUnknownTags has 1 assertions: 
 assertEquals("<p>Test</p>", cleanHtml); ref {cleanHtml} [151-151]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testHandlesEmptyAttributes has 1 assertions: 
 assertEquals("<img alt=\"\">", cleanHtml); ref {cleanHtml} [157-157]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testIsValidBodyHtml has 10 assertions: 
 assertTrue(Jsoup.isValid(ok, Whitelist.basic())); ref {Jsoup, Whitelist, ok} [170-170],
 assertTrue(Jsoup.isValid(ok1, Whitelist.basic())); ref {ok1, Jsoup, Whitelist} [171-171],
 assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); ref {nok1, Jsoup, Whitelist} [172-172],
 assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); ref {Jsoup, Whitelist, nok2} [173-173],
 assertFalse(Jsoup.isValid(nok3, Whitelist.basic())); ref {Jsoup, Whitelist, nok3} [174-174],
 assertFalse(Jsoup.isValid(nok4, Whitelist.basic())); ref {Jsoup, nok4, Whitelist} [175-175],
 assertFalse(Jsoup.isValid(nok5, Whitelist.basic())); ref {nok5, Jsoup, Whitelist} [176-176],
 assertFalse(Jsoup.isValid(nok6, Whitelist.basic())); ref {Jsoup, Whitelist, nok6} [177-177],
 assertFalse(Jsoup.isValid(ok, Whitelist.none())); ref {Jsoup, Whitelist, ok} [178-178],
 assertFalse(Jsoup.isValid(nok7, Whitelist.basic())); ref {Jsoup, Whitelist, nok7} [179-179]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testIsValidDocument has 3 assertions: 
 assertTrue(cleaner.isValid(okDoc)); ref {okDoc, cleaner} [189-189],
 assertFalse(cleaner.isValid(Jsoup.parse(nok))); ref {cleaner, Jsoup, nok} [190-190],
 assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc)); ref {okDoc, Whitelist} [191-191]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::resolvesRelativeLinks has 1 assertions: 
 assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>\n<img src=\"http://example.com/bar\">", clean); ref {clean} [197-197]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::preservesRelativeLinksIfConfigured has 1 assertions: 
 assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a>\n<img src=\"/bar\"> \n<img>", clean); ref {clean} [203-203]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::dropsUnresolvableRelativeLinks has 1 assertions: 
 assertEquals("<a rel=\"nofollow\">Link</a>", clean); ref {clean} [209-209]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::handlesCustomProtocols has 2 assertions: 
 assertEquals("<img> \n<img>", dropped); ref {dropped} [215-215],
 assertEquals("<img src=\"cid:12345\"> \n<img src=\"data:gzzt\">", preserved); ref {preserved} [218-218]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::handlesAllPseudoTag has 1 assertions: 
 assertEquals("<p class=\"foo\"><a class=\"qux\">link</a></p>", clean); ref {clean} [229-229]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::addsTagOnAttributesIfNotSet has 1 assertions: 
 assertEquals("<p class=\"foo\">One</p>", clean); ref {clean} [238-238]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::supplyOutputSettings has 4 assertions: 
 assertNotSame(defaultOut, customOut); ref {customOut, defaultOut} [251-251],
 // entities now prefers shorted names if aliased
assertEquals("<div><p>&Bscr;</p></div>", customOut); ref {customOut} [253-253],
 assertEquals("<div>\n" + " <p>ℬ</p>\n" + "</div>", defaultOut); ref {defaultOut} [254-256],
 assertEquals("<div><p>&#x212c;</p></div>", customOut2); ref {customOut2} [261-261]
[m[m05.11.2021 - 00:07:48.627 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::handlesFramesets has 3 assertions: 
 // nothing good can come out of that
assertEquals("", clean); ref {clean} [267-267],
 assertNotNull(cleanDoc); ref {cleanDoc} [271-271],
 assertEquals(0, cleanDoc.body().childNodeSize()); ref {cleanDoc} [272-272]
[m[m05.11.2021 - 00:07:48.628 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::cleansInternationalText has 1 assertions: 
 assertEquals("привет", Jsoup.clean("привет", Whitelist.none())); ref {Jsoup, Whitelist} [276-276]
[m[m05.11.2021 - 00:07:48.628 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::testScriptTagInWhiteList has 1 assertions: 
 assertTrue(Jsoup.isValid("Hello<script>alert('Doh')</script>World !", whitelist)); ref {Jsoup, whitelist} [283-283]
[m[m05.11.2021 - 00:07:48.628 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::bailsIfRemovingProtocolThatsNotSet has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.628 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::handlesControlCharactersAfterTagName has 1 assertions: 
 assertEquals("<a rel=\"nofollow\"></a>", clean); ref {clean} [299-299]
[m[m05.11.2021 - 00:07:48.628 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::handlesAttributesWithNoValue has 1 assertions: 
 assertEquals("<a rel=\"nofollow\">Clean</a>", clean); ref {clean} [306-306]
[m[m05.11.2021 - 00:07:48.628 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::handlesNoHrefAttribute has 1 assertions: 
 assertEquals("<a>One</a> <a>Two</a>", clean); ref {clean} [313-313]
[m[m05.11.2021 - 00:07:48.628 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.safety.CleanerTest::handlesNestedQuotesInAttribute has 2 assertions: 
 // only difference is pretty print wrap & indent
assertEquals(orig, TextUtil.stripNewlines(clean)); ref {orig, TextUtil, clean} [325-325],
 assertTrue(isValid); ref {isValid} [326-326]
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.parseTestSuite() - Found 17 test cases
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::firstChild has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::lastChild has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthChild_simple has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthOfType_unknownTag has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthLastChild_simple has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthOfType_simple has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthLastOfType_simple has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthChild_advanced has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthOfType_advanced has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthLastChild_advanced has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.630 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::nthLastOfType_advanced has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.631 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::firstOfType has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.631 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::lastOfType has 0 assertions: 
 
[m[m05.11.2021 - 00:07:48.631 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::empty has 4 assertions: 
 assertEquals(3, sel.size()); ref {sel} [171-171],
 assertEquals("head", sel.get(0).tagName()); ref {sel} [172-172],
 assertEquals("br", sel.get(1).tagName()); ref {sel} [173-173],
 assertEquals("p", sel.get(2).tagName()); ref {sel} [174-174]
[m[m05.11.2021 - 00:07:48.631 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::onlyChild has 2 assertions: 
 assertEquals(1, sel.size()); ref {sel} [180-180],
 assertEquals("br", sel.get(0).tagName()); ref {sel} [181-181]
[m[m05.11.2021 - 00:07:48.631 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::onlyOfType has 8 assertions: 
 assertEquals(6, sel.size()); ref {sel} [189-189],
 assertEquals("head", sel.get(0).tagName()); ref {sel} [190-190],
 assertEquals("body", sel.get(1).tagName()); ref {sel} [191-191],
 assertEquals("span", sel.get(2).tagName()); ref {sel} [192-192],
 assertEquals("br", sel.get(3).tagName()); ref {sel} [193-193],
 assertEquals("p", sel.get(4).tagName()); ref {sel} [194-194],
 assertTrue(sel.get(4).hasClass("empty")); ref {sel} [195-195],
 assertEquals("em", sel.get(5).tagName()); ref {sel} [196-196]
[m[m05.11.2021 - 00:07:48.631 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.select.CssTest::root has 6 assertions: 
 assertEquals(1, sel.size()); ref {sel} [211-211],
 assertNotNull(sel.get(0)); ref {sel} [212-212],
 assertEquals(Tag.valueOf("html"), sel.get(0).tag()); ref {Tag, sel} [213-213],
 assertEquals(1, sel2.size()); ref {sel2} [216-216],
 assertNotNull(sel2.get(0)); ref {sel2} [217-217],
 assertEquals(Tag.valueOf("body"), sel2.get(0).tag()); ref {Tag, sel2} [218-218]
[m[m05.11.2021 - 00:07:48.631 [INFO ] ParsingStrategy.parseTestSuite() - Found 0 test cases
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.parseTestSuite() - Found 9 test cases
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::join has 3 assertions: 
 assertEquals("", StringUtil.join(Arrays.asList(""), " ")); ref {StringUtil, Arrays} [17-17],
 assertEquals("one", StringUtil.join(Arrays.asList("one"), " ")); ref {StringUtil, Arrays} [18-18],
 assertEquals("one two three", StringUtil.join(Arrays.asList("one", "two", "three"), " ")); ref {StringUtil, Arrays} [19-19]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::padding has 5 assertions: 
 assertEquals("", StringUtil.padding(0)); ref {StringUtil} [23-23],
 assertEquals(" ", StringUtil.padding(1)); ref {StringUtil} [24-24],
 assertEquals("  ", StringUtil.padding(2)); ref {StringUtil} [25-25],
 assertEquals("               ", StringUtil.padding(15)); ref {StringUtil} [26-26],
 assertEquals("                                             ", StringUtil.padding(45)); ref {StringUtil} [27-27]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::paddingInACan has 2 assertions: 
 assertEquals(21, padding.length); ref {padding, padding.length} [32-32],
 assertEquals(i, padding[i].length()); ref {padding, i} [34-34]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::isBlank has 6 assertions: 
 assertTrue(StringUtil.isBlank(null)); ref {StringUtil} [39-39],
 assertTrue(StringUtil.isBlank("")); ref {StringUtil} [40-40],
 assertTrue(StringUtil.isBlank("      ")); ref {StringUtil} [41-41],
 assertTrue(StringUtil.isBlank("   \r\n  ")); ref {StringUtil} [42-42],
 assertFalse(StringUtil.isBlank("hello")); ref {StringUtil} [44-44],
 assertFalse(StringUtil.isBlank("   hello   ")); ref {StringUtil} [45-45]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::isNumeric has 7 assertions: 
 assertFalse(StringUtil.isNumeric(null)); ref {StringUtil} [49-49],
 assertFalse(StringUtil.isNumeric(" ")); ref {StringUtil} [50-50],
 assertFalse(StringUtil.isNumeric("123 546")); ref {StringUtil} [51-51],
 assertFalse(StringUtil.isNumeric("hello")); ref {StringUtil} [52-52],
 assertFalse(StringUtil.isNumeric("123.334")); ref {StringUtil} [53-53],
 assertTrue(StringUtil.isNumeric("1")); ref {StringUtil} [55-55],
 assertTrue(StringUtil.isNumeric("1234")); ref {StringUtil} [56-56]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::isWhitespace has 8 assertions: 
 assertTrue(StringUtil.isWhitespace('\t')); ref {StringUtil} [60-60],
 assertTrue(StringUtil.isWhitespace('\n')); ref {StringUtil} [61-61],
 assertTrue(StringUtil.isWhitespace('\r')); ref {StringUtil} [62-62],
 assertTrue(StringUtil.isWhitespace('\f')); ref {StringUtil} [63-63],
 assertTrue(StringUtil.isWhitespace(' ')); ref {StringUtil} [64-64],
 assertFalse(StringUtil.isWhitespace('\u00a0')); ref {StringUtil} [66-66],
 assertFalse(StringUtil.isWhitespace('\u2000')); ref {StringUtil} [67-67],
 assertFalse(StringUtil.isWhitespace('\u3000')); ref {StringUtil} [68-68]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::normaliseWhiteSpace has 4 assertions: 
 assertEquals(" ", normaliseWhitespace("    \r \n \r\n")); ref {} [72-72],
 assertEquals(" hello there ", normaliseWhitespace("   hello   \r \n  there    \n")); ref {} [73-73],
 assertEquals("hello", normaliseWhitespace("hello")); ref {} [74-74],
 assertEquals("hello there", normaliseWhitespace("hello\nthere")); ref {} [75-75]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::normaliseWhiteSpaceHandlesHighSurrogates has 2 assertions: 
 assertEquals(test71540charsExpectedSingleWhitespace, normaliseWhitespace(test71540chars)); ref {test71540chars, test71540charsExpectedSingleWhitespace} [82-82],
 assertEquals(test71540charsExpectedSingleWhitespace, extractedText); ref {extractedText, test71540charsExpectedSingleWhitespace} [84-84]
[m[m05.11.2021 - 00:07:48.633 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.internal.StringUtilTest::resolvesRelativeUrls has 14 assertions: 
 assertEquals("http://example.com/one/two?three", resolve("http://example.com", "./one/two?three")); ref {} [88-88],
 assertEquals("http://example.com/one/two?three", resolve("http://example.com?one", "./one/two?three")); ref {} [89-89],
 assertEquals("http://example.com/one/two?three#four", resolve("http://example.com", "./one/two?three#four")); ref {} [90-90],
 assertEquals("https://example.com/one", resolve("http://example.com/", "https://example.com/one")); ref {} [91-91],
 assertEquals("http://example.com/one/two.html", resolve("http://example.com/two/", "../one/two.html")); ref {} [92-92],
 assertEquals("https://example2.com/one", resolve("https://example.com/", "//example2.com/one")); ref {} [93-93],
 assertEquals("https://example.com:8080/one", resolve("https://example.com:8080", "./one")); ref {} [94-94],
 assertEquals("https://example2.com/one", resolve("http://example.com/", "https://example2.com/one")); ref {} [95-95],
 assertEquals("https://example.com/one", resolve("wrong", "https://example.com/one")); ref {} [96-96],
 assertEquals("https://example.com/one", resolve("https://example.com/one", "")); ref {} [97-97],
 assertEquals("", resolve("wrong", "also wrong")); ref {} [98-98],
 assertEquals("ftp://example.com/one", resolve("ftp://example.com/two/", "../one")); ref {} [99-99],
 assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "./two.c")); ref {} [100-100],
 assertEquals("ftp://example.com/one/two.c", resolve("ftp://example.com/one/", "two.c")); ref {} [101-101]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.parseTestSuite() - Found 25 test cases
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::handlesBaseUri has 7 assertions: 
 // with no base, should NOT fallback to href attrib, whatever it is
assertEquals("", noBase.absUrl("relHref")); ref {noBase} [24-24],
 // no base but valid attrib, return attrib
assertEquals("http://bar/qux", noBase.absUrl("absHref")); ref {noBase} [25-25],
 // construct abs from base + rel
assertEquals("http://foo/foo", withBase.absUrl("relHref")); ref {withBase} [28-28],
 // href is abs, so returns that
assertEquals("http://bar/qux", withBase.absUrl("absHref")); ref {withBase} [29-29],
 assertEquals("", withBase.absUrl("noval")); ref {withBase} [30-30],
 // base fails, but href good, so get that
assertEquals("http://bar/qux", dodgyBase.absUrl("absHref")); ref {dodgyBase} [33-33],
 // base fails, only rel href, so return nothing
assertEquals("", dodgyBase.absUrl("relHref")); ref {dodgyBase} [34-34]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::setBaseUriIsRecursive has 3 assertions: 
 assertEquals(baseUri, doc.baseUri()); ref {baseUri, doc} [42-42],
 assertEquals(baseUri, doc.select("div").first().baseUri()); ref {baseUri, doc} [43-43],
 assertEquals(baseUri, doc.select("p").first().baseUri()); ref {baseUri, doc} [44-44]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::handlesAbsPrefix has 3 assertions: 
 assertEquals("/foo", a.attr("href")); ref {a} [50-50],
 assertEquals("https://jsoup.org/foo", a.attr("abs:href")); ref {a} [51-51],
 assertTrue(a.hasAttr("abs:href")); ref {a} [52-52]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::handlesAbsOnImage has 2 assertions: 
 assertEquals("https://jsoup.org/rez/osi_logo.png", img.attr("abs:src")); ref {img} [58-58],
 assertEquals(img.absUrl("src"), img.attr("abs:src")); ref {img} [59-59]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::handlesAbsPrefixOnHasAttr has 6 assertions: 
 assertFalse(one.hasAttr("abs:href")); ref {one} [68-68],
 assertTrue(one.hasAttr("href")); ref {one} [69-69],
 assertEquals("", one.absUrl("href")); ref {one} [70-70],
 assertTrue(two.hasAttr("abs:href")); ref {two} [72-72],
 assertTrue(two.hasAttr("href")); ref {two} [73-73],
 assertEquals("https://jsoup.org/", two.absUrl("href")); ref {two} [74-74]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::literalAbsPrefix has 2 assertions: 
 assertTrue(el.hasAttr("abs:href")); ref {el} [81-81],
 assertEquals("odd", el.attr("abs:href")); ref {el} [82-82]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::handleAbsOnFileUris has 2 assertions: 
 assertEquals("file:/etc/password", one.absUrl("href")); ref {one} [88-88],
 assertEquals("file:/var/log/messages", two.absUrl("href")); ref {two} [90-90]
[m[m05.11.2021 - 00:07:48.638 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::handleAbsOnLocalhostFileUris has 1 assertions: 
 assertEquals("file://localhost/etc/password", one.absUrl("href")); ref {one} [97-97]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::handlesAbsOnProtocolessAbsoluteUris has 3 assertions: 
 assertEquals("http://example.net/foo", one.absUrl("href")); ref {one} [108-108],
 assertEquals("https://example.net/foo", two.absUrl("href")); ref {two} [109-109],
 assertEquals("https://www.google.com/images/errors/logo_sm.gif", doc3.select("img").attr("abs:src")); ref {doc3} [112-112]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::absHandlesRelativeQuery has 2 assertions: 
 assertEquals("https://jsoup.org/path/file?foo", a1.absUrl("href")); ref {a1} [122-122],
 assertEquals("https://jsoup.org/path/bar.html?foo", a2.absUrl("href")); ref {a2} [125-125]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::absHandlesDotFromIndex has 1 assertions: 
 assertEquals("http://example.com/one/two.html", a1.absUrl("href")); ref {a1} [131-131]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::testRemove has 2 assertions: 
 assertEquals("two three", p.text()); ref {p} [139-139],
 assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html())); ref {p, TextUtil} [140-140]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::testReplace has 1 assertions: 
 assertEquals("One <em>foo</em> three", p.html()); ref {p} [149-149]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::ownerDocument has 3 assertions: 
 assertTrue(p.ownerDocument() == doc); ref {p, doc} [155-155],
 assertTrue(doc.ownerDocument() == doc); ref {doc} [156-156],
 assertNull(doc.parent()); ref {doc} [157-157]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::root has 7 assertions: 
 assertTrue(doc == root); ref {root, doc} [164-164],
 assertNull(root.parent()); ref {root} [165-165],
 assertTrue(doc.root() == doc); ref {doc} [166-166],
 assertTrue(doc.root() == doc.ownerDocument()); ref {doc} [167-167],
 assertTrue(standAlone.parent() == null); ref {standAlone} [170-170],
 assertTrue(standAlone.root() == standAlone); ref {standAlone} [171-171],
 assertTrue(standAlone.ownerDocument() == null); ref {standAlone} [172-172]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::before has 2 assertions: 
 assertEquals("<p>One <em>four</em><b>two</b> three</p>", doc.body().html()); ref {doc} [181-181],
 assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html()); ref {doc} [184-184]
[m[m05.11.2021 - 00:07:48.639 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::after has 2 assertions: 
 assertEquals("<p>One <b>two</b><em>four</em> three</p>", doc.body().html()); ref {doc} [193-193],
 assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html()); ref {doc} [196-196]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::unwrap has 5 assertions: 
 assertEquals("<div>One Two <b>Three</b> Four</div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [205-205],
 assertTrue(node instanceof TextNode); ref {node} [206-206],
 assertEquals("Two ", ((TextNode) node).text()); ref {node} [207-207],
 assertEquals(node, twoText); ref {node, twoText} [208-208],
 assertEquals(node.parent(), doc.select("div").first()); ref {node, doc} [209-209]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::unwrapNoChildren has 2 assertions: 
 assertEquals("<div>One  Two</div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [216-216],
 assertTrue(node == null); ref {node} [217-217]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::traverse has 1 assertions: 
 assertEquals("<div><p><#text></#text></p></div>", accum.toString()); ref {accum} [234-234]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::orphanNodeReturnsNullForSiblingElements has 7 assertions: 
 assertEquals(0, node.siblingIndex()); ref {node} [241-241],
 assertEquals(0, node.siblingNodes().size()); ref {node} [242-242],
 assertNull(node.previousSibling()); ref {node} [244-244],
 assertNull(node.nextSibling()); ref {node} [245-245],
 assertEquals(0, el.siblingElements().size()); ref {el} [247-247],
 assertNull(el.previousElementSibling()); ref {el} [248-248],
 assertNull(el.nextElementSibling()); ref {el} [249-249]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::nodeIsNotASiblingOfItself has 4 assertions: 
 assertEquals("Two", p2.text()); ref {p2} [256-256],
 assertEquals(2, nodes.size()); ref {nodes} [258-258],
 assertEquals("<p>One</p>", nodes.get(0).outerHtml()); ref {nodes} [259-259],
 assertEquals("<p>Three</p>", nodes.get(1).outerHtml()); ref {nodes} [260-260]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::childNodesCopy has 3 assertions: 
 assertEquals(5, divChildren.size()); ref {divChildren} [268-268],
 assertEquals("Text 1 ", tn1.text()); ref {tn1} [272-272],
 assertEquals("<div id=\"1\">Text 1 <p>One</p> Text 2 <p>Two</p><p>Three</p></div><div id=\"2\">Text 1 updated" + "<p>One</p> Text 2 <p>Two</p><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html())); ref {TextUtil, doc} [274-275]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::supportsClone has 7 assertions: 
 assertTrue(el.hasClass("foo")); ref {el} [281-281],
 assertTrue(elClone.hasClass("foo")); ref {elClone} [284-284],
 assertTrue(elClone.text().equals("Text")); ref {elClone} [285-285],
 assertFalse(el.hasClass("foo")); ref {el} [289-289],
 assertTrue(elClone.hasClass("foo")); ref {elClone} [290-290],
 assertTrue(el.text().equals("None")); ref {el} [291-291],
 assertTrue(elClone.text().equals("Text")); ref {elClone} [292-292]
[m[m05.11.2021 - 00:07:48.640 [INFO ] ParsingStrategy.lambda$parseTestSuite$14() - Testcase org.jsoup.nodes.NodeTest::changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive has 1 assertions: 
 assertEquals(singletonAttributes("value", "bar"), getAttributesCaseInsensitive(inputElement, "value")); ref {inputElement} [301-301]
[m[m05.11.2021 - 00:07:48.642 [INFO ] ParsingStrategy.mergePartialSuites() - ====================================================================
[m[m05.11.2021 - 00:07:48.642 [INFO ] ParsingStrategy.mergePartialSuites() - Finished parsing the test suite.
[m[m05.11.2021 - 00:07:48.644 [INFO ] ParsingStrategy.mergePartialSuites() - It contains 723 test cases and 2177 assertions.
[m[m05.11.2021 - 00:07:48.814 [INFO ] JUnitTestSuiteReducer.reduce() - Starting test suite reduction
[m[32m05.11.2021 - 00:08:10.349 [DEBUG] GeneticReductionStrategy.reduce() - Jenetics Statistics:
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Time statistics                                                          |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |             Selection: sum=0,013499775000 s; mean=0,000899985000 s        |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Altering: sum=0,408025260000 s; mean=0,027201684000 s        |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |   Fitness calculation: sum=19,965487060000 s; mean=1,331032470667 s       |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |     Overall execution: sum=20,391848857000 s; mean=1,359456590467 s       |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Evolution statistics                                                     |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |           Generations: 15                                                 |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Altered: sum=2 470 951; mean=164730,066666667               |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                Killed: sum=0; mean=0,000000000                            |
[m[32m05.11.2021 - 00:08:10.366 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |              Invalids: sum=0; mean=0,000000000                            |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |  Population statistics                                                    |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                   Age: max=11; mean=0,842667; var=1,547295                |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |               Fitness:                                                    |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      min  = -1,000000000000                               |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      max  = -1,000000000000                               |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      mean = -1,000000000000                               |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      var  = 0,000000000000                                |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - |                      std  = 0,000000000000                                |
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.forEachRemaining() - +---------------------------------------------------------------------------+
[m[32m05.11.2021 - 00:08:10.367 [DEBUG] GeneticReductionStrategy.reduce() - Best Result:
[m[32m05.11.2021 - 00:08:10.368 [DEBUG] GeneticReductionStrategy.reduce() - [00000111|01100111|11111111|11011111|01111111|01111111|11110011|10101111|11111111|11111101|01111111|01111001|11111111|11111111|11110111|10101111|11011111|11111111|11111101|11111101|10101011|11011111|11111111|01111111|11111110|11111011|11101010|10111101|11110101|11111111|11111111|10111011|11111111|11111111|11111111|11111111|11111111|11111110|11111111|11111111|11111111|11111110|11111101|11111110|11110111|11110111|11111111|11110010|11111111|11111111|11111111|01111111|10111111|11111111|11101111|01111011|10110111|11111111|11101111|10101111|11111111|11111111|11111111|11111111|11111111|11101101|11011111|11111111|11111111|11110111|11111101|11101111|11111111|11110111|11101111|11111011|11111111|11011011|11111111|11101111|11110011|11111111|01111011|11111111|11111111|11111111|10111111|11110111|01111111|10100111|11101111|11111111] -> -1
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParsesMultiCorrectly
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptionOnUncloseAttribute
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParsesSingleQuoteInContains
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptOnEmptySelector
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptOnNullSelector
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping okOnSpacesForeAndAft
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping escape
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping escapedSupplementary
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unescapeMultiChars
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping xhtml
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping getByName
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping escapeSupplementaryCharacter
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping notMissingSupplementals
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unescape
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping strictUnescape
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping caseSensitive
[m[32m05.11.2021 - 00:08:10.801 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping letterDigitEntities
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noSpuriousDecodes
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping escapesGtInXmlAttributesButNotInHtml
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping isCaseSensitive
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canBeInsensitive
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping trims
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping equality
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping divSemantics
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping pSemantics
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping imgSemantics
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping defaultSemantics
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping valueOfChecksNotNull
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping valueOfChecksNotEmpty
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consume
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unconsume
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping mark
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consumeToEnd
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nextIndexOfChar
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nextIndexOfString
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nextIndexOfUnmatched
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consumeToString
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping advance
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consumeToAny
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consumeLetterSequence
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consumeLetterThenDigitSequence
[m[32m05.11.2021 - 00:08:10.802 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping matches
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping matchesIgnoreCase
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping containsIgnoreCase
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping matchesAny
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cachesStrings
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping rangeEquals
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping empty
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consumeToNonexistentEndWhenAtAnd
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping notEmptyAtBufferSplitPoint
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping bufferUp
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructorValidationThrowsExceptionOnNulls
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping constructorValidationOkWithBlankPublicAndSystemIds
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping outerHtmlGeneration
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoundTrip
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping html
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping validatesKeysNotEmpty
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping validatesKeysNotEmptyViaSet
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping booleanAttributesAreEmptyStringValues
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping settersOnOrphanAttribute
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBlank
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTextBean
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitText
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSplitAnEmbolden
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWithSupplementaryCharacter
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLeadNodesHaveNoChildren
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSpaceNormalise
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClone
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCloneAfterAttributesHit
[m[32m05.11.2021 - 00:08:10.803 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unescapeEntities
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesNewLinesAndReturns
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesEmptyString
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canStartWithEq
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping strictAttributeUnescapes
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping moreAttributeUnescapes
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesBooleanAttributes
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping dropsSlashFromAttributeName
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping caseSupport
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping attributesCaseNormalization
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSmhBizArticle
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNewsHomepage
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGoogleSearchIpod
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testYahooJp
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBaidu
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBaiduVariant
[m[32m05.11.2021 - 00:08:10.804 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHtml5Charset
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNytArticle
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testYahooArticle
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLowercaseUtf8Charset
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping getElementsByTagName
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping getNamespacedElementsByTag
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetElementById
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetText
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetChildText
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalisesText
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testKeepsPreText
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testKeepsPreTextInCode
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testKeepsPreTextAtDepth
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBrHasSpace
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWholeText
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSiblings
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetSiblingsWithDuplicateContent
[m[32m05.11.2021 - 00:08:10.805 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetParents
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testElementSiblingIndex
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testElementSiblingIndexSameContent
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetElementsWithClass
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetElementsWithAttribute
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetElementsWithAttributeDash
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetElementsWithAttributeValue
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClassDomMethods
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHasClassDomMethods
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClassUpdates
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOuterHtml
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInnerHtml
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatHtml
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFormatOutline
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetIndent
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotPretty
[m[32m05.11.2021 - 00:08:10.806 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNotPrettyWithEnDashBody
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrettyWithEnDashBody
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrettyAndOutlineWithEnDashBody
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBasicFormats
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEmptyElementFormatHtml
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoIndentOnScriptAndStyle
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testContainerOutput
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetText
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddNewElement
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddBooleanAttribute
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendRowToTable
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrependRowToTable
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrependElement
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrependText
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testThrowsOnAddNullText
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testThrowsOnPrependNullText
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAddNewHtml
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPrependNewHtml
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetHtml
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetHtmlTitle
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrap
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping after
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWrapWithRemainder
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHasText
[m[32m05.11.2021 - 00:08:10.807 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping dataset
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parentlessToString
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClone
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClonesClassnames
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShallowClone
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTagNameSet
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHtmlContainsOuter
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetTextNodes
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testManipulateTextNodes
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGetDataNodes
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping elementIsNotASiblingOfItself
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChildThrowsIndexOutOfBoundsOnMissing
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping moveByAppend
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping insertChildrenArgumentValidation
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping insertChildrenAtPosition
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping insertChildrenAsCopy
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClassNames
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashAndEqualsAndValue
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRelativeUrls
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping appendMustCorrectlyMoveChildrenInsideOneParentElement
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHashcodeIsStableWithContentChanges
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNamespacedElements
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping elementByTagName
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testChildrenElements
[m[32m05.11.2021 - 00:08:10.808 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShadowElementsAreUpdated
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping classNamesAndAttributeNameIsCaseInsensitive
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAppendTo
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalizesNbspInText
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalizesInvisiblesInText
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveBeforeIndex
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAfterIndex
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping whiteSpaceClassElement
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemovingEmptyClassAttributeWhenLastClassRemoved
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping booleanAttributeOutput
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping textHasSpaceAfterBlockTags
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping textHasSpaceBetweenDivAndCenterTags
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNextElementSiblings
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPreviousElementSiblings
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClearAttributes
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAttr
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRoot
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTraverse
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping voidTestFilterCallReturnsElement
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesntDeleteZWJWhenNormalizingText
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFastReparent
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFastReparentExistingContent
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReparentSeperateNodes
[m[32m05.11.2021 - 00:08:10.809 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping filter
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping hasAttr
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping hasAbsAttr
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping attr
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping absAttr
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping classes
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping hasClassCaseInsensitive
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping text
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping hasText
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping html
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping outerHtml
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping setHtml
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping val
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping before
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping after
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unwrap
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unwrapP
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unwrapKeepsSpace
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping empty
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping remove
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping is
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parents
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping not
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping tagNameSet
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping traverse
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping forms
[m[32m05.11.2021 - 00:08:10.810 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping siblings
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping eachText
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping eachAttr
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ensureArraysAreSorted
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSimpleXmlParse
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCommentAndDocType
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupplyParserToJsoupClass
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupplyParserToDataStream
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoesNotForceSelfClosingKnownTags
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesXmlDeclarationAsDeclaration
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping xmlFragment
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping xmlParseDefaultsToHtmlOutputSyntax
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDoesHandleEOFInTag
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDetectCharsetEncodingDeclaration
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testParseDeclarationAttributes
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCreatesValidProlog
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping preservesCaseByDefault
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping appendPreservesCaseByDefault
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canNormalizeCase
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping normalizesDiscordantTags
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping roundTripsCdata
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cdataPreservesWhiteSpace
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesDodgyXmlDecl
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesLTinScript
[m[32m05.11.2021 - 00:08:10.811 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping dropsDuplicateAttributes
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping throwsExceptionOnParseWithoutExecute
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping throwsExceptionOnBodyWithoutExecute
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping caseInsensitiveHeaders
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping headers
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sameHeadersCombineWithComma
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping multipleHeaders
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ignoresEmptySetCookies
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping connectWithUrl
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping throwsOnMalformedUrl
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping userAgent
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping timeout
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping referrer
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping method
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping data
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cookie
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping inputStream
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping requestBody
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noUrlThrowsValidationError
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ensureSearchArraysAreSorted
[m[32m05.11.2021 - 00:08:10.812 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping filterVisit
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping filterSkipEntirely
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping filterRemove
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping filterStop
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ensureSearchArraysAreSorted
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharacterReferenceInRcdata
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBeforeTagName
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testEndTagOpen
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRcdataLessthanSign
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCommentEndCoverage
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCommentEndBangCoverage
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPublicIdentifiersWithWhitespace
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPublicAndSystemIdentifiersWithWhitespace
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUnconsumeAtBufferBoundary
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOpeningAngleBracketInsteadOfAttribute
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOpeningAngleBracketInTagName
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canConnectToLocalServer
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping fetchURl
[m[32m05.11.2021 - 00:08:10.813 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping fetchURIWithWhitespace
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping exceptOnUnsupportedProtocol
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping throwsExceptionOn404
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ignoresExceptionIfSoConfigured
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesPost
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesPostMultipartWithoutInputstream
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sendsRequestBodyJsonWithData
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sendsRequestBodyJsonWithoutData
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sendsRequestBody
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping sendsRequestBodyWithUrlParams
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesGet
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesPut
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping postFiles
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping multipleParsesOkAfterBufferUp
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping bodyAndBytesAvailableBeforeParse
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parseParseThrowsValidates
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping multiCookieSet
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesLargerContentLengthParseRead
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesWrongContentLengthDuringBufferedRead
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesRedirect
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesEmptyRedirect
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesNotPostFor302
[m[32m05.11.2021 - 00:08:10.814 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesPostFor307
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping getUtf8Bom
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testBinaryContentTypeThrowsException
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canFetchBinaryAsBytes
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnknownEscapesAcrossBuffer
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping setTextPreservesDocumentStructure
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTitles
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testOutputEncoding
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testXhtmlReferences
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalisesStructure
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testClone
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testLocation
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHtmlAndXmlSyntax
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping htmlParseDefaultsToHtmlOutputSyntax
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHtmlAppendable
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping DocumentsWithSameContentAreEqual
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping DocumentsWithSameContentAreVerifiable
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateUtf8
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateIso8859
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateNoCharset
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateDisabled
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateDisabledNoChanges
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateEnabledAfterCharsetChange
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateCleanup
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateXmlUtf8
[m[32m05.11.2021 - 00:08:10.815 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateXmlIso8859
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateXmlNoCharset
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdateXmlDisabled
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMetaCharsetUpdatedDisabledPerDefault
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testShiftJisRoundtrip
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDocumentTypeGet
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleSuperLargeTagNames
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleSuperLargeAttributeName
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleLargeComment
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleLargeCdata
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleLargeTitle
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cp1252Entities
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cp1252EntitiesProduceError
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cp1252SubstitutionTable
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canParseCdataEndingAtEdgeOfBuffer
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testQuotedCharset
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping discardsSpuriousByteOrderMark
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping discardsSpuriousByteOrderMarkWhenNoCharsetSet
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping shouldNotThrowExceptionOnEmptyCharset
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping shouldCorrectCharsetForDuplicateCharsetString
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping shouldReturnNullForIllegalCharsetNames
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping generatesMimeBoundaries
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping wrongMetaCharsetFallback
[m[32m05.11.2021 - 00:08:10.816 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping secondMetaElementWithContentTypeContainsCharsetParameter
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping firstMetaElementWithCharsetShouldBeUsedForDecoding
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping supportsBOMinFiles
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping supportsUTF8BOM
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping supportsXmlCharsetDeclaration
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByTag
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testById
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByClass
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByClassCaseInsensitive
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByAttribute
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNamespacedTag
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWildcardNamespacedTag
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWildcardNamespacedXmlTag
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testWildCardNamespacedCaseVariations
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByAttributeRegex
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByAttributeRegexCharacterClass
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testByAttributeRegexCombined
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCombinedWithContains
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAllElements
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAllWithClass
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testGroupOr
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping descendant
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping and
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping deeperDescendant
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parentWithClassChild
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parentChildStar
[m[32m05.11.2021 - 00:08:10.817 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping multiChildDescent
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping caseInsensitive
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping adjacentSiblings
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping adjacentSiblingsWithId
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping notAdjacent
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping mixCombinator
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping mixCombinatorGroup
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping generalSiblings
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCharactersInIdAndClass
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupportsLeadingCombinator
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPseudoLessThan
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPseudoGreaterThan
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPseudoEquals
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPseudoBetween
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPseudoCombined
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPseudoHas
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNestedHas
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testPsuedoContainsWithParentheses
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping containsOwn
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testMatches
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping matchesOwn
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRelaxedTags
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping notParas
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping notAll
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesCommasInSelector
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping selectSupplementaryCharacter
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping selectClassWithSpace
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping selectSameElements
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping attributeWithBrackets
[m[32m05.11.2021 - 00:08:10.818 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping selectFirstWithOr
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping matchText
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping splitOnBr
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping matchTextAttributes
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping findBetweenSpan
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping startsWithBeginsWithSpace
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping endsWithEndsWithSpaces
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping html_mixed_case_simple_name
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping html_mixed_case_wildcard_name
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping html_lowercase_simple_name
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping html_lowercase_wildcard_name
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping xml_mixed_case_wildcard_name
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping xml_lowercase_simple_name
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping trimSelector
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping xmlWildcardNamespaceTest
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesSimpleDocument
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesRoughAttributes
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping dropsDuplicateAttributes
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping retainsAttributesOfDifferentCaseIfSensitive
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesQuiteRoughAttributes
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesComments
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesUnterminatedComments
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping dropsUnterminatedTag
[m[32m05.11.2021 - 00:08:10.819 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping dropsUnterminatedAttribute
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesUnterminatedTextarea
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesUnterminatedOption
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSelectWithOption
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSpaceAfterTag
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping createsStructureFromBodySnippet
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesDataOnlyTags
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesTextAfterData
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesTextArea
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping preservesSpaceInTextArea
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping preservesSpaceInScript
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesNotCreateImplicitLists
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping discardsNakedTds
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesNestedImplicitTable
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesWhatWgExpensesTableExample
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesTbodyTable
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesImplicitCaptionClose
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noTableDirectInTable
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ignoresDupeEndTrTag
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesBaseTags
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesCdata
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping roundTripsCdata
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesCdataAcrossBuffer
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesCdataInScript
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedCdataAtEOF
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleCDataInText
[m[32m05.11.2021 - 00:08:10.820 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cdataNodesAreTextNodes
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesInvalidStartTags
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnknownTags
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnknownInlineTags
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping parsesBodyFragment
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnknownNamespaceTags
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesKnownEmptyBlocks
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesKnownEmptyNoFrames
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesKnownEmptyStyle
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesKnownEmptyTitle
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesKnownEmptyIframe
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesSolidusAtAttributeEnd
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesMultiClosingBody
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedDefinitionLists
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesFrames
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ignoresContentAfterFrameset
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesJavadocFont
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesBaseWithoutHref
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping normalisesDocument
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping normalisesHeadlessBody
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping normalisedBodyAfterContent
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping findsCharsetInMalformedMeta
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHgroup
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRelaxedTags
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHeaderContents
[m[32m05.11.2021 - 00:08:10.821 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSpanContents
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoImagesInNoScriptInHead
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testAFlowContents
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFontFlowContents
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesMisnestedTagsBP
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnexpectedMarkupInTables
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedFormattingElements
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedAnchors
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping reconstructFormattingElements
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping reconstructFormattingElementsInTable
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping emptyTdTag
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesSolidusInA
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesSpanInTbody
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedTitleAtEof
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedTitle
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedScriptAtEof
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesUnclosedRawtextAtEof
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noImplicitFormForTextAreas
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesEscapedScript
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handles0CharacterAsText
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesNullInData
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesNullInComments
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesNewlinesAndWhitespaceInTag
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesWhitespaceInoDocType
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping tracksErrorsWhenRequested
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping tracksLimitedErrorsWhenRequested
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping noErrorsByDefault
[m[32m05.11.2021 - 00:08:10.822 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesCommentsInTable
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesQuotesInCommentsInScripts
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleNullContextInParseFragment
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping doesNotFindShortestMatchingEntity
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping relaxedBaseEntityMatchAndStrictExtendedMatch
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesXmlDeclarationAsBogusComment
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesTagsInTextarea
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping associatedFormControlsWithDisjointForms
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesInputInTable
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping convertsImageToImg
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesManyChildren
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesDeepStack
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testInvalidTableContents
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNormalisesIsIndex
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReinsertionModeForThCelss
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUsingSingleQuotesInQueries
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupportsNonAsciiTags
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSupportsPartiallyNonAsciiTags
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFragment
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHtmlLowerCase
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canPreserveTagCase
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canPreserveAttributeCase
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping canPreserveBothCase
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesControlCodeInAttributeName
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping caseSensitiveParseTree
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping caseInsensitiveParseTree
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping preservedCaseLinksCantNest
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping normalizesDiscordantTags
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping selfClosingVoidIsNotAnError
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping selfClosingOnNonvoidIsError
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testTemplateInsideTable
[m[32m05.11.2021 - 00:08:10.823 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandlesDeepSpans
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping commentAtEnd
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping preSkipsFirstNewline
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesXmlDeclAndCommentsBeforeDoctype
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping fallbackToUtfIfCantEncode
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping characterReaderBuffer
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping selfClosingTextAreaDoesntLeaveDroppings
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNoSpuriousSpace
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testH20
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testUNewlines
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testFarsi
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping html
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIteratorRemovable
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIteratorUpdateable
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIteratorHasNext
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIterator
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIteratorEmpty
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping removeCaseSensitive
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testSetKeyConsistency
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping chompBalanced
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping chompEscapedBalanced
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping chompBalancedMatchesAsMuchAsPossible
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping chompToIgnoreCase
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping addFirst
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping consumeToIgnoreSecondCallTest
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testNestedQuotes
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping chompBalancedThrowIllegalArgumentException
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping hasAssociatedControls
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping createsFormData
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping formDataUsesFirstAttribute
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping createsSubmitableConnection
[m[32m05.11.2021 - 00:08:10.824 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping actionWithNoBaseUri
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping formsAddedAfterParseAreFormElements
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping controlsAddedAfterParseAreLinkedWithForms
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping usesOnForCheckboxValueIfNoValueSet
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping adoptedFormsRetainInputs
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping removeFormElement
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping simpleBehaviourTest2
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping basicBehaviourTest
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping basicWithImagesTest
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveTags
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveAttributes
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveEnforcedAttributes
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemoveProtocols
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping whitelistedProtocolShouldBeRetained
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDropXmlProc
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDropScript
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDropImageScript
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCleanJavascriptHref
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testCleanAnchorProtocol
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testDropsUnknownTags
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testHandlesEmptyAttributes
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsValidBodyHtml
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testIsValidDocument
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping resolvesRelativeLinks
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping dropsUnresolvableRelativeLinks
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesCustomProtocols
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesAllPseudoTag
[m[32m05.11.2021 - 00:08:10.825 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping addsTagOnAttributesIfNotSet
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesFramesets
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping cleansInternationalText
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testScriptTagInWhiteList
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping bailsIfRemovingProtocolThatsNotSet
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesAttributesWithNoValue
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesNoHrefAttribute
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesNestedQuotesInAttribute
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping firstChild
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping lastChild
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthChild_simple
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthLastChild_simple
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthOfType_simple
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthLastOfType_simple
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthChild_advanced
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthOfType_advanced
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthLastChild_advanced
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nthLastOfType_advanced
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping firstOfType
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping lastOfType
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping empty
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping onlyChild
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping onlyOfType
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping root
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping padding
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping paddingInACan
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping isBlank
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping isNumeric
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping normaliseWhiteSpace
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping normaliseWhiteSpaceHandlesHighSurrogates
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping resolvesRelativeUrls
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping setBaseUriIsRecursive
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesAbsPrefix
[m[32m05.11.2021 - 00:08:10.826 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesAbsPrefixOnHasAttr
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping literalAbsPrefix
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleAbsOnFileUris
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handleAbsOnLocalhostFileUris
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping handlesAbsOnProtocolessAbsoluteUris
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping absHandlesRelativeQuery
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping absHandlesDotFromIndex
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testRemove
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping testReplace
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping ownerDocument
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping before
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping after
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unwrap
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping unwrapNoChildren
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping orphanNodeReturnsNullForSiblingElements
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping nodeIsNotASiblingOfItself
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping supportsClone
[m[32m05.11.2021 - 00:08:10.827 [DEBUG] GeneticReductionStrategy.lambda$reduce$2() - Keeping changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive
[m[m05.11.2021 - 00:08:10.833 [INFO ] JUnitTestSuiteReducer.reduce() - Finished test suite reduction
[m[m05.11.2021 - 00:08:10.833 [INFO ] JUnitTestSuiteReducer.reduce() - Reduced test suite from 723 to 644 test cases: 79 redundant test cases found
[m[m05.11.2021 - 00:08:10.835 [INFO ] JUnitTestSuiteReducer.generateReport() - Generated report and wrote it to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/tsr-report-%x%.xml
[m[m05.11.2021 - 00:08:10.835 [INFO ] CompilationUnitExtractor.parseCompilationUnitsFromFilePath() - Collecting compilation units from File Path ./src/test/java
[m[m05.11.2021 - 00:08:11.108 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote QueryParserTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/select/QueryParserTest.java
[m[m05.11.2021 - 00:08:11.109 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConnectIT.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/ConnectIT.java
[m[m05.11.2021 - 00:08:11.115 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote UrlConnectTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/UrlConnectTest.java
[m[m05.11.2021 - 00:08:11.116 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote InterruptedServlet.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/InterruptedServlet.java
[m[m05.11.2021 - 00:08:11.116 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Benchmark.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/Benchmark.java
[m[m05.11.2021 - 00:08:11.117 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote MultiLocaleRule.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/MultiLocaleRule.java
[m[m05.11.2021 - 00:08:11.118 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EntitiesTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/EntitiesTest.java
[m[m05.11.2021 - 00:08:11.119 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BuildEntities.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/BuildEntities.java
[m[m05.11.2021 - 00:08:11.120 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FileServlet.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/FileServlet.java
[m[m05.11.2021 - 00:08:11.120 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TagTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/TagTest.java
[m[m05.11.2021 - 00:08:11.123 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote W3CDomTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/helper/W3CDomTest.java
[m[m05.11.2021 - 00:08:11.125 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CharacterReaderTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/CharacterReaderTest.java
[m[m05.11.2021 - 00:08:11.125 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DocumentTypeTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/DocumentTypeTest.java
[m[m05.11.2021 - 00:08:11.126 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AttributeTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/AttributeTest.java
[m[m05.11.2021 - 00:08:11.127 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TextNodeTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/TextNodeTest.java
[m[m05.11.2021 - 00:08:11.127 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote BaseServlet.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/BaseServlet.java
[m[m05.11.2021 - 00:08:11.128 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ParserTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/ParserTest.java
[m[m05.11.2021 - 00:08:11.128 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HelloServlet.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/HelloServlet.java
[m[m05.11.2021 - 00:08:11.129 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AttributeParseTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/AttributeParseTest.java
[m[m05.11.2021 - 00:08:11.129 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ParserSettingsTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/ParserSettingsTest.java
[m[m05.11.2021 - 00:08:11.131 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ParseTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/ParseTest.java
[m[m05.11.2021 - 00:08:11.144 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ElementTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/ElementTest.java
[m[m05.11.2021 - 00:08:11.147 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ElementsTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/select/ElementsTest.java
[m[m05.11.2021 - 00:08:11.148 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConstrainableInputStreamTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/internal/ConstrainableInputStreamTest.java
[m[m05.11.2021 - 00:08:11.148 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HtmlTreeBuilderStateTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/HtmlTreeBuilderStateTest.java
[m[m05.11.2021 - 00:08:11.150 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote XmlTreeBuilderTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/XmlTreeBuilderTest.java
[m[m05.11.2021 - 00:08:11.154 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HttpConnectionTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/helper/HttpConnectionTest.java
[m[m05.11.2021 - 00:08:11.155 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HtmlTreeBuilderTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/HtmlTreeBuilderTest.java
[m[m05.11.2021 - 00:08:11.156 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TraversorTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/select/TraversorTest.java
[m[m05.11.2021 - 00:08:11.156 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SlowRider.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/SlowRider.java
[m[m05.11.2021 - 00:08:11.157 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TestServer.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/TestServer.java
[m[m05.11.2021 - 00:08:11.160 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TokeniserStateTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/TokeniserStateTest.java
[m[m05.11.2021 - 00:08:11.166 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ConnectTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/ConnectTest.java
[m[m05.11.2021 - 00:08:11.171 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DocumentTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/DocumentTest.java
[m[m05.11.2021 - 00:08:11.171 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote ParserIT.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/ParserIT.java
[m[m05.11.2021 - 00:08:11.174 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TokeniserTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/TokeniserTest.java
[m[m05.11.2021 - 00:08:11.175 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote RedirectServlet.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/RedirectServlet.java
[m[m05.11.2021 - 00:08:11.175 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TextUtil.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/TextUtil.java
[m[m05.11.2021 - 00:08:11.177 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote DataUtilTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/helper/DataUtilTest.java
[m[m05.11.2021 - 00:08:11.187 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote SelectorTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/select/SelectorTest.java
[m[m05.11.2021 - 00:08:11.188 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote Deflateservlet.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/Deflateservlet.java
[m[m05.11.2021 - 00:08:11.200 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote HtmlParserTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/HtmlParserTest.java
[m[m05.11.2021 - 00:08:11.201 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote AttributesTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/AttributesTest.java
[m[m05.11.2021 - 00:08:11.202 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote TokenQueueTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/parser/TokenQueueTest.java
[m[m05.11.2021 - 00:08:11.204 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote FormElementTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/FormElementTest.java
[m[m05.11.2021 - 00:08:11.207 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CleanerTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/safety/CleanerTest.java
[m[m05.11.2021 - 00:08:11.209 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote CssTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/select/CssTest.java
[m[m05.11.2021 - 00:08:11.210 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote EchoServlet.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/integration/servlets/EchoServlet.java
[m[m05.11.2021 - 00:08:11.211 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote StringUtilTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/internal/StringUtilTest.java
[m[m05.11.2021 - 00:08:11.213 [INFO ] JUnit4Serializer.writeCompilationUnit() - Wrote NodeTest.java to /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen/org/jsoup/nodes/NodeTest.java
[m[m05.11.2021 - 00:08:11.214 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[m[m05.11.2021 - 00:08:11.214 [INFO ] JUnitJSRFacade.logTime() - * Facade Statistics:
[m[m05.11.2021 - 00:08:11.214 [INFO ] JUnitJSRFacade.logTime() - * Parsing took: 1.101 seconds
[m[m05.11.2021 - 00:08:11.214 [INFO ] JUnitJSRFacade.logTime() - * Reduction took: 22.191 seconds
[m[m05.11.2021 - 00:08:11.214 [INFO ] JUnitJSRFacade.logTime() - * Serialization took: 0.378 seconds
[m[m05.11.2021 - 00:08:11.214 [INFO ] JUnitJSRFacade.logTime() - * Overall: 23.67 seconds
[m[m05.11.2021 - 00:08:11.214 [INFO ] JUnitJSRFacade.logTime() - ******************************************************************
[mSuccessfully reduced your test suite!
+----------------------------------- Summary -----------------------------------+
| Test suite size: 723 test cases
+-------------------------------------------------------------------------------+
| Found 644 relevant test cases:
|    org.jsoup.select.QueryParserTest:testParsesMultiCorrectly
|    org.jsoup.select.QueryParserTest:exceptionOnUncloseAttribute
|    org.jsoup.select.QueryParserTest:testParsesSingleQuoteInContains
|    org.jsoup.select.QueryParserTest:exceptOnEmptySelector
|    org.jsoup.select.QueryParserTest:exceptOnNullSelector
|    org.jsoup.select.QueryParserTest:okOnSpacesForeAndAft
|    org.jsoup.nodes.EntitiesTest:escape
|    org.jsoup.nodes.EntitiesTest:escapedSupplementary
|    org.jsoup.nodes.EntitiesTest:unescapeMultiChars
|    org.jsoup.nodes.EntitiesTest:xhtml
|    org.jsoup.nodes.EntitiesTest:getByName
|    org.jsoup.nodes.EntitiesTest:escapeSupplementaryCharacter
|    org.jsoup.nodes.EntitiesTest:notMissingSupplementals
|    org.jsoup.nodes.EntitiesTest:unescape
|    org.jsoup.nodes.EntitiesTest:strictUnescape
|    org.jsoup.nodes.EntitiesTest:caseSensitive
|    org.jsoup.nodes.EntitiesTest:letterDigitEntities
|    org.jsoup.nodes.EntitiesTest:noSpuriousDecodes
|    org.jsoup.nodes.EntitiesTest:escapesGtInXmlAttributesButNotInHtml
|    org.jsoup.parser.TagTest:isCaseSensitive
|    org.jsoup.parser.TagTest:canBeInsensitive
|    org.jsoup.parser.TagTest:trims
|    org.jsoup.parser.TagTest:equality
|    org.jsoup.parser.TagTest:divSemantics
|    org.jsoup.parser.TagTest:pSemantics
|    org.jsoup.parser.TagTest:imgSemantics
|    org.jsoup.parser.TagTest:defaultSemantics
|    org.jsoup.parser.TagTest:valueOfChecksNotNull
|    org.jsoup.parser.TagTest:valueOfChecksNotEmpty
|    org.jsoup.parser.CharacterReaderTest:consume
|    org.jsoup.parser.CharacterReaderTest:unconsume
|    org.jsoup.parser.CharacterReaderTest:mark
|    org.jsoup.parser.CharacterReaderTest:consumeToEnd
|    org.jsoup.parser.CharacterReaderTest:nextIndexOfChar
|    org.jsoup.parser.CharacterReaderTest:nextIndexOfString
|    org.jsoup.parser.CharacterReaderTest:nextIndexOfUnmatched
|    org.jsoup.parser.CharacterReaderTest:consumeToString
|    org.jsoup.parser.CharacterReaderTest:advance
|    org.jsoup.parser.CharacterReaderTest:consumeToAny
|    org.jsoup.parser.CharacterReaderTest:consumeLetterSequence
|    org.jsoup.parser.CharacterReaderTest:consumeLetterThenDigitSequence
|    org.jsoup.parser.CharacterReaderTest:matches
|    org.jsoup.parser.CharacterReaderTest:matchesIgnoreCase
|    org.jsoup.parser.CharacterReaderTest:containsIgnoreCase
|    org.jsoup.parser.CharacterReaderTest:matchesAny
|    org.jsoup.parser.CharacterReaderTest:cachesStrings
|    org.jsoup.parser.CharacterReaderTest:rangeEquals
|    org.jsoup.parser.CharacterReaderTest:empty
|    org.jsoup.parser.CharacterReaderTest:consumeToNonexistentEndWhenAtAnd
|    org.jsoup.parser.CharacterReaderTest:notEmptyAtBufferSplitPoint
|    org.jsoup.parser.CharacterReaderTest:bufferUp
|    org.jsoup.nodes.DocumentTypeTest:constructorValidationThrowsExceptionOnNulls
|    org.jsoup.nodes.DocumentTypeTest:constructorValidationOkWithBlankPublicAndSystemIds
|    org.jsoup.nodes.DocumentTypeTest:outerHtmlGeneration
|    org.jsoup.nodes.DocumentTypeTest:testRoundTrip
|    org.jsoup.nodes.AttributeTest:html
|    org.jsoup.nodes.AttributeTest:validatesKeysNotEmpty
|    org.jsoup.nodes.AttributeTest:validatesKeysNotEmptyViaSet
|    org.jsoup.nodes.AttributeTest:booleanAttributesAreEmptyStringValues
|    org.jsoup.nodes.AttributeTest:settersOnOrphanAttribute
|    org.jsoup.nodes.TextNodeTest:testBlank
|    org.jsoup.nodes.TextNodeTest:testTextBean
|    org.jsoup.nodes.TextNodeTest:testSplitText
|    org.jsoup.nodes.TextNodeTest:testSplitAnEmbolden
|    org.jsoup.nodes.TextNodeTest:testWithSupplementaryCharacter
|    org.jsoup.nodes.TextNodeTest:testLeadNodesHaveNoChildren
|    org.jsoup.nodes.TextNodeTest:testSpaceNormalise
|    org.jsoup.nodes.TextNodeTest:testClone
|    org.jsoup.nodes.TextNodeTest:testCloneAfterAttributesHit
|    org.jsoup.parser.ParserTest:unescapeEntities
|    org.jsoup.parser.AttributeParseTest:handlesNewLinesAndReturns
|    org.jsoup.parser.AttributeParseTest:parsesEmptyString
|    org.jsoup.parser.AttributeParseTest:canStartWithEq
|    org.jsoup.parser.AttributeParseTest:strictAttributeUnescapes
|    org.jsoup.parser.AttributeParseTest:moreAttributeUnescapes
|    org.jsoup.parser.AttributeParseTest:parsesBooleanAttributes
|    org.jsoup.parser.AttributeParseTest:dropsSlashFromAttributeName
|    org.jsoup.parser.ParserSettingsTest:caseSupport
|    org.jsoup.parser.ParserSettingsTest:attributesCaseNormalization
|    org.jsoup.integration.ParseTest:testSmhBizArticle
|    org.jsoup.integration.ParseTest:testNewsHomepage
|    org.jsoup.integration.ParseTest:testGoogleSearchIpod
|    org.jsoup.integration.ParseTest:testYahooJp
|    org.jsoup.integration.ParseTest:testBaidu
|    org.jsoup.integration.ParseTest:testBaiduVariant
|    org.jsoup.integration.ParseTest:testHtml5Charset
|    org.jsoup.integration.ParseTest:testNytArticle
|    org.jsoup.integration.ParseTest:testYahooArticle
|    org.jsoup.integration.ParseTest:testLowercaseUtf8Charset
|    org.jsoup.nodes.ElementTest:getElementsByTagName
|    org.jsoup.nodes.ElementTest:getNamespacedElementsByTag
|    org.jsoup.nodes.ElementTest:testGetElementById
|    org.jsoup.nodes.ElementTest:testGetText
|    org.jsoup.nodes.ElementTest:testGetChildText
|    org.jsoup.nodes.ElementTest:testNormalisesText
|    org.jsoup.nodes.ElementTest:testKeepsPreText
|    org.jsoup.nodes.ElementTest:testKeepsPreTextInCode
|    org.jsoup.nodes.ElementTest:testKeepsPreTextAtDepth
|    org.jsoup.nodes.ElementTest:testBrHasSpace
|    org.jsoup.nodes.ElementTest:testWholeText
|    org.jsoup.nodes.ElementTest:testGetSiblings
|    org.jsoup.nodes.ElementTest:testGetSiblingsWithDuplicateContent
|    org.jsoup.nodes.ElementTest:testGetParents
|    org.jsoup.nodes.ElementTest:testElementSiblingIndex
|    org.jsoup.nodes.ElementTest:testElementSiblingIndexSameContent
|    org.jsoup.nodes.ElementTest:testGetElementsWithClass
|    org.jsoup.nodes.ElementTest:testGetElementsWithAttribute
|    org.jsoup.nodes.ElementTest:testGetElementsWithAttributeDash
|    org.jsoup.nodes.ElementTest:testGetElementsWithAttributeValue
|    org.jsoup.nodes.ElementTest:testClassDomMethods
|    org.jsoup.nodes.ElementTest:testHasClassDomMethods
|    org.jsoup.nodes.ElementTest:testClassUpdates
|    org.jsoup.nodes.ElementTest:testOuterHtml
|    org.jsoup.nodes.ElementTest:testInnerHtml
|    org.jsoup.nodes.ElementTest:testFormatHtml
|    org.jsoup.nodes.ElementTest:testFormatOutline
|    org.jsoup.nodes.ElementTest:testSetIndent
|    org.jsoup.nodes.ElementTest:testNotPretty
|    org.jsoup.nodes.ElementTest:testNotPrettyWithEnDashBody
|    org.jsoup.nodes.ElementTest:testPrettyWithEnDashBody
|    org.jsoup.nodes.ElementTest:testPrettyAndOutlineWithEnDashBody
|    org.jsoup.nodes.ElementTest:testBasicFormats
|    org.jsoup.nodes.ElementTest:testEmptyElementFormatHtml
|    org.jsoup.nodes.ElementTest:testNoIndentOnScriptAndStyle
|    org.jsoup.nodes.ElementTest:testContainerOutput
|    org.jsoup.nodes.ElementTest:testSetText
|    org.jsoup.nodes.ElementTest:testAddNewElement
|    org.jsoup.nodes.ElementTest:testAddBooleanAttribute
|    org.jsoup.nodes.ElementTest:testAppendRowToTable
|    org.jsoup.nodes.ElementTest:testPrependRowToTable
|    org.jsoup.nodes.ElementTest:testPrependElement
|    org.jsoup.nodes.ElementTest:testPrependText
|    org.jsoup.nodes.ElementTest:testThrowsOnAddNullText
|    org.jsoup.nodes.ElementTest:testThrowsOnPrependNullText
|    org.jsoup.nodes.ElementTest:testAddNewHtml
|    org.jsoup.nodes.ElementTest:testPrependNewHtml
|    org.jsoup.nodes.ElementTest:testSetHtml
|    org.jsoup.nodes.ElementTest:testSetHtmlTitle
|    org.jsoup.nodes.ElementTest:testWrap
|    org.jsoup.nodes.ElementTest:after
|    org.jsoup.nodes.ElementTest:testWrapWithRemainder
|    org.jsoup.nodes.ElementTest:testHasText
|    org.jsoup.nodes.ElementTest:dataset
|    org.jsoup.nodes.ElementTest:parentlessToString
|    org.jsoup.nodes.ElementTest:testClone
|    org.jsoup.nodes.ElementTest:testClonesClassnames
|    org.jsoup.nodes.ElementTest:testShallowClone
|    org.jsoup.nodes.ElementTest:testTagNameSet
|    org.jsoup.nodes.ElementTest:testHtmlContainsOuter
|    org.jsoup.nodes.ElementTest:testGetTextNodes
|    org.jsoup.nodes.ElementTest:testManipulateTextNodes
|    org.jsoup.nodes.ElementTest:testGetDataNodes
|    org.jsoup.nodes.ElementTest:elementIsNotASiblingOfItself
|    org.jsoup.nodes.ElementTest:testChildThrowsIndexOutOfBoundsOnMissing
|    org.jsoup.nodes.ElementTest:moveByAppend
|    org.jsoup.nodes.ElementTest:insertChildrenArgumentValidation
|    org.jsoup.nodes.ElementTest:insertChildrenAtPosition
|    org.jsoup.nodes.ElementTest:insertChildrenAsCopy
|    org.jsoup.nodes.ElementTest:testClassNames
|    org.jsoup.nodes.ElementTest:testHashAndEqualsAndValue
|    org.jsoup.nodes.ElementTest:testRelativeUrls
|    org.jsoup.nodes.ElementTest:appendMustCorrectlyMoveChildrenInsideOneParentElement
|    org.jsoup.nodes.ElementTest:testHashcodeIsStableWithContentChanges
|    org.jsoup.nodes.ElementTest:testNamespacedElements
|    org.jsoup.nodes.ElementTest:elementByTagName
|    org.jsoup.nodes.ElementTest:testChildrenElements
|    org.jsoup.nodes.ElementTest:testShadowElementsAreUpdated
|    org.jsoup.nodes.ElementTest:classNamesAndAttributeNameIsCaseInsensitive
|    org.jsoup.nodes.ElementTest:testAppendTo
|    org.jsoup.nodes.ElementTest:testNormalizesNbspInText
|    org.jsoup.nodes.ElementTest:testNormalizesInvisiblesInText
|    org.jsoup.nodes.ElementTest:testRemoveBeforeIndex
|    org.jsoup.nodes.ElementTest:testRemoveAfterIndex
|    org.jsoup.nodes.ElementTest:whiteSpaceClassElement
|    org.jsoup.nodes.ElementTest:testRemovingEmptyClassAttributeWhenLastClassRemoved
|    org.jsoup.nodes.ElementTest:booleanAttributeOutput
|    org.jsoup.nodes.ElementTest:textHasSpaceAfterBlockTags
|    org.jsoup.nodes.ElementTest:textHasSpaceBetweenDivAndCenterTags
|    org.jsoup.nodes.ElementTest:testNextElementSiblings
|    org.jsoup.nodes.ElementTest:testPreviousElementSiblings
|    org.jsoup.nodes.ElementTest:testClearAttributes
|    org.jsoup.nodes.ElementTest:testRemoveAttr
|    org.jsoup.nodes.ElementTest:testRoot
|    org.jsoup.nodes.ElementTest:testTraverse
|    org.jsoup.nodes.ElementTest:voidTestFilterCallReturnsElement
|    org.jsoup.nodes.ElementTest:doesntDeleteZWJWhenNormalizingText
|    org.jsoup.nodes.ElementTest:testFastReparent
|    org.jsoup.nodes.ElementTest:testFastReparentExistingContent
|    org.jsoup.nodes.ElementTest:testReparentSeperateNodes
|    org.jsoup.select.ElementsTest:filter
|    org.jsoup.select.ElementsTest:hasAttr
|    org.jsoup.select.ElementsTest:hasAbsAttr
|    org.jsoup.select.ElementsTest:attr
|    org.jsoup.select.ElementsTest:absAttr
|    org.jsoup.select.ElementsTest:classes
|    org.jsoup.select.ElementsTest:hasClassCaseInsensitive
|    org.jsoup.select.ElementsTest:text
|    org.jsoup.select.ElementsTest:hasText
|    org.jsoup.select.ElementsTest:html
|    org.jsoup.select.ElementsTest:outerHtml
|    org.jsoup.select.ElementsTest:setHtml
|    org.jsoup.select.ElementsTest:val
|    org.jsoup.select.ElementsTest:before
|    org.jsoup.select.ElementsTest:after
|    org.jsoup.select.ElementsTest:unwrap
|    org.jsoup.select.ElementsTest:unwrapP
|    org.jsoup.select.ElementsTest:unwrapKeepsSpace
|    org.jsoup.select.ElementsTest:empty
|    org.jsoup.select.ElementsTest:remove
|    org.jsoup.select.ElementsTest:is
|    org.jsoup.select.ElementsTest:parents
|    org.jsoup.select.ElementsTest:not
|    org.jsoup.select.ElementsTest:tagNameSet
|    org.jsoup.select.ElementsTest:traverse
|    org.jsoup.select.ElementsTest:forms
|    org.jsoup.select.ElementsTest:siblings
|    org.jsoup.select.ElementsTest:eachText
|    org.jsoup.select.ElementsTest:eachAttr
|    org.jsoup.parser.HtmlTreeBuilderStateTest:ensureArraysAreSorted
|    org.jsoup.parser.XmlTreeBuilderTest:testSimpleXmlParse
|    org.jsoup.parser.XmlTreeBuilderTest:testCommentAndDocType
|    org.jsoup.parser.XmlTreeBuilderTest:testSupplyParserToJsoupClass
|    org.jsoup.parser.XmlTreeBuilderTest:testSupplyParserToDataStream
|    org.jsoup.parser.XmlTreeBuilderTest:testDoesNotForceSelfClosingKnownTags
|    org.jsoup.parser.XmlTreeBuilderTest:handlesXmlDeclarationAsDeclaration
|    org.jsoup.parser.XmlTreeBuilderTest:xmlFragment
|    org.jsoup.parser.XmlTreeBuilderTest:xmlParseDefaultsToHtmlOutputSyntax
|    org.jsoup.parser.XmlTreeBuilderTest:testDoesHandleEOFInTag
|    org.jsoup.parser.XmlTreeBuilderTest:testDetectCharsetEncodingDeclaration
|    org.jsoup.parser.XmlTreeBuilderTest:testParseDeclarationAttributes
|    org.jsoup.parser.XmlTreeBuilderTest:testCreatesValidProlog
|    org.jsoup.parser.XmlTreeBuilderTest:preservesCaseByDefault
|    org.jsoup.parser.XmlTreeBuilderTest:appendPreservesCaseByDefault
|    org.jsoup.parser.XmlTreeBuilderTest:canNormalizeCase
|    org.jsoup.parser.XmlTreeBuilderTest:normalizesDiscordantTags
|    org.jsoup.parser.XmlTreeBuilderTest:roundTripsCdata
|    org.jsoup.parser.XmlTreeBuilderTest:cdataPreservesWhiteSpace
|    org.jsoup.parser.XmlTreeBuilderTest:handlesDodgyXmlDecl
|    org.jsoup.parser.XmlTreeBuilderTest:handlesLTinScript
|    org.jsoup.parser.XmlTreeBuilderTest:dropsDuplicateAttributes
|    org.jsoup.helper.HttpConnectionTest:throwsExceptionOnParseWithoutExecute
|    org.jsoup.helper.HttpConnectionTest:throwsExceptionOnBodyWithoutExecute
|    org.jsoup.helper.HttpConnectionTest:caseInsensitiveHeaders
|    org.jsoup.helper.HttpConnectionTest:headers
|    org.jsoup.helper.HttpConnectionTest:sameHeadersCombineWithComma
|    org.jsoup.helper.HttpConnectionTest:multipleHeaders
|    org.jsoup.helper.HttpConnectionTest:ignoresEmptySetCookies
|    org.jsoup.helper.HttpConnectionTest:connectWithUrl
|    org.jsoup.helper.HttpConnectionTest:throwsOnMalformedUrl
|    org.jsoup.helper.HttpConnectionTest:userAgent
|    org.jsoup.helper.HttpConnectionTest:timeout
|    org.jsoup.helper.HttpConnectionTest:referrer
|    org.jsoup.helper.HttpConnectionTest:method
|    org.jsoup.helper.HttpConnectionTest:data
|    org.jsoup.helper.HttpConnectionTest:cookie
|    org.jsoup.helper.HttpConnectionTest:inputStream
|    org.jsoup.helper.HttpConnectionTest:requestBody
|    org.jsoup.helper.HttpConnectionTest:noUrlThrowsValidationError
|    org.jsoup.parser.HtmlTreeBuilderTest:ensureSearchArraysAreSorted
|    org.jsoup.select.TraversorTest:filterVisit
|    org.jsoup.select.TraversorTest:filterSkipEntirely
|    org.jsoup.select.TraversorTest:filterRemove
|    org.jsoup.select.TraversorTest:filterStop
|    org.jsoup.parser.TokeniserStateTest:ensureSearchArraysAreSorted
|    org.jsoup.parser.TokeniserStateTest:testCharacterReferenceInRcdata
|    org.jsoup.parser.TokeniserStateTest:testBeforeTagName
|    org.jsoup.parser.TokeniserStateTest:testEndTagOpen
|    org.jsoup.parser.TokeniserStateTest:testRcdataLessthanSign
|    org.jsoup.parser.TokeniserStateTest:testCommentEndCoverage
|    org.jsoup.parser.TokeniserStateTest:testCommentEndBangCoverage
|    org.jsoup.parser.TokeniserStateTest:testPublicIdentifiersWithWhitespace
|    org.jsoup.parser.TokeniserStateTest:testPublicAndSystemIdentifiersWithWhitespace
|    org.jsoup.parser.TokeniserStateTest:testUnconsumeAtBufferBoundary
|    org.jsoup.parser.TokeniserStateTest:testOpeningAngleBracketInsteadOfAttribute
|    org.jsoup.parser.TokeniserStateTest:testOpeningAngleBracketInTagName
|    org.jsoup.integration.ConnectTest:canConnectToLocalServer
|    org.jsoup.integration.ConnectTest:fetchURl
|    org.jsoup.integration.ConnectTest:fetchURIWithWhitespace
|    org.jsoup.integration.ConnectTest:exceptOnUnsupportedProtocol
|    org.jsoup.integration.ConnectTest:throwsExceptionOn404
|    org.jsoup.integration.ConnectTest:ignoresExceptionIfSoConfigured
|    org.jsoup.integration.ConnectTest:doesPost
|    org.jsoup.integration.ConnectTest:doesPostMultipartWithoutInputstream
|    org.jsoup.integration.ConnectTest:sendsRequestBodyJsonWithData
|    org.jsoup.integration.ConnectTest:sendsRequestBodyJsonWithoutData
|    org.jsoup.integration.ConnectTest:sendsRequestBody
|    org.jsoup.integration.ConnectTest:sendsRequestBodyWithUrlParams
|    org.jsoup.integration.ConnectTest:doesGet
|    org.jsoup.integration.ConnectTest:doesPut
|    org.jsoup.integration.ConnectTest:postFiles
|    org.jsoup.integration.ConnectTest:multipleParsesOkAfterBufferUp
|    org.jsoup.integration.ConnectTest:bodyAndBytesAvailableBeforeParse
|    org.jsoup.integration.ConnectTest:parseParseThrowsValidates
|    org.jsoup.integration.ConnectTest:multiCookieSet
|    org.jsoup.integration.ConnectTest:handlesLargerContentLengthParseRead
|    org.jsoup.integration.ConnectTest:handlesWrongContentLengthDuringBufferedRead
|    org.jsoup.integration.ConnectTest:handlesRedirect
|    org.jsoup.integration.ConnectTest:handlesEmptyRedirect
|    org.jsoup.integration.ConnectTest:doesNotPostFor302
|    org.jsoup.integration.ConnectTest:doesPostFor307
|    org.jsoup.integration.ConnectTest:getUtf8Bom
|    org.jsoup.integration.ConnectTest:testBinaryContentTypeThrowsException
|    org.jsoup.integration.ConnectTest:canFetchBinaryAsBytes
|    org.jsoup.integration.ConnectTest:handlesUnknownEscapesAcrossBuffer
|    org.jsoup.nodes.DocumentTest:setTextPreservesDocumentStructure
|    org.jsoup.nodes.DocumentTest:testTitles
|    org.jsoup.nodes.DocumentTest:testOutputEncoding
|    org.jsoup.nodes.DocumentTest:testXhtmlReferences
|    org.jsoup.nodes.DocumentTest:testNormalisesStructure
|    org.jsoup.nodes.DocumentTest:testClone
|    org.jsoup.nodes.DocumentTest:testLocation
|    org.jsoup.nodes.DocumentTest:testHtmlAndXmlSyntax
|    org.jsoup.nodes.DocumentTest:htmlParseDefaultsToHtmlOutputSyntax
|    org.jsoup.nodes.DocumentTest:testHtmlAppendable
|    org.jsoup.nodes.DocumentTest:DocumentsWithSameContentAreEqual
|    org.jsoup.nodes.DocumentTest:DocumentsWithSameContentAreVerifiable
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateUtf8
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateIso8859
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateNoCharset
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateDisabled
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateDisabledNoChanges
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateEnabledAfterCharsetChange
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateCleanup
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateXmlUtf8
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateXmlIso8859
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateXmlNoCharset
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateXmlDisabled
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdatedDisabledPerDefault
|    org.jsoup.nodes.DocumentTest:testShiftJisRoundtrip
|    org.jsoup.nodes.DocumentTest:testDocumentTypeGet
|    org.jsoup.parser.TokeniserTest:handleSuperLargeTagNames
|    org.jsoup.parser.TokeniserTest:handleSuperLargeAttributeName
|    org.jsoup.parser.TokeniserTest:handleLargeComment
|    org.jsoup.parser.TokeniserTest:handleLargeCdata
|    org.jsoup.parser.TokeniserTest:handleLargeTitle
|    org.jsoup.parser.TokeniserTest:cp1252Entities
|    org.jsoup.parser.TokeniserTest:cp1252EntitiesProduceError
|    org.jsoup.parser.TokeniserTest:cp1252SubstitutionTable
|    org.jsoup.parser.TokeniserTest:canParseCdataEndingAtEdgeOfBuffer
|    org.jsoup.helper.DataUtilTest:testQuotedCharset
|    org.jsoup.helper.DataUtilTest:discardsSpuriousByteOrderMark
|    org.jsoup.helper.DataUtilTest:discardsSpuriousByteOrderMarkWhenNoCharsetSet
|    org.jsoup.helper.DataUtilTest:shouldNotThrowExceptionOnEmptyCharset
|    org.jsoup.helper.DataUtilTest:shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags
|    org.jsoup.helper.DataUtilTest:shouldCorrectCharsetForDuplicateCharsetString
|    org.jsoup.helper.DataUtilTest:shouldReturnNullForIllegalCharsetNames
|    org.jsoup.helper.DataUtilTest:generatesMimeBoundaries
|    org.jsoup.helper.DataUtilTest:wrongMetaCharsetFallback
|    org.jsoup.helper.DataUtilTest:secondMetaElementWithContentTypeContainsCharsetParameter
|    org.jsoup.helper.DataUtilTest:firstMetaElementWithCharsetShouldBeUsedForDecoding
|    org.jsoup.helper.DataUtilTest:supportsBOMinFiles
|    org.jsoup.helper.DataUtilTest:supportsUTF8BOM
|    org.jsoup.helper.DataUtilTest:supportsXmlCharsetDeclaration
|    org.jsoup.select.SelectorTest:testByTag
|    org.jsoup.select.SelectorTest:testById
|    org.jsoup.select.SelectorTest:testByClass
|    org.jsoup.select.SelectorTest:testByClassCaseInsensitive
|    org.jsoup.select.SelectorTest:testByAttribute
|    org.jsoup.select.SelectorTest:testNamespacedTag
|    org.jsoup.select.SelectorTest:testWildcardNamespacedTag
|    org.jsoup.select.SelectorTest:testWildcardNamespacedXmlTag
|    org.jsoup.select.SelectorTest:testWildCardNamespacedCaseVariations
|    org.jsoup.select.SelectorTest:testByAttributeRegex
|    org.jsoup.select.SelectorTest:testByAttributeRegexCharacterClass
|    org.jsoup.select.SelectorTest:testByAttributeRegexCombined
|    org.jsoup.select.SelectorTest:testCombinedWithContains
|    org.jsoup.select.SelectorTest:testAllElements
|    org.jsoup.select.SelectorTest:testAllWithClass
|    org.jsoup.select.SelectorTest:testGroupOr
|    org.jsoup.select.SelectorTest:descendant
|    org.jsoup.select.SelectorTest:and
|    org.jsoup.select.SelectorTest:deeperDescendant
|    org.jsoup.select.SelectorTest:parentWithClassChild
|    org.jsoup.select.SelectorTest:parentChildStar
|    org.jsoup.select.SelectorTest:multiChildDescent
|    org.jsoup.select.SelectorTest:caseInsensitive
|    org.jsoup.select.SelectorTest:adjacentSiblings
|    org.jsoup.select.SelectorTest:adjacentSiblingsWithId
|    org.jsoup.select.SelectorTest:notAdjacent
|    org.jsoup.select.SelectorTest:mixCombinator
|    org.jsoup.select.SelectorTest:mixCombinatorGroup
|    org.jsoup.select.SelectorTest:generalSiblings
|    org.jsoup.select.SelectorTest:testCharactersInIdAndClass
|    org.jsoup.select.SelectorTest:testSupportsLeadingCombinator
|    org.jsoup.select.SelectorTest:testPseudoLessThan
|    org.jsoup.select.SelectorTest:testPseudoGreaterThan
|    org.jsoup.select.SelectorTest:testPseudoEquals
|    org.jsoup.select.SelectorTest:testPseudoBetween
|    org.jsoup.select.SelectorTest:testPseudoCombined
|    org.jsoup.select.SelectorTest:testPseudoHas
|    org.jsoup.select.SelectorTest:testNestedHas
|    org.jsoup.select.SelectorTest:testPsuedoContainsWithParentheses
|    org.jsoup.select.SelectorTest:containsOwn
|    org.jsoup.select.SelectorTest:testMatches
|    org.jsoup.select.SelectorTest:matchesOwn
|    org.jsoup.select.SelectorTest:testRelaxedTags
|    org.jsoup.select.SelectorTest:notParas
|    org.jsoup.select.SelectorTest:notAll
|    org.jsoup.select.SelectorTest:handlesCommasInSelector
|    org.jsoup.select.SelectorTest:selectSupplementaryCharacter
|    org.jsoup.select.SelectorTest:selectClassWithSpace
|    org.jsoup.select.SelectorTest:selectSameElements
|    org.jsoup.select.SelectorTest:attributeWithBrackets
|    org.jsoup.select.SelectorTest:selectFirstWithOr
|    org.jsoup.select.SelectorTest:matchText
|    org.jsoup.select.SelectorTest:splitOnBr
|    org.jsoup.select.SelectorTest:matchTextAttributes
|    org.jsoup.select.SelectorTest:findBetweenSpan
|    org.jsoup.select.SelectorTest:startsWithBeginsWithSpace
|    org.jsoup.select.SelectorTest:endsWithEndsWithSpaces
|    org.jsoup.select.SelectorTest:html_mixed_case_simple_name
|    org.jsoup.select.SelectorTest:html_mixed_case_wildcard_name
|    org.jsoup.select.SelectorTest:html_lowercase_simple_name
|    org.jsoup.select.SelectorTest:html_lowercase_wildcard_name
|    org.jsoup.select.SelectorTest:xml_mixed_case_wildcard_name
|    org.jsoup.select.SelectorTest:xml_lowercase_simple_name
|    org.jsoup.select.SelectorTest:trimSelector
|    org.jsoup.select.SelectorTest:xmlWildcardNamespaceTest
|    org.jsoup.parser.HtmlParserTest:parsesSimpleDocument
|    org.jsoup.parser.HtmlParserTest:parsesRoughAttributes
|    org.jsoup.parser.HtmlParserTest:dropsDuplicateAttributes
|    org.jsoup.parser.HtmlParserTest:retainsAttributesOfDifferentCaseIfSensitive
|    org.jsoup.parser.HtmlParserTest:parsesQuiteRoughAttributes
|    org.jsoup.parser.HtmlParserTest:parsesComments
|    org.jsoup.parser.HtmlParserTest:parsesUnterminatedComments
|    org.jsoup.parser.HtmlParserTest:dropsUnterminatedTag
|    org.jsoup.parser.HtmlParserTest:dropsUnterminatedAttribute
|    org.jsoup.parser.HtmlParserTest:parsesUnterminatedTextarea
|    org.jsoup.parser.HtmlParserTest:parsesUnterminatedOption
|    org.jsoup.parser.HtmlParserTest:testSelectWithOption
|    org.jsoup.parser.HtmlParserTest:testSpaceAfterTag
|    org.jsoup.parser.HtmlParserTest:createsStructureFromBodySnippet
|    org.jsoup.parser.HtmlParserTest:handlesDataOnlyTags
|    org.jsoup.parser.HtmlParserTest:handlesTextAfterData
|    org.jsoup.parser.HtmlParserTest:handlesTextArea
|    org.jsoup.parser.HtmlParserTest:preservesSpaceInTextArea
|    org.jsoup.parser.HtmlParserTest:preservesSpaceInScript
|    org.jsoup.parser.HtmlParserTest:doesNotCreateImplicitLists
|    org.jsoup.parser.HtmlParserTest:discardsNakedTds
|    org.jsoup.parser.HtmlParserTest:handlesNestedImplicitTable
|    org.jsoup.parser.HtmlParserTest:handlesWhatWgExpensesTableExample
|    org.jsoup.parser.HtmlParserTest:handlesTbodyTable
|    org.jsoup.parser.HtmlParserTest:handlesImplicitCaptionClose
|    org.jsoup.parser.HtmlParserTest:noTableDirectInTable
|    org.jsoup.parser.HtmlParserTest:ignoresDupeEndTrTag
|    org.jsoup.parser.HtmlParserTest:handlesBaseTags
|    org.jsoup.parser.HtmlParserTest:handlesCdata
|    org.jsoup.parser.HtmlParserTest:roundTripsCdata
|    org.jsoup.parser.HtmlParserTest:handlesCdataAcrossBuffer
|    org.jsoup.parser.HtmlParserTest:handlesCdataInScript
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedCdataAtEOF
|    org.jsoup.parser.HtmlParserTest:handleCDataInText
|    org.jsoup.parser.HtmlParserTest:cdataNodesAreTextNodes
|    org.jsoup.parser.HtmlParserTest:handlesInvalidStartTags
|    org.jsoup.parser.HtmlParserTest:handlesUnknownTags
|    org.jsoup.parser.HtmlParserTest:handlesUnknownInlineTags
|    org.jsoup.parser.HtmlParserTest:parsesBodyFragment
|    org.jsoup.parser.HtmlParserTest:handlesUnknownNamespaceTags
|    org.jsoup.parser.HtmlParserTest:handlesKnownEmptyBlocks
|    org.jsoup.parser.HtmlParserTest:handlesKnownEmptyNoFrames
|    org.jsoup.parser.HtmlParserTest:handlesKnownEmptyStyle
|    org.jsoup.parser.HtmlParserTest:handlesKnownEmptyTitle
|    org.jsoup.parser.HtmlParserTest:handlesKnownEmptyIframe
|    org.jsoup.parser.HtmlParserTest:handlesSolidusAtAttributeEnd
|    org.jsoup.parser.HtmlParserTest:handlesMultiClosingBody
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedDefinitionLists
|    org.jsoup.parser.HtmlParserTest:handlesFrames
|    org.jsoup.parser.HtmlParserTest:ignoresContentAfterFrameset
|    org.jsoup.parser.HtmlParserTest:handlesJavadocFont
|    org.jsoup.parser.HtmlParserTest:handlesBaseWithoutHref
|    org.jsoup.parser.HtmlParserTest:normalisesDocument
|    org.jsoup.parser.HtmlParserTest:normalisesHeadlessBody
|    org.jsoup.parser.HtmlParserTest:normalisedBodyAfterContent
|    org.jsoup.parser.HtmlParserTest:findsCharsetInMalformedMeta
|    org.jsoup.parser.HtmlParserTest:testHgroup
|    org.jsoup.parser.HtmlParserTest:testRelaxedTags
|    org.jsoup.parser.HtmlParserTest:testHeaderContents
|    org.jsoup.parser.HtmlParserTest:testSpanContents
|    org.jsoup.parser.HtmlParserTest:testNoImagesInNoScriptInHead
|    org.jsoup.parser.HtmlParserTest:testAFlowContents
|    org.jsoup.parser.HtmlParserTest:testFontFlowContents
|    org.jsoup.parser.HtmlParserTest:handlesMisnestedTagsBP
|    org.jsoup.parser.HtmlParserTest:handlesUnexpectedMarkupInTables
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedFormattingElements
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedAnchors
|    org.jsoup.parser.HtmlParserTest:reconstructFormattingElements
|    org.jsoup.parser.HtmlParserTest:reconstructFormattingElementsInTable
|    org.jsoup.parser.HtmlParserTest:emptyTdTag
|    org.jsoup.parser.HtmlParserTest:handlesSolidusInA
|    org.jsoup.parser.HtmlParserTest:handlesSpanInTbody
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedTitleAtEof
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedTitle
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedScriptAtEof
|    org.jsoup.parser.HtmlParserTest:handlesUnclosedRawtextAtEof
|    org.jsoup.parser.HtmlParserTest:noImplicitFormForTextAreas
|    org.jsoup.parser.HtmlParserTest:handlesEscapedScript
|    org.jsoup.parser.HtmlParserTest:handles0CharacterAsText
|    org.jsoup.parser.HtmlParserTest:handlesNullInData
|    org.jsoup.parser.HtmlParserTest:handlesNullInComments
|    org.jsoup.parser.HtmlParserTest:handlesNewlinesAndWhitespaceInTag
|    org.jsoup.parser.HtmlParserTest:handlesWhitespaceInoDocType
|    org.jsoup.parser.HtmlParserTest:tracksErrorsWhenRequested
|    org.jsoup.parser.HtmlParserTest:tracksLimitedErrorsWhenRequested
|    org.jsoup.parser.HtmlParserTest:noErrorsByDefault
|    org.jsoup.parser.HtmlParserTest:handlesCommentsInTable
|    org.jsoup.parser.HtmlParserTest:handlesQuotesInCommentsInScripts
|    org.jsoup.parser.HtmlParserTest:handleNullContextInParseFragment
|    org.jsoup.parser.HtmlParserTest:doesNotFindShortestMatchingEntity
|    org.jsoup.parser.HtmlParserTest:relaxedBaseEntityMatchAndStrictExtendedMatch
|    org.jsoup.parser.HtmlParserTest:handlesXmlDeclarationAsBogusComment
|    org.jsoup.parser.HtmlParserTest:handlesTagsInTextarea
|    org.jsoup.parser.HtmlParserTest:associatedFormControlsWithDisjointForms
|    org.jsoup.parser.HtmlParserTest:handlesInputInTable
|    org.jsoup.parser.HtmlParserTest:convertsImageToImg
|    org.jsoup.parser.HtmlParserTest:handlesManyChildren
|    org.jsoup.parser.HtmlParserTest:handlesDeepStack
|    org.jsoup.parser.HtmlParserTest:testInvalidTableContents
|    org.jsoup.parser.HtmlParserTest:testNormalisesIsIndex
|    org.jsoup.parser.HtmlParserTest:testReinsertionModeForThCelss
|    org.jsoup.parser.HtmlParserTest:testUsingSingleQuotesInQueries
|    org.jsoup.parser.HtmlParserTest:testSupportsNonAsciiTags
|    org.jsoup.parser.HtmlParserTest:testSupportsPartiallyNonAsciiTags
|    org.jsoup.parser.HtmlParserTest:testFragment
|    org.jsoup.parser.HtmlParserTest:testHtmlLowerCase
|    org.jsoup.parser.HtmlParserTest:canPreserveTagCase
|    org.jsoup.parser.HtmlParserTest:canPreserveAttributeCase
|    org.jsoup.parser.HtmlParserTest:canPreserveBothCase
|    org.jsoup.parser.HtmlParserTest:handlesControlCodeInAttributeName
|    org.jsoup.parser.HtmlParserTest:caseSensitiveParseTree
|    org.jsoup.parser.HtmlParserTest:caseInsensitiveParseTree
|    org.jsoup.parser.HtmlParserTest:preservedCaseLinksCantNest
|    org.jsoup.parser.HtmlParserTest:normalizesDiscordantTags
|    org.jsoup.parser.HtmlParserTest:selfClosingVoidIsNotAnError
|    org.jsoup.parser.HtmlParserTest:selfClosingOnNonvoidIsError
|    org.jsoup.parser.HtmlParserTest:testTemplateInsideTable
|    org.jsoup.parser.HtmlParserTest:testHandlesDeepSpans
|    org.jsoup.parser.HtmlParserTest:commentAtEnd
|    org.jsoup.parser.HtmlParserTest:preSkipsFirstNewline
|    org.jsoup.parser.HtmlParserTest:handlesXmlDeclAndCommentsBeforeDoctype
|    org.jsoup.parser.HtmlParserTest:fallbackToUtfIfCantEncode
|    org.jsoup.parser.HtmlParserTest:characterReaderBuffer
|    org.jsoup.parser.HtmlParserTest:selfClosingTextAreaDoesntLeaveDroppings
|    org.jsoup.parser.HtmlParserTest:testNoSpuriousSpace
|    org.jsoup.parser.HtmlParserTest:testH20
|    org.jsoup.parser.HtmlParserTest:testUNewlines
|    org.jsoup.parser.HtmlParserTest:testFarsi
|    org.jsoup.nodes.AttributesTest:html
|    org.jsoup.nodes.AttributesTest:testIteratorRemovable
|    org.jsoup.nodes.AttributesTest:testIteratorUpdateable
|    org.jsoup.nodes.AttributesTest:testIteratorHasNext
|    org.jsoup.nodes.AttributesTest:testIterator
|    org.jsoup.nodes.AttributesTest:testIteratorEmpty
|    org.jsoup.nodes.AttributesTest:removeCaseSensitive
|    org.jsoup.nodes.AttributesTest:testSetKeyConsistency
|    org.jsoup.parser.TokenQueueTest:chompBalanced
|    org.jsoup.parser.TokenQueueTest:chompEscapedBalanced
|    org.jsoup.parser.TokenQueueTest:chompBalancedMatchesAsMuchAsPossible
|    org.jsoup.parser.TokenQueueTest:chompToIgnoreCase
|    org.jsoup.parser.TokenQueueTest:addFirst
|    org.jsoup.parser.TokenQueueTest:consumeToIgnoreSecondCallTest
|    org.jsoup.parser.TokenQueueTest:testNestedQuotes
|    org.jsoup.parser.TokenQueueTest:chompBalancedThrowIllegalArgumentException
|    org.jsoup.nodes.FormElementTest:hasAssociatedControls
|    org.jsoup.nodes.FormElementTest:createsFormData
|    org.jsoup.nodes.FormElementTest:formDataUsesFirstAttribute
|    org.jsoup.nodes.FormElementTest:createsSubmitableConnection
|    org.jsoup.nodes.FormElementTest:actionWithNoBaseUri
|    org.jsoup.nodes.FormElementTest:formsAddedAfterParseAreFormElements
|    org.jsoup.nodes.FormElementTest:controlsAddedAfterParseAreLinkedWithForms
|    org.jsoup.nodes.FormElementTest:usesOnForCheckboxValueIfNoValueSet
|    org.jsoup.nodes.FormElementTest:adoptedFormsRetainInputs
|    org.jsoup.nodes.FormElementTest:removeFormElement
|    org.jsoup.safety.CleanerTest:simpleBehaviourTest2
|    org.jsoup.safety.CleanerTest:basicBehaviourTest
|    org.jsoup.safety.CleanerTest:basicWithImagesTest
|    org.jsoup.safety.CleanerTest:testRemoveTags
|    org.jsoup.safety.CleanerTest:testRemoveAttributes
|    org.jsoup.safety.CleanerTest:testRemoveEnforcedAttributes
|    org.jsoup.safety.CleanerTest:testRemoveProtocols
|    org.jsoup.safety.CleanerTest:whitelistedProtocolShouldBeRetained
|    org.jsoup.safety.CleanerTest:testDropXmlProc
|    org.jsoup.safety.CleanerTest:testDropScript
|    org.jsoup.safety.CleanerTest:testDropImageScript
|    org.jsoup.safety.CleanerTest:testCleanJavascriptHref
|    org.jsoup.safety.CleanerTest:testCleanAnchorProtocol
|    org.jsoup.safety.CleanerTest:testDropsUnknownTags
|    org.jsoup.safety.CleanerTest:testHandlesEmptyAttributes
|    org.jsoup.safety.CleanerTest:testIsValidBodyHtml
|    org.jsoup.safety.CleanerTest:testIsValidDocument
|    org.jsoup.safety.CleanerTest:resolvesRelativeLinks
|    org.jsoup.safety.CleanerTest:dropsUnresolvableRelativeLinks
|    org.jsoup.safety.CleanerTest:handlesCustomProtocols
|    org.jsoup.safety.CleanerTest:handlesAllPseudoTag
|    org.jsoup.safety.CleanerTest:addsTagOnAttributesIfNotSet
|    org.jsoup.safety.CleanerTest:handlesFramesets
|    org.jsoup.safety.CleanerTest:cleansInternationalText
|    org.jsoup.safety.CleanerTest:testScriptTagInWhiteList
|    org.jsoup.safety.CleanerTest:bailsIfRemovingProtocolThatsNotSet
|    org.jsoup.safety.CleanerTest:handlesAttributesWithNoValue
|    org.jsoup.safety.CleanerTest:handlesNoHrefAttribute
|    org.jsoup.safety.CleanerTest:handlesNestedQuotesInAttribute
|    org.jsoup.select.CssTest:firstChild
|    org.jsoup.select.CssTest:lastChild
|    org.jsoup.select.CssTest:nthChild_simple
|    org.jsoup.select.CssTest:nthLastChild_simple
|    org.jsoup.select.CssTest:nthOfType_simple
|    org.jsoup.select.CssTest:nthLastOfType_simple
|    org.jsoup.select.CssTest:nthChild_advanced
|    org.jsoup.select.CssTest:nthOfType_advanced
|    org.jsoup.select.CssTest:nthLastChild_advanced
|    org.jsoup.select.CssTest:nthLastOfType_advanced
|    org.jsoup.select.CssTest:firstOfType
|    org.jsoup.select.CssTest:lastOfType
|    org.jsoup.select.CssTest:empty
|    org.jsoup.select.CssTest:onlyChild
|    org.jsoup.select.CssTest:onlyOfType
|    org.jsoup.select.CssTest:root
|    org.jsoup.internal.StringUtilTest:padding
|    org.jsoup.internal.StringUtilTest:paddingInACan
|    org.jsoup.internal.StringUtilTest:isBlank
|    org.jsoup.internal.StringUtilTest:isNumeric
|    org.jsoup.internal.StringUtilTest:normaliseWhiteSpace
|    org.jsoup.internal.StringUtilTest:normaliseWhiteSpaceHandlesHighSurrogates
|    org.jsoup.internal.StringUtilTest:resolvesRelativeUrls
|    org.jsoup.nodes.NodeTest:setBaseUriIsRecursive
|    org.jsoup.nodes.NodeTest:handlesAbsPrefix
|    org.jsoup.nodes.NodeTest:handlesAbsPrefixOnHasAttr
|    org.jsoup.nodes.NodeTest:literalAbsPrefix
|    org.jsoup.nodes.NodeTest:handleAbsOnFileUris
|    org.jsoup.nodes.NodeTest:handleAbsOnLocalhostFileUris
|    org.jsoup.nodes.NodeTest:handlesAbsOnProtocolessAbsoluteUris
|    org.jsoup.nodes.NodeTest:absHandlesRelativeQuery
|    org.jsoup.nodes.NodeTest:absHandlesDotFromIndex
|    org.jsoup.nodes.NodeTest:testRemove
|    org.jsoup.nodes.NodeTest:testReplace
|    org.jsoup.nodes.NodeTest:ownerDocument
|    org.jsoup.nodes.NodeTest:before
|    org.jsoup.nodes.NodeTest:after
|    org.jsoup.nodes.NodeTest:unwrap
|    org.jsoup.nodes.NodeTest:unwrapNoChildren
|    org.jsoup.nodes.NodeTest:orphanNodeReturnsNullForSiblingElements
|    org.jsoup.nodes.NodeTest:nodeIsNotASiblingOfItself
|    org.jsoup.nodes.NodeTest:supportsClone
|    org.jsoup.nodes.NodeTest:changingAttributeValueShouldReplaceExistingAttributeCaseInsensitive
+-------------------------------------------------------------------------------+
| Found 79 redundant test cases:
|    org.jsoup.select.QueryParserTest:testOrGetsCorrectPrecedence
|    org.jsoup.nodes.EntitiesTest:notMissingMultis
|    org.jsoup.nodes.EntitiesTest:quoteReplacements
|    org.jsoup.parser.CharacterReaderTest:consumeToChar
|    org.jsoup.nodes.DocumentTypeTest:constructorValidationOkWithBlankName
|    org.jsoup.nodes.AttributeTest:testWithSupplementaryCharacterInAttributeKeyAndValue
|    org.jsoup.parser.ParserTest:unescapeEntitiesHandlesLargeInput
|    org.jsoup.parser.AttributeParseTest:parsesRoughAttributeString
|    org.jsoup.parser.ParserSettingsTest:attributeCaseNormalization
|    org.jsoup.integration.ParseTest:testBrokenHtml5CharsetWithASingleDoubleQuote
|    org.jsoup.nodes.ElementTest:testAddNewText
|    org.jsoup.nodes.ElementTest:before
|    org.jsoup.nodes.ElementTest:testCssPath
|    org.jsoup.nodes.ElementTest:testChainedRemoveAttributes
|    org.jsoup.nodes.ElementTest:testLoopedRemoveAttributes
|    org.jsoup.nodes.ElementTest:testIs
|    org.jsoup.nodes.ElementTest:testNextElementSiblingAfterClone
|    org.jsoup.select.ElementsTest:attributes
|    org.jsoup.select.ElementsTest:wrap
|    org.jsoup.select.ElementsTest:wrapDiv
|    org.jsoup.select.ElementsTest:eq
|    org.jsoup.select.ElementsTest:classWithHyphen
|    org.jsoup.parser.XmlTreeBuilderTest:testPopToClose
|    org.jsoup.parser.XmlTreeBuilderTest:caseSensitiveDeclaration
|    org.jsoup.helper.HttpConnectionTest:throwsExceptionOnBodyAsBytesWithoutExecute
|    org.jsoup.helper.HttpConnectionTest:ignoresEmptyCookieNameAndVals
|    org.jsoup.helper.HttpConnectionTest:throwsOnOddData
|    org.jsoup.helper.HttpConnectionTest:encodeUrl
|    org.jsoup.helper.HttpConnectionTest:handlesHeaderEncodingOnRequest
|    org.jsoup.select.TraversorTest:filterSkipChildren
|    org.jsoup.parser.TokeniserStateTest:testRCDATAEndTagName
|    org.jsoup.parser.TokeniserStateTest:testSystemIdentifiersWithWhitespace
|    org.jsoup.parser.TokeniserStateTest:handlesLessInTagThanAsNewTag
|    org.jsoup.parser.TokeniserStateTest:testMalformedSelfClosingTag
|    org.jsoup.integration.ConnectTest:bodyAfterParseThrowsValidationError
|    org.jsoup.integration.ConnectTest:supportsDeflate
|    org.jsoup.nodes.DocumentTest:testClonesDeclarations
|    org.jsoup.nodes.DocumentTest:testMetaCharsetUpdateXmlDisabledNoChanges
|    org.jsoup.nodes.DocumentTest:parseAndHtmlOnDifferentThreads
|    org.jsoup.parser.TokeniserTest:bufferUpInAttributeVal
|    org.jsoup.parser.TokeniserTest:handleLargeText
|    org.jsoup.parser.TokeniserTest:canParseVeryLongBogusComment
|    org.jsoup.helper.DataUtilTest:testCharset
|    org.jsoup.select.SelectorTest:testByAttributeStarting
|    org.jsoup.select.SelectorTest:testGroupOrAttribute
|    org.jsoup.select.SelectorTest:parentChildElement
|    org.jsoup.select.SelectorTest:testPseudoContains
|    org.jsoup.select.SelectorTest:notClass
|    org.jsoup.select.SelectorTest:containsData
|    org.jsoup.select.SelectorTest:containsWithQuote
|    org.jsoup.select.SelectorTest:selectFirst
|    org.jsoup.select.SelectorTest:selectFirstWithAnd
|    org.jsoup.select.SelectorTest:xml_mixed_case_simple_name
|    org.jsoup.select.SelectorTest:xml_lowercase_wildcard_name
|    org.jsoup.parser.HtmlParserTest:createsDocumentStructure
|    org.jsoup.parser.HtmlParserTest:handlesEscapedData
|    org.jsoup.parser.HtmlParserTest:handlesProtocolRelativeUrl
|    org.jsoup.parser.HtmlParserTest:handlesBlocksInDefinitions
|    org.jsoup.parser.HtmlParserTest:normalisesEmptyDocument
|    org.jsoup.parser.HtmlParserTest:handlesMisnestedTagsBI
|    org.jsoup.parser.HtmlParserTest:commentBeforeHtml
|    org.jsoup.parser.HtmlParserTest:createsFormElements
|    org.jsoup.parser.HtmlParserTest:handlesInvalidDoctypes
|    org.jsoup.parser.TokenQueueTest:unescape
|    org.jsoup.nodes.FormElementTest:actionWithNoValue
|    org.jsoup.safety.CleanerTest:simpleBehaviourTest
|    org.jsoup.safety.CleanerTest:testRelaxed
|    org.jsoup.safety.CleanerTest:testDropComments
|    org.jsoup.safety.CleanerTest:preservesRelativeLinksIfConfigured
|    org.jsoup.safety.CleanerTest:supplyOutputSettings
|    org.jsoup.safety.CleanerTest:handlesControlCharactersAfterTagName
|    org.jsoup.select.CssTest:nthOfType_unknownTag
|    org.jsoup.internal.StringUtilTest:join
|    org.jsoup.internal.StringUtilTest:isWhitespace
|    org.jsoup.nodes.NodeTest:handlesBaseUri
|    org.jsoup.nodes.NodeTest:handlesAbsOnImage
|    org.jsoup.nodes.NodeTest:root
|    org.jsoup.nodes.NodeTest:traverse
|    org.jsoup.nodes.NodeTest:childNodesCopy
+-------------------------------------------------------------------------------+
| Wrote reduced test suite code to: /home/lukas/workspace/master-benchmark/results/jsoup/mc/genetic/gen
+-------------------------------------------------------------------------------+
